{"version":3,"sources":["webpack:///webpack/bootstrap 47ec6cdf40a31d4f5ace","webpack:///external \"React\"","webpack:///./src/typescript/datatypes.ts","webpack:///./src/typescript/parser.ts","webpack:///./src/typescript/text_tools.ts","webpack:///external \"ReactDOM\"","webpack:///./src/components/Text.tsx","webpack:///./src/typescript/keyboard_tools.ts","webpack:///./src/components/Terminal.tsx","webpack:///./src/typescript/commands.ts","webpack:///./src/typescript/venience/venience_world.ts","webpack:///./src/components/History.tsx","webpack:///./src/components/Prompt.tsx","webpack:///./src/components/TypeaheadList.tsx","webpack:///./src/typescript/main.tsx","webpack:///./src/typescript/venience/observer_moments.ts","webpack:///external \"ReactTransitionGroup\""],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 47ec6cdf40a31d4f5ace","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 0\n// module chunks = 0","export class FuckDict<K, V> {\n    readonly keys_map: Map<string, K>;\n    readonly values_map: Map<string, V>;\n\n    size: number = 0\n\n    constructor(a?: [K, V][]) {\n        this.keys_map = new Map<string, K>();\n        this.values_map = new Map<string, V>();\n\n        if (a !== undefined) {\n            for (let [k, v] of a) {\n                this.set(k, v);\n            }\n        }\n    }\n\n    set(k: K, v: V) {\n        let s = k.toString();\n        this.keys_map.set(s, k);\n        this.values_map.set(s, v);\n        this.size = this.keys_map.size;\n        return this;\n    }\n\n    get(k: K) {\n        let s = k.toString();\n        return this.values_map.get(s);\n    }\n\n    has_key(k: K) {\n        return this.keys_map.has(k.toString());\n    }\n\n    keys_array() {\n        return Array.from(this.keys_map.values());\n    }\n\n    values_array() {\n        return Array.from(this.values_map.values());\n    }\n\n    entries_array(): [K, V][] {\n        let result: [K, V][] = [];\n        for (let [s, k] of this.keys_map.entries()) {\n            result.push([k, this.values_map.get(s)]);\n        }\n        return result;\n    }\n\n    keys_equal(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n\n        for (let elem of other.keys_array()) {\n            if (!this.has_key(elem)){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    keys_intersect(other: FuckDict<K, V>) {\n        let result: K[] = [];\n        for (let k of this.keys_array()) {\n            if (other.has_key(k)) {\n                result.push(k)\n            }\n        }\n        return result;\n    }\n\n    keys_subset(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    toString() {\n        let entry_strings: string[] = this.entries_array().map((x) => x.toString()).sort();\n\n        return `FuckDict<${entry_strings.join(',')}>`;\n    }\n\n    copy() {\n        return new FuckDict(this.entries_array());\n    }\n}\n\nexport type FuckSet<T> = FuckDict<T, undefined>;\n\nexport function arrays_fuck_equal<T>(ar1: T[], ar2: T[]) {\n    if (ar1.length !== ar2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < ar1.length; i++) {\n        if (ar1[i].toString() !== ar2[i].toString()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function array_fuck_contains<T>(ar: T[], elt: T){\n    return ar.some((x) => x.toString() === elt.toString())\n}\n\nexport type Point2 = [number, number];\n\nexport function make_matrix2(data_obj: number[][]) {\n    let dim_y = data_obj.length;\n    let dim_x = data_obj[0].length;\n\n    let data = new Int16Array(data_obj.reduce((x, y) => x.concat(y)));\n    // TODO complain if the total length is wrong\n    return new Matrix2(data, dim_x, dim_y);\n}\n\nexport function zeros(dim_x: number, dim_y: number) {\n    return new Matrix2(new Int16Array(dim_x * dim_y), dim_x, dim_y);\n}\n\nexport class Matrix2 {\n    readonly dim_x: number;\n    readonly dim_y: number;\n    readonly data: Int16Array;\n    \n    constructor (data: Int16Array, dim_x: number, dim_y: number) {\n        this.data = data;\n        this.dim_x = dim_x;\n        this.dim_y = dim_y;\n    }\n\n    get(x: number, y: number): number {\n        return this.data[y * this.dim_x + x];\n    }\n\n    set(x: number, y: number, value: number) {\n        this.data[y * this.dim_x + x] = value;\n    }\n\n    rotate(degrees: number): Matrix2 {\n        //validate input better\n\n        if (degrees == 360 || degrees == 0) {\n            return this;\n        }\n\n        const n_rotations = degrees / 90;\n        let m: Matrix2 = this;\n        const dim_x = this.dim_x;\n        const dim_y = this.dim_y;\n        for (let i = 0; i < n_rotations; i++){\n            let new_data = new Int16Array(dim_x * dim_y);\n            let new_mat2 = new Matrix2(new_data, dim_y, dim_x);\n            for (let y = 0; y < dim_y; y++){\n                for (let x = 0; x < dim_x; x++){\n                    new_mat2.set(dim_y - 1 - y, x, m.get(x, y));\n                }\n            }\n            m = new_mat2;\n        }\n        return m\n    }\n\n    contains(value: number): boolean{\n        return this.data.indexOf(value) !== -1;\n    }\n\n    copy(): Matrix2 {\n        return new Matrix2(this.data.slice(), this.dim_x, this.dim_y);\n    }\n}\n\n\nexport type Counter<T> = Map<T, number>;\n\nexport function counter_add<T>(counter: Counter<T>, key: T, inc: number){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return counter.set(key, cur_val + inc);\n}\n\nexport function counter_get<T>(counter: Counter<T>, key: T){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return cur_val;\n}\n\nexport function counter_update<T>(counter1: Counter<T>, counter2: Counter<T>){\n    counter2.forEach(function (v, k){\n        counter_add(counter1, k, v);\n    });\n\n    return counter1;\n}\n\nexport function counter_order<T>(counter: Counter<T>, include_zero=false){\n    let result = Array.from(counter.entries()).sort((a, b) => a[1] - b[1]);\n    if (!include_zero) {\n        result = result.filter(([t, i]) => i > 0);\n    }\n    return result.map(([t, i]) => t);\n}\n\n// export type Disablable<T> = T | DWrapped<T>;\n// export type DWrapped<T> = {value: T, disablable: true, enabled: boolean}\n\n// export function is_dwrapped<T>(x: Disablable<T>): x is DWrapped<T>{\n//     return (<DWrapped<T>>x).disablable !== undefined;\n// }\n\n// export function set_enabled<T>(x: Disablable<T>, enabled: boolean=true): Disablable<T>{\n//     if (is_dwrapped(x)) {\n//         if (x.enabled !== enabled) {\n//             x.enabled = enabled; //could do check here for enabled being set properly already\n//         }\n//         return x;\n//     } else {\n//         let result: DWrapped<T> = {value: x, disablable: true, enabled};\n        \n//         return result;\n//     }\n// }\n\n// export function unwrap<T>(x: Disablable<T>): T {\n//     if (is_dwrapped(x)) {\n//         return x.value;\n//     } else {\n//         return x;\n//     }\n// }\n\n// export function with_disablable<T1, T2>(x: Disablable<T1>, f: (t1: T1) => Disablable<T2>): Disablable<T2> {\n//     return set_enabled(unwrap(f(unwrap(x))), is_enabled(x));\n// }\n\n// export function is_enabled<T>(x: Disablable<T>): boolean {\n//     if (is_dwrapped(x)){\n//         return x.enabled;\n//     } else {\n//         return true;\n//     }\n// }\n\nexport type Annotatable<T, AT> = T | Annotated<T, AT>;\nexport type Annotated<T, AT> = {value: T, annotated: true, annotation: AT};\n\nexport function is_annotated<T, AT>(x: Annotatable<T, AT>): x is Annotated<T, AT>{\n    if (x === undefined) {\n        return false;\n    }\n    return (<Annotated<T, AT>>x).annotated !== undefined;\n}\n\nexport function annotate<T, AT>(x: Annotatable<T, AT>, annotation: AT): Annotatable<T, AT>{\n    if (is_annotated(x)) {\n        if (x.annotation !== annotation) {\n            x.annotation = annotation; //could do check here for enabled being set properly already\n        }\n        return x;\n    } else {\n        let result: Annotated<T, AT> = {value: x, annotated: true, annotation};\n        \n        return result;\n    }\n}\n\nexport function unwrap<T, AT>(x: Annotatable<T, AT>): T {\n    if (is_annotated(x)) {\n        return x.value;\n    } else {\n        return x;\n    }\n}\n\nexport function with_annotatable<T1, T2, TA>(x: Annotatable<T1, TA>, f: (t1: T1) => Annotatable<T2, TA>, default_value?: TA): Annotatable<T2, TA> {\n    return annotate(unwrap(f(unwrap(x))), get_annotation(x, default_value));\n}\n\nexport function get_annotation<T, TA>(x: Annotatable<T, TA>, default_value?: TA): TA {\n    if (is_annotated(x)){\n        return x.annotation;\n    } else {\n        return default_value;\n    }\n}\n\n\nexport type Disablable<T> = Annotatable<T, boolean>\n\nexport function set_enabled<T>(x: Disablable<T>, enabled: boolean=true){\n    return annotate(x, enabled);\n}\n\nexport function with_disablable<T1, T2>(x: Disablable<T1>, f: (t1: T1) => Disablable<T2>): Disablable<T2> {\n    return with_annotatable(x, f);\n}\n\nexport function is_enabled<T>(x: Disablable<T>): boolean {\n    let result = get_annotation(x);\n    if (result === undefined) {\n        return true;\n    }\n\n    return result;\n}\n\n\nexport type Numbered<T> = Annotatable<T, number>\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/datatypes.ts","import {starts_with, tokenize, untokenize, normalize_whitespace, split_tokens} from './text_tools';\n\nimport {\n    Disablable,\n    unwrap,\n    is_enabled,\n    set_enabled,\n    with_disablable,\n    array_fuck_contains\n} from './datatypes';\n\n\nexport type Token = string;\n\nexport enum DisplayEltType {\n    keyword = 0,\n    option = 1,\n    filler = 2,\n    partial = 3,\n    error = 4\n}\n\nexport interface DisplayElt {\n    display: DisplayEltType, // the intended display style for this element\n    match: string, // the string that the parser matched for this element\n    typeahead?: Disablable<string>[], // array of typeahead options\n    name?: string, // internal name of this match (probably not useful for rendering purposes)\n}\n\nexport enum MatchValidity {\n    valid = 0,\n    partial = 1,\n    invalid = 2\n}\n\nexport class CommandParser {\n    command: string;\n    tokens: Token[];\n    token_gaps: string[];\n    position: number = 0;\n    validity: MatchValidity = MatchValidity.valid;\n    match: DisplayElt[] = [];\n    tail_padding: string = '';\n\n    constructor(command: string) {\n        this.command = command;\n        [this.tokens, this.token_gaps] = tokenize(command);\n    }\n\n    consume_exact(spec_tokens: Token[], display: DisplayEltType=DisplayEltType.keyword, name?: string): boolean {\n        if (spec_tokens.length === 0) {\n            throw new Error(\"Can't consume an empty spec.\");\n        }\n        \n        let match_tokens: Token[] = [];\n        let match_gaps: string[] = [];\n        let pos_offset = 0;\n        for (let spec_tok of spec_tokens) {\n            if (this.position + pos_offset === this.tokens.length) {\n                this.validity = MatchValidity.partial;\n                break; //partial validity\n            }\n            let next_tok = this.tokens[this.position + pos_offset];\n            let next_gap = this.token_gaps[this.position + pos_offset];\n\n            if (spec_tok.toLowerCase() === next_tok.toLowerCase()) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                pos_offset++;\n                continue;\n            }\n\n            if (starts_with(spec_tok.toLowerCase(), next_tok.toLowerCase())) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                this.validity = MatchValidity.partial;\n                pos_offset++;\n                break;\n            }\n            this.validity = MatchValidity.invalid;\n            break;   \n        }\n\n        this.position += pos_offset;\n\n\n        if (this.validity === MatchValidity.valid) {\n            this.match.push({\n                display: display,\n                match: untokenize(match_tokens, match_gaps),\n                name: name});\n            return true;\n        }\n\n        if (this.validity === MatchValidity.partial) {\n            if (this.position === this.tokens.length) {\n                this.match.push({\n                    display: DisplayEltType.partial,\n                    match: untokenize(match_tokens, match_gaps),\n                    typeahead: [untokenize(spec_tokens)],\n                    name: name});\n                return false;\n            } else {\n                this.validity = MatchValidity.invalid;\n            }\n        }\n\n        match_tokens.push(...this.tokens.slice(this.position));\n        match_gaps.push(...this.token_gaps.slice(this.position, this.tokens.length));\n        this.position = this.tokens.length;\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_gaps),\n            name: name});\n        return false;\n    }\n\n    subparser() {\n        return new CommandParser(untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position)));\n    }\n\n    integrate(subparser: CommandParser) {\n        this.position += subparser.position;\n        this.match.push(...subparser.match);\n        this.validity = subparser.validity;\n    }\n\n    consume_option<S extends string>(option_spec_tokens: Disablable<Token[]>[], name?: string, display: DisplayEltType=DisplayEltType.option): S | false{\n        let partial_matches: Disablable<DisplayElt>[] = [];\n        let exact_match_subparser: CommandParser = null;\n        let exact_match_spec_toks: Token[] = null;\n        for (let spec_toks of option_spec_tokens) {\n            let subparser = this.subparser();\n            let is_exact_match = subparser.consume_exact(unwrap(spec_toks), display, name);\n\n            if (is_enabled(spec_toks)){\n                if (is_exact_match) {\n                    \n                    exact_match_subparser = subparser;\n                    exact_match_spec_toks = unwrap(spec_toks);\n                    \n                    continue;\n                }\n\n                if (subparser.validity === MatchValidity.partial){\n                    partial_matches.push(subparser.match[0]);\n                }\n            } else {\n                if (is_exact_match || subparser.validity === MatchValidity.partial){\n                    let disabled_match = set_enabled(subparser.match[0], false);\n                    partial_matches.push(disabled_match);\n                }\n            }\n        }\n        \n        if (exact_match_subparser !== null) {\n            \n            let typeahead = partial_matches.map((de) => with_disablable(de, (x) => x.typeahead[0]));\n            this.integrate(exact_match_subparser);\n            this.match[this.match.length-1].typeahead = typeahead;\n\n            return <S>normalize_whitespace(untokenize(exact_match_spec_toks));\n        }\n\n        if (partial_matches.filter((de) => is_enabled(de)).length > 0) {\n            this.validity = MatchValidity.partial;\n            this.position = this.tokens.length - 1;\n            let typeahead = partial_matches.map((de) => with_disablable(de, (x) => x.typeahead[0]));\n            this.match.push({\n                display: DisplayEltType.partial,\n                match: unwrap(partial_matches[0]).match,\n                typeahead: typeahead,\n                name: name,\n            });\n            return false;\n        }\n\n        this.validity = MatchValidity.invalid;\n        let match_tokens = this.tokens.slice(this.position);\n        let match_token_gaps = this.token_gaps.slice(this.position, this.tokens.length);\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_token_gaps),\n            name: name});\n        return false;\n    }\n\n    consume_filler(spec_tokens: Token[]){\n        return this.consume_exact(spec_tokens, DisplayEltType.filler);\n    }\n\n    is_done() {\n        if (this.position === this.tokens.length - 1 && this.tokens[this.tokens.length - 1] === ''){\n            return this.validity === MatchValidity.valid;\n        }\n\n        if (this.position !== this.tokens.length) {\n            return false;\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    done() {\n        if (!this.is_done() /*this.position !== this.tokens.length */) {\n            this.validity = MatchValidity.invalid;\n            this.match.push({\n                display: DisplayEltType.error,\n                match: untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position, this.tokens.length))\n            });\n            this.position = this.tokens.length;\n        } else {\n            if (this.position === this.tokens.length - 1) {\n                this.tail_padding = this.token_gaps[this.token_gaps.length - 1];\n            }\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    get_match(name: string){\n        for (let m of this.match) {\n            if (m.name === name) {\n                return m;\n            }\n        }\n        return null;\n    }\n}\n\nexport function stop_early<R>(gen: IterableIterator<string | boolean>): R | undefined{\n    let value: any | boolean = undefined;\n    let done: boolean = false;\n\n    while (!done) {\n        let result = gen.next(value);\n        value = result.value;\n        done = result.done;\n        if (value === false) {\n            return;\n        }\n    }\n\n    return <R>value;\n}\n\nexport function with_early_stopping<R>(gen_func: (...any) => IterableIterator<any>): (...any) => R {\n    function inner(...args) {\n        let gen = gen_func(...args);\n        return <R>stop_early(gen);\n    }\n    return <(...any) => R>inner;\n}\n\nexport function* consume_option_stepwise_eager(parser: CommandParser, options: string[][]) {\n    // assumption: no option is a prefix of any other option\n\n    let current_cmd = [];\n    let pos = 0;\n    while (true) {\n        let remaining_options = options.filter((toks) => \n            toks.slice(0, pos).every((tok, i) => tok === current_cmd[i])\n        );\n\n        if (remaining_options.length === 0) {\n            return untokenize(current_cmd);\n        }\n\n        let next_tokens: Token[] = [];\n        for (let opt of remaining_options) {\n            if (pos < opt.length) {\n                let tok = opt[pos];\n                if (next_tokens.indexOf(tok) === -1) {\n                    next_tokens.push(tok);\n                }\n            } else {\n                return untokenize(current_cmd);\n            }\n        }\n        let display_type: DisplayEltType;\n        if (pos === 0) {\n            display_type = DisplayEltType.keyword;\n        } else {\n            display_type = next_tokens.length === 1 ? DisplayEltType.filler : DisplayEltType.option;\n        }\n        \n        let next_tok = yield parser.consume_option(next_tokens.map(split_tokens), undefined, display_type);\n        current_cmd.push(next_tok);\n        pos++;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/parser.ts","import * as React from 'react';\n\nexport function uncapitalize(msg: string) {\n    return msg[0].toLowerCase() + msg.slice(1);\n}\n\nexport function capitalize(msg: string) {\n    return msg[0].toUpperCase() + msg.slice(1);\n}\n\n\nexport function starts_with(str: string, searchString: string, position?: number){\n    position = position || 0;\n    return str.substr(position, searchString.length) === searchString;\n}\n\nexport function tokens_equal(tks1: string[], tks2: string[]) {\n    if (tks1.length !== tks2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < tks1.length; i++) {\n        if (tks1[i] !== tks2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function tokenize(s: string): [string[], string[]] {\n    let word_pat = /[\\S]+/g;\n    let space_pat = /[^\\S]+/g;\n\n    let tokens = s.split(space_pat);\n    let gaps = s.split(word_pat);\n\n    if (tokens.length > 0){\n        if (tokens[0] === '') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] === '' && gaps[gaps.length - 1] === '') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n    }\n\n    return [tokens, gaps];\n}\n\nexport function split_tokens(s: string): string[] {\n    let space_pat = /[^\\S]+/g;\n    let tokens = s.split(space_pat);\n    if (tokens.length > 0){\n        if (tokens[0] === '') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] === '') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n    }\n    return tokens;\n}\n\nfunction tokenize_tests() {\n    console.log('tokenize tests');\n    console.log(tokenize(' l'));\n}\n\nexport function untokenize(tokens: string[], gaps?: string[]){\n    if (gaps === undefined) {\n        return tokens.join(' ');\n    }\n    \n    let result: string = '';\n    let i = 0;\n    for (i = 0; i < gaps.length; i++){\n        result += gaps[i];\n        if (i < tokens.length) {\n            result += tokens[i];\n        }\n    }\n\n    return result;\n}\n\nexport function get_indenting_whitespace(s: string) {\n    let space_pat = /^[^\\S]+/;\n    let result = space_pat.exec(s);\n    if (result === null){\n        return '';\n    }\n    return result[0];\n}\n\nexport function ends_with_whitespace(s: string) {\n    let last_space_pat = /\\s$/;\n    return last_space_pat.exec(s) !== null;\n}\n\nexport function normalize_whitespace(s: string) {\n    return s.trim().replace(/\\s+/g, ' ');\n}\n\nexport function last(x: any[] | string){\n    return x[x.length - 1];\n}\n\nexport function random_choice(choices: any[]) {\n  var index = Math.floor(Math.random() * choices.length);\n  return choices[index];\n}\n\nexport function dedent(strs: TemplateStringsArray, ...args) {\n    // do interpolation\n    let result: string = strs[0];\n    for (let i = 0; i < args.length; i++) {\n        result += args[i] + strs[i + 1];\n    }\n\n    //find the first newline with whitespace after it\n    let pat = /\\n +/;\n    let m = pat.exec(result);\n\n    if (m === null) {\n        return result\n    }\n\n    let replace_pat = new RegExp(m[0], 'g');\n    let result2 = result.replace(replace_pat, '\\n');\n    \n   return result2;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/text_tools.ts","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 4\n// module chunks = 0","import * as React from 'react';\n\nimport {DisplayEltType, MatchValidity} from '../typescript/parser';\n\nexport const Carat = () => (\n  <span>\n    >&nbsp;\n  </span>\n);\n\nfunction get_display_color(det: DisplayEltType) {\n  switch (det) {\n    case DisplayEltType.keyword:\n      return 'aqua';\n    case DisplayEltType.option:\n      return 'orange';\n    case DisplayEltType.filler:\n      return 'ivory';\n    case DisplayEltType.partial:\n      return 'silver';\n    case DisplayEltType.error:\n      return 'red';\n  }\n}\n\nexport const ParsedText = (props) => {\n  let {parser, typeaheadIndex, children} = props;\n\n  let style: any = {\n    //display: 'inline-block',\n    whiteSpace: 'pre-wrap',\n    position: 'relative'\n  }\n  let validity = parser.validity;\n  if (validity === MatchValidity.valid) {\n    style.fontWeight = '900';\n    style.fontStyle = 'italic'\n  } else {\n    style.fontWeight = '100';\n    if (validity === MatchValidity.invalid) {\n      style.opacity = '0.6';\n    }\n  }\n\n  const elt_style: any = {\n    //display: 'inline-block'\n  }\n\n  const span_style: any = {\n    //display: 'inline-block'\n  }\n\n  return (\n    <div className=\"parsed-text\" style={{/*display: 'inline-block'*/}}>\n      <Carat />\n      <div style={style}>\n        {(parser === undefined) ? '' : \n          parser.match.map((elt, i) => (\n            <div key={i.toString()} style={{...elt_style, ...{color: get_display_color(elt.display)}}}>\n              <span style={span_style}>\n                {elt.match + ( i === parser.match.length - 1  ? parser.tail_padding : '' ) }\n              </span>\n              { ( i === typeaheadIndex ) ? children : '' }\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport const OutputText = (props) => {\n  const {message_html} = props;\n\n  return (\n    <div className=\"output-text\" dangerouslySetInnerHTML={{__html: message_html}} />\n  );\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Text.tsx","export let keys = {\n    tab: 9,\n    enter: 13,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40\n};\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/keyboard_tools.ts","import * as React from 'react';\n\nimport {Prompt} from './Prompt';\nimport {ParsedText} from './Text';\nimport {TypeaheadList} from './TypeaheadList';\nimport {History, History2, History3} from './History';\n\nimport {get_indenting_whitespace, ends_with_whitespace} from '../typescript/text_tools';\n\nimport {WorldType, WorldDriver} from \"../typescript/commands\";\n\nimport {MatchValidity} from '../typescript/parser';\n\nimport {is_enabled} from '../typescript/datatypes';\n\nimport * as ReactTransitionGroup from 'react-transition-group';\n\nexport class Terminal<T extends WorldType<T>> extends React.Component<any, {world_driver: WorldDriver<T>}> {\n  contentContainer: any;\n  prompt: any;\n  typeahead_list: any;\n  history: any;\n\n\n  constructor(props) {\n    super(props);\n    this.state = {world_driver: this.props.world_driver};\n  }\n\n  componentDidMount() {\n    this.prompt.focus();\n  }\n\n  handleKeys = (event) => {\n    let swallowed_enter = (this.typeahead_list !== null) ? this.typeahead_list.handleKeys(event) : false;\n    if (!swallowed_enter) {\n      this.prompt.handleKeys(event);\n    }\n  }\n  \n  handleSubmit = () => {\n    if (this.isCurrentlyValid()) {\n      const output = this.state.world_driver.commit();\n      this.setState(\n        {world_driver: this.state.world_driver});\n      this.history.commit_after_update = true;\n      //this.history.commit();\n      return true;\n    }\n    return false;\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  isCurrentlyValid = () => {\n    let parser = this.currentParser();\n    return parser.validity === MatchValidity.valid && parser.is_done();\n  }\n\n  handlePromptChange = (input) => {\n    let result = this.state.world_driver.apply_command(input, false);\n    this.setState({\n      world_driver: this.state.world_driver\n    });\n   this.history.edit_after_update = true;\n    //this.history.edit();\n    this.prompt.focus();\n    this.scrollToPrompt();\n    let that = this;\n    window.setTimeout(function() {\n      that.scrollToPrompt();\n    }, 0)\n  }\n\n  handleTypeaheadSelection = (option) => {\n    let matched_tokens = this.currentParser().match.slice(0, this.currentTypeaheadIndex() + 1).map((elt) => elt.match);\n    let current_indentation = this.currentIndentation();\n    if (current_indentation === '' && matched_tokens.length > 1) {\n      current_indentation = ' ';\n    }\n    let new_last_token = current_indentation + option;\n    matched_tokens[matched_tokens.length - 1] = new_last_token;\n\n    let new_command = ''.concat(...matched_tokens) + ' ';\n    this.handlePromptChange(new_command);\n    this.prompt.setState({value: new_command});\n  }\n\n  currentParser = () => this.state.world_driver.current_state.parser;\n\n  currentTypeaheadIndex = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = parser.match.length - 1;\n    let last_match = parser.match[typeahead_ind];\n    if (parser.match.length > 1 && last_match.match === '') {\n      typeahead_ind--;\n    }\n\n    return typeahead_ind;\n  }\n\n  currentTypeahead = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = this.currentTypeaheadIndex();\n\n    if (typeahead_ind === -1) {\n      return [];\n    }\n\n    let typeahead = parser.match[typeahead_ind].typeahead;\n    if (typeahead === undefined) {\n      return [];\n    }\n    return typeahead;\n  }\n\n  currentIndentation = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = this.currentTypeaheadIndex();\n\n    if (typeahead_ind === -1) {\n      return '';\n    }\n\n    return get_indenting_whitespace(parser.match[typeahead_ind].match)\n  }\n\n  scrollToPrompt = () => {\n    this.prompt.input.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"end\"});\n  }\n\n  render() {\n    return (\n      <div className=\"terminal\" tabIndex={-1} onKeyDown={this.handleKeys} ref={cc => this.contentContainer = cc}>\n        <History3\n          timeout={700}\n          onAnimationFinish={this.scrollToPrompt}\n          history={this.state.world_driver.history}\n          possible_history={this.state.world_driver.possible_history}\n          ref={h => this.history = h}\n          />\n        <Prompt\n          onSubmit={this.handleSubmit}\n          onChange={this.handlePromptChange}\n          ref={p => this.prompt = p}>\n          <ParsedText\n            parser={this.currentParser()}\n            typeaheadIndex={this.currentTypeaheadIndex()}\n          >\n            <TypeaheadList\n              typeahead={this.currentTypeahead()}\n              indentation={this.currentIndentation()}\n              onTypeaheadSelection={this.handleTypeaheadSelection}\n              ref={t => this.typeahead_list = t}\n            />\n          </ParsedText>\n        </Prompt>\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Terminal.tsx","import {starts_with, tokenize, untokenize, normalize_whitespace, split_tokens} from './text_tools';\n\nimport {\n    Annotatable,\n    annotate,\n    Disablable,\n    unwrap,\n    get_annotation,\n    with_annotatable,\n    with_disablable,\n    set_enabled,\n    is_enabled\n} from './datatypes';\n\nimport {CommandParser, DisplayEltType, Token, MatchValidity} from './parser';\n\nexport interface CommandHandler<T extends WorldType<T>> {\n    handle_command(parser: CommandParser): CommandResult<T>\n}\n\nexport interface WorldType<T extends WorldType<T>> extends CommandHandler<T> {\n    // handle_command(parser: CommandParser): CommandResult<T>,\n    interstitial_update?(): InterstitialUpdateResult<T>,\n    interpret_history?(history: InterstitialUpdateResult<T>): HistoryInterpretationOp\n}\n\nexport type InterstitialUpdateResult<T extends WorldType<T>> = {\n    world?: T;\n    message?: HTMLElement;\n} | undefined;\n\nexport type CommandResult<T extends WorldType<T>> = InterstitialUpdateResult<T> & {\n    parser?: CommandParser;\n} | undefined;\n\nexport type HistoryInterpretation = string[];\n\nexport type HistoryInterpretationOp = ({'add': string} | {'remove': string})[];\n\nexport type PostProcessedCommandResult<T extends WorldType<T>> = CommandResult<T> & {\n    index?: number;\n    message_classes?: HistoryInterpretation;\n}\n\nexport interface Command<T extends WorldType<T>> {\n    command_name: Token[];\n    execute: (world: T, parser: CommandParser) => CommandResult<T>;\n}\n\nexport function apply_command<T extends WorldType<T>> (world: T, cmd: string) {\n    let parser = new CommandParser(cmd);\n\n    let result: CommandResult<T> = {parser: parser, world: world};\n    let cmd_result = world.handle_command(parser)\n    \n    if (cmd_result !== undefined) {\n        if (cmd_result.world !== undefined) {\n            result.world = cmd_result.world;\n        }\n        if (cmd_result.message !== undefined) {\n            result.message = cmd_result.message;\n        }\n\n        result = apply_interstitial_update(result);\n    }\n\n    return result;\n}\n\nfunction apply_interstitial_update<T extends WorldType<T>>(result: CommandResult<T>): CommandResult<T> {\n    if (result.world.interstitial_update !== undefined) {\n        let res2 = result.world.interstitial_update();\n        if (res2 !== undefined) {\n            if (res2.world !== undefined) {\n                result.world = res2.world;\n            }\n            if (res2.message !== undefined) { \n                //assume they updated the original message in some way   \n                result.message = res2.message;\n            }\n        }\n    }\n    return result;\n}\n\nclass HistoryInterpretationError extends Error {};\n\nfunction apply_history_interpretation_op(interp: HistoryInterpretation, op: HistoryInterpretationOp): HistoryInterpretation {\n    if (op === undefined || op.length === 0){\n        return interp;\n    }\n    let new_interp: HistoryInterpretation;\n    if (interp === undefined) {\n        new_interp = [];\n    } else {\n        new_interp = [...interp];\n    }\n    for (let o of op) {\n        if (o['add'] !== undefined){\n            let message_class = o['add'];\n            if (new_interp.indexOf(message_class) === -1) {\n                new_interp.push(message_class);\n            }\n        }\n        if (o['remove'] !== undefined){\n            let message_class = o['remove'];\n            let idx = new_interp.indexOf(message_class);\n            if (idx !== -1) {\n                new_interp.splice(idx, 1);\n            }\n        }\n    }\n    return new_interp;\n}\n\nfunction apply_history_interpretation<T extends WorldType<T>>(history: PostProcessedCommandResult<T>[], world: T): PostProcessedCommandResult<T>[] {\n    if (world.interpret_history === undefined) {\n        return history;\n    } else {\n        let history_input = history.map(({world, message}) => ({world, message}));\n\n        let interp_ops = history_input.map(world.interpret_history, world);\n\n        let new_history = [];\n        for (let i = 0; i < interp_ops.length; i++) {\n            let new_elt = {...history[i]};\n            let msg_clss = new_elt.message_classes;\n            let op = interp_ops[i];\n            new_elt.message_classes = apply_history_interpretation_op(msg_clss, op);\n            new_history.push(new_elt);\n        }\n        return new_history;\n    }\n}\n\nexport class WorldDriver<T extends WorldType<T>> {\n    previous_histories: PostProcessedCommandResult<T>[][] = [];\n\n    history: PostProcessedCommandResult<T>[];\n\n    possible_history: PostProcessedCommandResult<T>[];\n    current_state: CommandResult<T>;\n\n    constructor (initial_world: T) {\n        let initial_result: PostProcessedCommandResult<T> = {world: initial_world};\n        initial_result = apply_interstitial_update(initial_result);\n        initial_result.index = 0;\n        this.history = apply_history_interpretation([initial_result], initial_world);\n \n        this.apply_command('', false); //populate this.current_state\n    }\n\n    apply_command(cmd: string, commit: boolean = true) {\n        let prev_state = unwrap(this.history[this.history.length - 1]);\n        let result: PostProcessedCommandResult<T> = apply_command(prev_state.world, cmd);\n         \n        result.index = prev_state.index + 1;\n\n        this.current_state = result;\n\n        if (this.current_state.parser.validity === MatchValidity.valid) {\n            this.possible_history = apply_history_interpretation([...this.history, this.current_state], this.current_state.world);\n            if (commit) {\n                this.commit();\n            }\n        } else {\n            this.possible_history = this.history;\n        }\n        return result;\n    }\n\n    commit() {\n        //save previous history for posterity\n        this.previous_histories.push(this.history);\n\n        //filter out any disabled history\n        this.history = this.possible_history.filter(is_enabled); //.map(x => annotate(x, 1));\n\n        this.apply_command('', false);\n        return this.current_state;\n    }\n}\n\n// eager dispatch\n\ntype WorldWithEagerDispatch<T extends WorldType<T>> = WorldType<T> & {\n    get_commands(): Disablable<Command<T>>[],\n}\n\nexport function eager_dispatch<T extends WorldWithEagerDispatch<T>>(world: T, parser: CommandParser) {\n    let commands = world.get_commands();\n    let options = commands.map((cmd) => with_disablable(cmd, (c) => c.command_name));\n    \n    let cmd_name = parser.consume_option(options, 'command', DisplayEltType.keyword);\n    let result: CommandResult<T> = {parser: parser, world: world};\n\n    if (!cmd_name) {\n        return result;\n    }\n\n    let command = unwrap(commands[commands.findIndex((cmd) => (\n        cmd_name === untokenize(unwrap(cmd).command_name)))]);\n\n    let cmd_result = command.execute(world, parser);\n\n    return cmd_result\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/commands.ts","import {\n    CommandResult,\n    InterstitialUpdateResult,\n    HistoryInterpretationOp,\n    WorldType\n} from '../commands'\n\nimport {\n    CommandParser,\n    DisplayEltType,\n    with_early_stopping,\n    consume_option_stepwise_eager\n} from '../parser'\n\nimport {\n    FuckDict,\n    FuckSet,\n    array_fuck_contains\n} from '../datatypes';\n\nimport {tokenize, untokenize} from '../text_tools';\n\nimport {\n    ObserverMomentID,\n    ObserverMoment,\n    alcove_oms\n} from './observer_moments';\n\n\n\n//instead of homes, boxes\n\n// Charlotte\n// Southern rural culture\n// Pacifier, baby's clothes, blanket\n// Medical writeup, printed out\n\n// Ben\n// New england mist, trees\n// All notes\n// Musical score of numbers\n\n// Danielle\n// Coffee mug\n// \n\ntype VenienceWorldState = {\n    experiences?: ObserverMomentID[],\n    history_index?: number,\n}\n\nexport class VenienceWorld implements WorldType<VenienceWorld>{\n\n    readonly experiences: ObserverMomentID[];\n    readonly history_index: number;\n    \n    constructor({experiences, history_index}: VenienceWorldState) {\n        if (experiences === undefined) {\n            experiences = ['bed, sleeping 1'];\n        }\n        if (history_index === undefined) {\n            history_index = 0;\n        }\n        \n        this.experiences = experiences;\n        this.history_index = history_index;\n    }\n\n    update({experiences, history_index}: VenienceWorldState) {\n        if (experiences === undefined) {\n            experiences = this.experiences;\n        }\n        if (history_index === undefined) {\n            history_index = this.history_index;\n        }\n\n        return new VenienceWorld({experiences, history_index});\n    }\n\n    current_om(): ObserverMomentID {\n        for (let i = this.experiences.length - 1; i >= 0; i--) {\n            let exp = this.experiences[i]\n            if (exp !== null) {\n                return exp;\n            }\n        }\n        throw \"Somehow got a fully null history.\";\n    }\n\n    handle_command(parser: CommandParser) {\n        let world = this;\n        return with_early_stopping(function*(parser: CommandParser) {\n            let om = alcove_oms.get(world.current_om());\n\n            if (om.transitions === null) {\n                //dispatch to a fancier handler\n                return;\n            }\n\n            let cmd_options = om.transitions.map(([cmd, om_id]) => cmd)\n\n            if (cmd_options.length === 0) {\n                yield parser.done();\n                return;\n            }\n\n            let om_id_choice: ObserverMomentID;\n\n            if (cmd_options.length === 1) {\n                let cmd = cmd_options[0];\n                om_id_choice = om.transitions[0][1];\n                for (let phrase of cmd) {\n                    let display: DisplayEltType = DisplayEltType.filler;\n                    if (phrase.charAt(0) === '*') {\n                        display = DisplayEltType.keyword;\n                        phrase = phrase.substring(1);\n                    } else if (phrase.charAt(0) === '&') {\n                        display = DisplayEltType.option;\n                        phrase = phrase.substring(1);\n                    }\n                    tokenize(phrase)\n                    yield parser.consume_exact(tokenize(phrase)[0], display);\n                }\n                yield parser.done();\n\n            } else {\n\n                let cmd_choice = yield* consume_option_stepwise_eager(parser, cmd_options);\n\n                yield parser.done();\n\n                om_id_choice = world.current_om();\n                om.transitions.forEach(([cmd, om_id]) => {\n                    if (cmd_choice === untokenize(cmd)) {\n                        om_id_choice = om_id;\n                    }\n                });\n            }\n\n            return {world: world.update({\n                        experiences: [...world.experiences, om_id_choice],\n                        history_index: world.history_index + 1\n                    })};\n        })(parser);\n    }\n\n    interstitial_update() {\n        let result: CommandResult<VenienceWorld> = {};\n        let world_update: VenienceWorldState = {};\n\n        let message_parts: string[] = [];\n\n        let om_descr = alcove_oms.get(this.current_om()).message;\n\n        message_parts.push(om_descr);\n\n        if (this.experiences.length > 0) {\n            let loop_idx = this.experiences.indexOf(this.current_om());\n            if (loop_idx !== this.experiences.length - 1) {\n                let new_experiences = this.experiences.slice().fill(null, loop_idx + 1);\n                world_update.experiences = new_experiences;\n            }\n        }\n\n        if (message_parts.length > 0) {\n            result.message = document.createElement('div');\n            result.message.innerHTML = message_parts.join('\\n\\n');\n        }\n\n        if (Object.keys(world_update).length > 0){\n            result.world = this.update(world_update);\n        }\n\n        return result;\n    }\n\n    interpret_history(history_elt: InterstitialUpdateResult<VenienceWorld>): HistoryInterpretationOp {\n        \n        let interp_op: HistoryInterpretationOp = [];\n\n        let current_om = this.current_om();\n        let hist_om = history_elt.world.current_om();\n\n        if (current_om === 'bed, awakening 2') {\n            let to_forget: ObserverMomentID[] = [\n                'bed, sleeping 1',\n                'bed, awakening 1',\n                'bed, sitting up 1',\n                'bed, lying down 1',\n                'bed, sleeping 2'\n            ];\n            if (array_fuck_contains(to_forget, hist_om)) {\n                interp_op.push({'add': 'forgotten'});\n            }\n        }\n\n        if (current_om === 'alcove, interpreting 1') {\n            if (hist_om === 'alcove, beginning interpretation'){\n                interp_op.push({'add': 'interp-alcove-1-enabled'})\n            }\n        }\n\n        if (current_om === 'alcove, interpreting 2') {\n            if (hist_om === 'alcove, beginning interpretation'){\n                interp_op.push({'add': 'interp-alcove-2-enabled'})\n            }\n        }\n\n        if (current_om === 'alcove, interpreting 3') {\n            if (hist_om === 'alcove, beginning interpretation'){\n                interp_op.push({'add': 'interp-alcove-3-enabled'})\n            }\n        }\n\n        if (this.experiences[history_elt.world.history_index] === null) {\n            interp_op.push({'add': 'forgotten'});\n        }\n\n        return interp_op;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/venience/venience_world.ts","import * as React from 'react';\nimport * as ReactDom from \"react-dom\";\nimport * as ReactTransitionGroup from 'react-transition-group';\n\nimport {Prompt} from './Prompt';\nimport {ParsedText, OutputText, Carat} from './Text';\nimport {get_annotation, is_enabled, unwrap} from '../typescript/datatypes';\n\n\nexport class BookGuy extends React.Component<any, any> {\n  /*\n    BookGuy is a bad component that get's the danged job done.\n\n    It encapsulates a single element of history in the game.\n\n    When a css change to the history element is \"committed\" (via this.commit()),\n    It triggers an idiosyncratic little animation progression that\n    adds CSS classes in a certain order and dynamically sets\n    the max-height on all elements contained by the history element\n    so that they can grow or shrink smoothly by added css transitions on\n    the max-height property.\n\n    The particulars of the animation progress are currently undocumented because\n    they are pretty bad and might change.\n  */\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message_classes: [],\n      adding_message_classes: [],\n      removing_message_classes: [],\n      entering: true\n    };\n  }\n\n  edit(possible_message_classes) {\n    if (possible_message_classes === undefined) {\n      possible_message_classes = [];\n    }\n    let edit_message_classes = [];\n    let message_classes = this.state.message_classes;\n\n    let removing_message_classes = []\n    for (let mc of message_classes) {\n        if (possible_message_classes.indexOf(mc) === -1) {\n            removing_message_classes.push(mc);\n        }\n    }\n\n    let adding_message_classes = []\n    for (let pmc of possible_message_classes) {\n        if (message_classes.indexOf(pmc) === -1) {\n            adding_message_classes.push(pmc);\n        }\n    }\n\n    this.setState({removing_message_classes, adding_message_classes});\n  }\n\n  commit() {\n    let adding_classes = this.state.adding_message_classes;\n    let removing_classes = this.state.removing_message_classes;\n\n    if (this.state.entering\n        || adding_classes.length > 0\n        || removing_classes.length > 0){\n      let new_message_classes = [...this.state.message_classes];\n\n      new_message_classes.push(...adding_classes);\n\n      for (let rmc of removing_classes) {\n        new_message_classes.splice(new_message_classes.indexOf(rmc), 1);\n      }\n\n      this.setState({\n        message_classes: new_message_classes,\n        adding_message_classes: [],\n        removing_message_classes: [],\n      }, () => this.animate(adding_classes, removing_classes));\n    }\n  }\n\n  animate(adding_classes=[], removing_classes=[]) {\n    function walkElt(elt, f){\n      let children = elt.children;\n      for (let i = 0; i < children.length; i++) {\n        let child = children.item(i);\n        walkElt(child, f)\n      }\n      f(elt)\n    }\n\n    let comp_elt: any = ReactDom.findDOMNode(this);\n\n    if (this.state.entering) {\n      comp_elt.classList.add('animation-new')\n      this.setState({entering: false});\n    }\n\n    // Momentarily apply the animation-pre-compute class\n    // to accurately measure the target maxHeight\n    // and check for the custom --is-collapsing property\n    // (This is basically an abomination and I am sorry.)\n    comp_elt.classList.add('animation-pre-compute');\n    \n    walkElt(comp_elt, (e) => e.dataset.maxHeight = `${e.scrollHeight}px`);\n    comp_elt.dataset.isCollapsing = parseInt(getComputedStyle(comp_elt).getPropertyValue('--is-collapsing'));\n\n    comp_elt.classList.remove('animation-pre-compute');\n\n    \n    let edit_classes = [\n      ...adding_classes.map(c => 'adding-' + c),\n      ...removing_classes.map(c => 'removing-' + c)\n    ]\n    comp_elt.classList.add('animation-start', ...edit_classes);\n\n    \n    // If --is-collapsing was set by the animation-pre-compute class,\n    // then apply the maxHeight update at the end of this animation frame\n    // rather than the beginning of the next one.\n    // I have no idea why this works/is necessary, but it does/is.\n    if (comp_elt.dataset.isCollapsing == 1) {\n      walkElt(comp_elt, (e) => e.style.maxHeight = e.dataset.maxHeight);\n    }\n      \n    requestAnimationFrame(() => {\n      // If --is-collapsing wasn't set in the animation-pre-compute class,\n      // then apply the maxHeight update now.\n      // Websites technology keyboard mouse.\n      if (comp_elt.dataset.isCollapsing != 1) {\n        walkElt(comp_elt, (e) => e.style.maxHeight = e.dataset.maxHeight);\n      }\n      \n      comp_elt.classList.add('animation-active');\n\n      setTimeout(() => {\n        comp_elt.classList.remove(\n          'animation-new',\n          'animation-start',\n          'animation-active',\n          ...edit_classes);\n\n        walkElt(comp_elt, (e) => e.style.maxHeight = '');\n\n        if (this.props.onAnimationFinish){\n          this.props.onAnimationFinish();\n        }\n      }, this.props.timeout)\n      \n    });\n  }\n\n  render() {\n    let classList = ['history', ...this.state.message_classes];\n    classList.push(...this.state.adding_message_classes.map(s => 'would-add-'+s));\n    classList.push(...this.state.removing_message_classes.map(s => 'would-remove-'+s));\n    \n    let className = classList.join(' ');\n    \n    return (\n      <div className={className}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n}\n\nexport class History3 extends React.Component<any, any> {\n  book_guys: BookGuy[] = [];\n\n  edit_after_update = false;\n  commit_after_update = false;\n\n  constructor(props) {\n    super(props);\n  }\n\n  edit() {\n    this.props.history.forEach((hist) => {\n      let {parser, message, message_classes, index} = hist;\n      let the_book_guy = this.book_guys[index];\n      the_book_guy.edit(this.props.possible_history[index].message_classes);\n    });\n  }\n\n  commit() {\n    this.book_guys.forEach((bg) => bg.commit());\n  }\n\n\n  render() {\n    return (\n      <div>\n        {this.props.history.map(hist => {\n          let msg_html = '';\n          if (hist.message !== undefined) {\n            msg_html = hist.message.innerHTML;\n          }\n          \n          return (\n            <BookGuy\n              timeout={this.props.timeout}\n              onAnimationFinish={this.props.onAnimationFinish}\n              key={hist.index}\n              ref={bg => this.book_guys[hist.index] = bg}>\n              {hist.index > 0 ? (\n                <ParsedText parser={hist.parser} />\n              ) : ''} \n              <OutputText message_html={msg_html} />\n            </BookGuy>\n          );\n        })}\n      </div>\n    )\n  }\n\n  componentDidUpdate() {\n    if (this.edit_after_update) {\n      this.edit()\n      this.edit_after_update = false;\n    }\n    if (this.commit_after_update) {\n      this.commit()\n      this.commit_after_update = false;\n    }\n  }\n}\n\nconst Fade = ({children, ...props}) => (\n  <ReactTransitionGroup.CSSTransition\n    timeout={700}\n    onExit={(d) => {\n      d.style.maxHeight = `${d.clientHeight}px`;\n    }}\n    onEntering={(d) => {\n        // let d_output_text = d.querySelector('.output-text');\n        // d_output_text.style.maxHeight = `${d_output_text.scrollHeight}px`\n        d.style.maxHeight = `${d.scrollHeight}px`;\n    }}\n    classNames={\"fade\"}\n    {...props} >\n        {children}\n  </ReactTransitionGroup.CSSTransition>\n);\n\nexport const History = ({history, possible_history, ...fade_props}) => (\n    <ReactTransitionGroup.TransitionGroup>\n      {history.map((hist) => {\n        let {parser, message, message_classes, index} = hist;\n        if (message_classes === undefined) {\n            message_classes = [];\n        }\n\n        let key = index.toString();\n        \n        if (message_classes.length > 0) {\n          key += '_' + message_classes.join(':');\n        }\n\n        let possible_message_classes = possible_history[index].message_classes;\n        if (possible_message_classes === undefined) {\n            possible_message_classes = [];\n        }\n\n        let edit_message_classes = [];\n\n        for (let mc of message_classes) {\n            if (possible_message_classes.indexOf(mc) === -1) {\n                edit_message_classes.push('removing-' + mc);\n            }\n        }\n\n        for (let pmc of possible_message_classes) {\n            if (message_classes.indexOf(pmc) === -1) {\n                edit_message_classes.push('adding-' + pmc);\n            }\n        }\n\n        let edit_message_class_name = edit_message_classes.join(' ');\n        let class_name = 'history ' + edit_message_class_name + ' ' + message_classes.join(' ');\n\n        let msg_html = '';\n        if (message !== undefined) {\n          msg_html = message.innerHTML;\n        }\n\n        if (index === 0) {\n          return (\n            <Fade key={key} {...fade_props}>\n              <div className={class_name}>\n                {/*<p>*/}\n                  <OutputText message_html={msg_html} />\n                {/*</p>*/}\n              </div>\n            </Fade>\n          );\n        }\n        return (\n          <Fade key={key} {...fade_props}>\n            <div className={class_name}>\n              <ParsedText parser={parser} />\n              \n              {/*<p>*/}\n                <OutputText message_html={msg_html} />\n              {/*</p>*/}\n            </div>\n          </Fade>\n        )\n      })}\n    </ReactTransitionGroup.TransitionGroup>\n);\n\nexport const History2 = ({history, possible_history, ...fade_props}) => (\n    <div>\n      {history.map((hist) => {\n        let {parser, message, message_classes, index} = hist;\n        if (message_classes === undefined) {\n            message_classes = [];\n        }\n\n        let key = index.toString();\n        if (message_classes.length > 0) {\n          key += '_' + message_classes.join(':');\n        }\n\n        let possible_message_classes = possible_history[index].message_classes;\n        if (possible_message_classes === undefined) {\n            possible_message_classes = [];\n        }\n\n        let edit_message_classes = [];\n\n        for (let mc of message_classes) {\n            if (possible_message_classes.indexOf(mc) === -1) {\n                edit_message_classes.push('removing-' + mc);\n            }\n        }\n\n        for (let pmc of possible_message_classes) {\n            if (message_classes.indexOf(pmc) === -1) {\n                edit_message_classes.push('adding-' + pmc);\n            }\n        }\n\n        let edit_message_class_name = edit_message_classes.join(' ');\n        let class_name = 'history ' + edit_message_class_name + ' ' + message_classes.join(' ');\n\n        let msg_html = '';\n        if (message !== undefined) {\n          msg_html = message.innerHTML;\n        }\n\n        if (index === 0) {\n          return (\n            <BookGuy key={index} className={class_name}>\n              <OutputText message_html={msg_html} />\n            </BookGuy>\n          );\n        }\n        return (\n          <BookGuy key={index} className={class_name}>\n            <ParsedText parser={parser} />  \n            <OutputText message_html={msg_html} />\n          </BookGuy>\n        )\n      })}\n    </div>\n);\n\n\n// WEBPACK FOOTER //\n// ./src/components/History.tsx","import * as React from 'react';\nimport {keys} from '../typescript/keyboard_tools';\n\nconst InputWrapper = (props) => {\n  const {children, ...rest} = props;\n  const style: any = {\n    position: 'relative',\n    minHeight: '8em',\n    marginTop: '1em'\n  };\n  return (\n    <div style={style} {...rest} >\n      {children}\n    </div>\n  );\n}\n\nconst InputDisplay = (props) => {\n  const {children} = props;\n  const style = {\n    wordWrap: 'break-word',\n    \n  };\n\n  return (\n    <span style={style}>\n      {children}\n    </span>\n  );\n}\n\nconst Cursor = ({onClick}) => {\n  let style: any = {\n    position: 'absolute'\n  };\n  return (\n    <span className=\"blinking-cursor\" style={style} onClick={onClick}>\n      {String.fromCharCode(9608)}\n    </span>\n  );\n};\n\nexport class Prompt extends React.Component<any, any> {\n  input: any;\n\n  state = { value: '', is_focused: false };\n\n  handleSubmit = () => {\n    let success = this.props.onSubmit();\n    if (success) {\n      this.setState({value: ''});\n    } \n  }\n\n  // when key down is called by auto complete see if we should just submit\n  handleKeys = ({keyCode}) => {\n    if (keyCode === keys.enter) {\n      this.handleSubmit();\n    }\n    this.setCursor(this.input, this.input.value.length);\n  }\n\n  handleChange = () => {\n    const value = this.input.value;\n    this.props.onChange(value)\n    this.setState({value: value});\n  }\n\n  focus = () => {\n    this.input.focus();\n    this.setState({is_focused: true});\n  }\n\n  blur = () => {\n    this.setState({is_focused: false});\n  }\n\n  setCursor = (node, pos) => {\n      node = (typeof node === \"string\") ? document.getElementById(node) : node;\n\n      if(!node){\n          return false;\n      }else if(node.createTextRange){\n          var textRange = node.createTextRange();\n          textRange.collapse(true);\n          textRange.moveEnd(pos);\n          textRange.moveStart(pos);\n          textRange.select();\n          return true;\n      }else if(node.setSelectionRange){\n          node.setSelectionRange(pos,pos);\n          return true;\n      }\n\n      return false;\n  }\n\n  render() {\n    const input_style: any = {\n      position: 'absolute',\n      left: '-16px',\n      top: 0,\n      width: 0,\n      height: 0,\n      background: 'transparent',\n      border: 'none',\n      color: 'transparent',\n      outline: 'none',\n      padding: 0,\n      resize: 'none',\n      zIndex: -1,\n      overflow: 'hidden'\n    };\n    return (\n        <InputWrapper onClick={() => this.focus()}>\n            <input onChange={this.handleChange} value={this.state.value} style={input_style} ref={i => this.input = i} />\n            <InputDisplay>\n              {this.props.children}\n              {  \n                this.state.is_focused ?\n                  ( <Cursor onClick={() => this.handleSubmit()} /> ) :\n                  ''\n              }\n            </InputDisplay>\n        </InputWrapper>\n    );\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Prompt.tsx","import * as React from 'react';\n\nimport {keys} from '../typescript/keyboard_tools';\nimport {is_enabled, unwrap} from '../typescript/datatypes';\n\nexport class TypeaheadList extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.state = {selection_index: -1};\n  }\n\n  componentDidUpdate() {\n    if (this.state.selection_index >= this.props.typeahead.length) {\n      this.setState({selection_index: this.props.typeahead.length - 1});\n    }\n  }\n\n  handleClick(option) {\n    this.props.onTypeaheadSelection(option);\n  }\n\n  handleMouseOver(index) {\n    this.setState({selection_index: index});\n  }\n\n  handleKeys(event) {\n    let swallowed_enter = false;\n    \n    top: switch (event.keyCode) {\n      case keys.enter:\n        if (this.state.selection_index === -1) {\n          break;\n        }\n        swallowed_enter = true;\n      case keys.tab:\n        event.preventDefault();\n      case keys.right:      \n        if (this.props.typeahead.length === 0) {\n          break;\n        }\n        let selected = (this.state.selection_index === -1) ?\n          this.props.typeahead[0] :\n          this.props.typeahead[this.state.selection_index];\n\n        if (is_enabled(selected)) {\n          this.props.onTypeaheadSelection(unwrap(selected));\n        }\n        break;\n      \n      case keys.up:\n      case keys.down:\n        let new_selection_index;\n        switch (event.keyCode) {\n          case keys.up:\n            if (this.state.selection_index === -1) {\n              break top;\n            }\n            new_selection_index = this.state.selection_index - 1;\n            break;\n          case keys.down:\n            if (this.state.selection_index === this.props.typeahead.length - 1) {\n              break top;\n            }\n            new_selection_index = this.state.selection_index + 1;\n            break;  \n        }\n        this.setState({selection_index: new_selection_index});\n        break;\n    }\n\n    return swallowed_enter;\n  }\n\n  render() {\n    const {typeahead, indentation} = this.props;\n    const style: any = {\n      position: \"absolute\",\n      listStyleType: \"none\",\n      padding: 0,\n      margin: 0,\n      whiteSpace: 'pre',\n      color: 'silver'\n    };\n    return (\n      <ul style={style}>\n        {typeahead.map((option, i) => (\n          <li\n            key={i.toString()} \n            onMouseOver={() => this.handleMouseOver(i)}\n            style={{\n              marginTop: '1em',\n              background: i === this.state.selection_index ? 'DimGray' : 'inherit',\n              opacity: is_enabled(option) ? 1.0 : 0.4\n            }}\n            {...(\n              is_enabled(option)\n                ? {onClick: () => this.handleClick(unwrap(option))}\n                : {}\n            )}\n          >\n            <span>{indentation}</span>\n            <span>{unwrap(option)}</span>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/TypeaheadList.tsx","import * as React from \"react\";\nimport * as ReactDom from \"react-dom\";\n\nimport {Terminal} from \"../components/Terminal\";\n\nimport {WorldDriver} from \"../typescript/commands\";\n\n//import {BirdWorld} from '../typescript/bird_world';\nimport {VenienceWorld} from '../typescript/venience/venience_world';\n\nlet world_driver = new WorldDriver(new VenienceWorld({}))\n\nReactDom.render(<Terminal world_driver={world_driver} />, document.getElementById('terminal'));\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/main.tsx","import {\n    FuckDict,\n    FuckSet\n} from '../datatypes';\n\nimport {\n    CommandHandler,\n    WorldType\n} from '../commands';\n\nimport {\n    CommandParser\n} from '../parser';\n\nexport type ObserverMoment = {\n    id: ObserverMomentID,\n    message: string,\n    transitions: [string[], ObserverMomentID][] | null\n};\n\nfunction index_oms(oms: ObserverMoment[]): FuckDict<ObserverMomentID, ObserverMoment>{\n    let result = new FuckDict<ObserverMomentID, ObserverMoment>();\n\n    for (let om of oms){\n        result.set(om.id, om);\n    }\n\n    //second/third pass, typecheck em\n    let pointed_to: FuckSet<ObserverMomentID> = new FuckDict();\n    for (let om of oms) {\n        for (let [cmd, om_id] of om.transitions) {\n            if (!result.has_key(om_id)) {\n                throw `om \"${om.id}\" has transition to non-existant om \"${om_id}\"`;\n            }\n            pointed_to.set(om_id, undefined);\n        }\n    }\n\n    for (let om of oms.slice(1)) {\n        if (!pointed_to.has_key(om.id)) {\n            throw `om \"${om.id}\" is unreachable (and not the first in the list).`;\n        }\n    }\n    \n    return result;\n}\n\nexport type ObserverMomentID = (\n    // Alcove\n    'bed, sleeping 1' |\n    'bed, awakening 1' |\n    'bed, sitting up 1' |\n    'bed, lying down 1' |\n\n    'bed, sleeping 2' |\n    'bed, awakening 2' |\n    'bed, sitting up 2' |\n    'bed, looking around' |\n    \n    'desk, sitting down' |\n    'desk, opening the envelope' |\n    'desk, trying to understand' |\n    'desk, considering the sense of panic' |\n    'desk, searching for the notes' |\n    \n    'grass, slipping further' |\n    'grass, considering the sense of dread' |\n    'grass, asking 1' |\n    'grass, asking 2' |\n    \n    'alcove, beginning interpretation' |\n    'alcove, interpreting 1' |\n    'alcove, interpreting 2' |\n    'alcove, interpreting 3' |\n    'alcove, ending interpretation' |\n    \n    'alcove, entering the forest' |\n\n    // Tower\n    'base, from path' | \n    'base, regarding tower' |\n    'stairs 1, ascending' |\n    'platform 1, ascending' |\n    'stairs 2, ascending' |\n    'platform 2, ascending' |\n    'top, arriving' |\n    'top, surveying' |\n    'stairs 3, descending' |\n    'platform 2, descending' |\n    'stairs 2, descending' |\n    'platform 1, descending' |\n    'base, regarding path'\n);\n\n// // Alcove\n//     'bed, sleeping 1' |\n//     'bed, awakening 1' |\n//     'bed, sitting up 1' |\n//     'bed, lying down 1' |\n\n//     'bed, sleeping 2' |\n//     'bed, awakening 2' |\n//     'bed, sitting up 2' |\n//     'bed, looking around' |\n    \n//     'desk, sitting down' |\n//     'desk, opening the envelope' |\n//     'desk, trying to understand' |\n//     'desk, considering the sense of panic' |\n//     'desk, searching for the notes' |\n    \n//     'grass, slipping further' |\n//     'grass, considering the sense of dread' |\n//     'grass, asking 1' |\n//     'grass, asking 2' |\n    \n//     'grass, beginning interpretation' |\n//     'grass, interpreting 1' |\n//     'grass, interpreting 2' |\n//     'grass, interpreting 3' |\n//     'grass, ending interpretation' |\n    \n//     'alcove, entering the forest' |\n\n// Syntax shortcuts:\n// * = keyword\n// & = option\n\nexport let alcove_oms = index_oms([\n    {\n        id: 'bed, sleeping 1',\n        message: '',\n        transitions: [\n            [['*awaken'], 'bed, awakening 1']]\n    },\n    {\n        id: 'bed, awakening 1',\n        message: 'You awaken in your bed.',\n        transitions: [\n            [['*sit up'], 'bed, sitting up 1']]\n    },\n    {\n        id: 'bed, sitting up 1',\n        message: `You push yourself upright, blankets falling to your waist. You squint and see only the palest light of dawn. Crickets chirp in the forest bordering your alcove.\n        <br /><br />\n        Your body still feels heavy with sleep.\n        <br /><br />\n        Perhaps you’ll doze until the sun rises properly.`,\n        transitions: [\n            [['*lie down'], 'bed, lying down 1']]\n    },\n    {\n        id: 'bed, lying down 1',\n        message: `Yes, no reason to be up now.\n        <br /><br />\n        You slide back under the blankets. The autumn breeze cools your face.`,\n        transitions: [\n            [['*sleep', 'until', '&sunrise'], 'bed, sleeping 2']]\n    },\n    {\n        id: 'bed, sleeping 2',\n        message: `You dream of<br /><br />\n        <i>calamity,</i><br /><br />\n        a <i>shattered mirror,</i><br /><br />\n        an <i>ice-covered mountain,</i><br /><br />\n        <div class=\"interp\">and <i>her voice.</i></div>`,\n        transitions: [\n            [['*awaken'], 'bed, awakening 2']]\n    },\n    {\n        id: 'bed, awakening 2',\n        message: `You awaken in your bed.`,\n        transitions: [\n            [['*sit', 'up'], 'bed, sitting up 2']]\n    },\n    {\n        id: 'bed, sitting up 2',\n        message: `As you do, the first ray of sun sparkles through the trees, hitting your face. Your alcove begins to come to life.`,\n        transitions: [\n            [['*look', '&around'], 'bed, looking around']]\n    },\n    {\n        id: 'bed, looking around',\n        message: `You turn and dangle your knees off the bed. Your feet brush against the damp grass on the ground.\n        <br /><br />\n        You see your desk and chair a few paces away, in the center of the alcove.\n        <br /><br />\n        On all sides you are surrounded by trees.`,\n        transitions: [\n            [['*sit', 'at', '&the desk'], 'desk, sitting down']]\n    },\n    {\n        id: 'desk, sitting down',\n        message: `You pace across the grass and take your seat at the leather-bound study chair.\n        <br /><br />\n        On the desk is a large parchment envelope, bound in twine.`,\n        transitions: [\n            [['*open', '&the envelope'], 'desk, opening the envelope']]\n    },\n    {\n        id: 'desk, opening the envelope',\n        message: `You undo the twine, leaving it in a loop on the desk.\n        <br /><br />\n        You unfold the envelope’s flap.\n        <br /><br />\n        It’s empty. But it shouldn’t be.`,\n        transitions: [\n            [['*try', 'to', '&understand'], 'desk, trying to understand']]\n    },\n    {\n        id: 'desk, trying to understand',\n        message: `A panic comes over you. Without your notes, how will you continue your work?\n        <br /><br />\n        How will you understand? How will you honor Katya’s memory?`,\n        transitions: [\n            [['*consider', 'the', 'sense of', '&panic'], 'desk, considering the sense of panic']]\n    },\n    {\n        id: 'desk, considering the sense of panic',\n        message: `<div class=\"interp\">\n        Katya used to say that panic was like slipping down an ice-covered mountain face.\n        <br /><br />\n        It throws one particular path into relief: the path to the bottom.\n        </div>`,\n        transitions: [\n            [['*search', 'for', '&the notes'], 'desk, searching for the notes']]\n    },\n    {\n        id: 'desk, searching for the notes',\n        message: `You look in the envelope again.\n        <br /><br />\n        You look in the grass under the desk, under the chair.\n        <br /><br />\n        You strip your bed, finding nothing within the folds.\n        <br /><br />\n        <div class=\"interp\">\n        You can feel yourself slipping down an icy hill.\n        </div>`,\n        transitions: [\n            [['*slip', 'further'], 'grass, slipping further']]\n    },\n    {\n        id: 'grass, slipping further',\n        message: `Thoughts of dread, of a terrible, empty future, fill your mind.\n        <br /><br />\n        You curl up on the grass beneath you, holding yourself.`,\n        transitions: [\n            [['*consider', 'the sense of', '&dread'], 'grass, considering the sense of dread']]\n    },\n    {\n        id: 'grass, considering the sense of dread',\n        message: `<div class=\"interp\">\n        <i>\"Catch your breath, dear,\"</i> Katya would say. <i>\"The mountain, the ice, they are here to tell you something.\"</i>\n        </div>`,\n        transitions: [\n            [['tell', 'me', '&what?'], 'grass, asking 1']]\n    },\n    {\n        id: 'grass, asking 1',\n        message: `<div class=\"interp\">\n        <i>\"That you are capable of a great deal of care, my dear.\n        <br /><br />\n        That your capacity to experience meaning is as energetic as a body sliding down a mountain.\"</i>\n        </div>`,\n        transitions: [\n            [['what', 'should', 'I', '&do?'], 'grass, asking 2']]\n    },\n    {\n        id: 'grass, asking 2',\n        message: `<div class=\"interp\"><i>\n        \"Judge the direction of gravity. Judge the slickness of the ice.\n        <br /><br />\n        \"Survey the horizon.\n        <br /><br />\n        \"And then, choose where to go.\"\n        </i></div>`,\n        transitions: [\n            [['begin', '*interpretation'], 'alcove, beginning interpretation']]\n    },\n    {\n        id: 'alcove, beginning interpretation',\n        message: `\n        <div class=\"face-of-it\">\n        A nervous energy buzzes within your mind.\n        <br />\n        <br />\n        </div>\n        <div class=\"interp-alcove-1\">\n        Care. Orientation. Like gravity binds a body to the earth, your vulnerability binds you to a sense of meaning within the world. You have a <i>compass</i>.\n        <br />\n        <br />\n        </div>\n        <div class=\"face-of-it\">\n        Your notes are gone.\n        <br />\n        <br />\n        </div>\n        <div class=\"interp-alcove-2\">\n        Your effort to organize and understand everything Katya taught you, over the years. If they are truly gone, it is a great setback.\n        <br />\n        <br />\n        But the ice is not impossibly slick; the rock face not impossibly sheer. You have your mind. She still whispers to you, even now, <i>my dear.</i>\n        <br />\n        <br />\n        </div>\n        <div class=\"face-of-it\">\n        You are alone in a grassy alcove in the forest.\n        </div>\n        <div class=\"interp-alcove-3\">\n        <br />\n        Indeed. And perhaps it is time to leave. To venture forth from the confines of this sanctuary you have constructed.\n        <br /><br />\n        Your view of the horizon is occluded by the trees, from in here. Set out, seeking <i>new vantages.</i>\n        </div>`,\n        transitions: [\n            [['*judge', '&the direction of gravity'], 'alcove, interpreting 1']]\n    },\n    {\n        id: 'alcove, interpreting 1',\n        message: ``,\n        transitions: [\n            [['*judge', '&the slickness of the ice'], 'alcove, interpreting 2']]\n    },\n    {\n        id: 'alcove, interpreting 2',\n        message: ``,\n        transitions: [\n            [['*survey', '&the horizon'], 'alcove, interpreting 3']]\n    },\n    {\n        id: 'alcove, interpreting 3',\n        message: ``,\n        transitions: [\n            [['end', '*interpretation'], 'alcove, ending interpretation']]\n    },\n    {\n        id: 'alcove, ending interpretation',\n        message: `A sense of purpose exists within you. It had been occluded by the panic, but you can feel it there, now.\n        <br /><br />\n        You do not know precisely what awaits you, out there. You have slept and worked within this alcove for such a long time. You are afraid to leave.\n        <br /><br />\n        But your sense of purpose compels you. To go. To seek. To try to understand.`,\n        transitions: [\n            [['*enter', 'the', '&forest'], 'alcove, entering the forest']]\n    },\n    {\n        id: 'alcove, entering the forest',\n        message: `What lies within the forest, and beyond? What will it be like, out there?\n        <br /><br />\n        <i>(End of demo. Thanks for playing!)</i>`,\n        transitions: []\n    },\n]);\n\nexport let tower_oms = index_oms([\n    {\n        id: 'base, from path',\n        message: `<i>(Welcome to the demo! This game doesn't have a proper name yet.)</i>\n        <br /><br />\n        The viewing tower sits twenty feet inset from the footpath, towards the Mystic River.\n        The grass leading out to it is brown with wear.`,\n        transitions: [\n            [['approach', 'the viewing tower'], 'base, regarding tower']]\n    },\n    {\n        id: 'base, regarding tower',\n        message: `The viewing tower stands tall and straight. Its construction is one of basic, stable order. A square grid of thick wooden columns rooted deep within the ground rises up before you; the foundation of the tower.\n            <br /><br />\n            A wooden stairway set between the first two rows of columns leads upward.`,\n        transitions: [\n            [['climb', 'the stairs'], 'stairs 1, ascending']]\n    },\n    {\n        id: 'stairs 1, ascending',\n        message: `As you ascend, the ground below you recedes.\n            <br /><br />\n            <div class=\"meditation-1\">\n                You rifle through your notes to another of Katya’s meditations, this one on Vantage Points:\n                <br /><br />\n                \"We wander, for the most part, within a tangled, looping mess of thought; a ball of lint.\"\n                <br /> <br />\n            </div>\n            The stairway terminates at a flat wooden platform leading around a corner to the left, along the next edge of the tower.`,\n        transitions: [\n            [['turn', 'left', 'and proceed along the platform'], 'platform 1, ascending'],\n            [['turn', 'around', 'and descend the stairs'], 'base, regarding tower']]\n    },\n    {\n        id: 'platform 1, ascending',\n        message: `You catch glimpses of the grass, trees, and the Mystic River as you make your way across.\n            <br /><br />\n            <div class=\"meditation-1\">\n            You continue reading:\n            <br /><br />\n            \"From within the tangle, we feel lost. It is only when we find a vantage outside of the central tangle, looking over it, that we might sort out the mess in our minds.\"\n            <br /><br />\n            </div>\n            The platform terminates, and another wooden stairway to the left leads further up the tower.`,\n        transitions: [\n            [['turn', 'left', 'and climb the stairs'], 'stairs 2, ascending'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 1, ascending']]\n    },\n    {\n        id: 'stairs 2, ascending',\n        message: `They feel solid under your feet, dull thuds sounding with each step.\n            <br /><br />\n            <div class=\"meditation-1\">\n            \"It can feel like a deliverance when one reaches such a vantage after much aimless wandering.\"\n            <br /><br />\n            </div>\n            The stairs terminate in another left-branching platform.`,\n        transitions: [\n            [['turn', 'left', 'and proceed along the platform'], 'platform 2, ascending'],\n            [['turn', 'around', 'and descend the stairs'], 'platform 1, ascending']]\n    },\n    {\n        id: 'platform 2, ascending',\n        message: `You make your way across the weathered wood.\n            <br /><br />\n            <div class=\"meditation-1\">\n            \"The twisting fibres of our journey are put into perspective. We see how one piece of the path relates to another. It is peaceful from up there.\"\n            <br /><br />\n            </div>\n            A final wooden stairway to the left leads up to the top of the tower.`,\n        transitions: [\n            [['turn', 'left', 'and climb the stairs'], 'top, arriving'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 2, ascending']]\n    },\n    {\n        id: 'top, arriving',\n        message: `You reach the top. A grand visage of the Mystic River and Macdonald Park extends before you in all directions.`,\n        transitions: [\n            [['survey', 'the area'], 'top, surveying'],\n            [['descend', 'the stairs'], 'platform 2, ascending']]\n    },\n    {\n        id: 'top, surveying',\n        message: `You survey the looping fibres of path around the park, the two wooden bridges at either end, and the frozen river carving your vantage in two.\n            <br /><br />\n            You see the path you took to reach this viewing tower. You see it continue further onward, into MacDonald Park, and branch, curving into the brush by the river.\n            <br /><br />\n            You see the wooden footbridge crossing the river that you are destined to walk across, if you are ever to return to your study, and transcribe your experiences.\n            <br /><br />\n            <div class=\"meditation-1\">\n            \"But do not be fooled; all there is to do, once one has stood above the tangle for a while, and surveyed it, is to return to it.\"\n            </div>`,\n        transitions: [\n            [['descend', 'the stairs'], 'stairs 3, descending']]\n    },\n    {\n        id: 'stairs 3, descending',\n        message: `Your view of the surrounding park and river is once again obscured by the weathered wood of the viewing tower, rising up around you.\n            <br /><br />\n            <div class=\"meditation-1\">\n            \"Do not fret, my dear. Return to the madness of life after your brief respite.\"\n            </div>`,\n        transitions: [\n            [['turn', 'right', 'and proceed along the platform'], 'platform 2, descending'],\n            [['turn', 'around', 'and ascend the stairs'], 'top, surveying']]\n    },\n    {\n        id: 'platform 2, descending',\n        message: `The wooden beams of the viewing tower seem more like a maze now than an orderly construction. They branch off of each other and reconnect at odd angles.\n            <div class=\"meditation-1\">\n            <br /><br />\n            \"Expect to forget; to be turned around; to become tangled up.\"\n            </div>`,\n        transitions: [\n            [['turn', 'right', 'and descend the stairs'], 'stairs 2, descending'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 3, descending']]\n    },\n    {\n        id: 'stairs 2, descending',\n        message: `The light of the sun pokes through odd gaps in the tangles of wood, making you squint at irregular intervals.\n            <div class=\"meditation-1\">\n            <br /><br />\n            \"Find some joy in it; some exhilaration.\"\n            </div>`,\n        transitions: [\n            [['turn', 'right', 'and proceed along the platform'], 'platform 1, descending'],\n            [['turn', 'around', 'and ascend the stairs'], 'platform 2, descending']]\n    },\n    {\n        id: 'platform 1, descending',\n        message: `You know where you must go from here, roughly. The footpath will branch into thick brush up ahead. And a ways beyond that brush, a wooden footbridge.\n            <div class=\"meditation-1\">\n            <br /><br />\n            \"And know that you have changed, dear. That your ascent has taught you something.\"\n            </div>`,\n        transitions: [\n            [['turn', 'right', 'and descend the stairs'], 'base, regarding path'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 2, descending']]\n    },\n    {\n        id: 'base, regarding path',\n        message: `What lies within the brush you know you will enter, but which you can no longer see from this low vantage? What will it be like to walk across the footbridge?\n            <br /><br />\n            <i>(End of demo. Thanks for playing!)</i>`,\n        transitions: []\n    }\n]);\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/venience/observer_moments.ts","module.exports = ReactTransitionGroup;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactTransitionGroup\"\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}