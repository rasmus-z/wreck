{"version":3,"sources":["webpack:///webpack/bootstrap ee05cb56c72f3d5058f2","webpack:///external \"React\"","webpack:///./src/typescript/datatypes.ts","webpack:///./src/typescript/parser.ts","webpack:///./src/typescript/text_tools.ts","webpack:///./src/typescript/keyboard_tools.ts","webpack:///./src/components/Terminal.tsx","webpack:///./src/typescript/commands.ts","webpack:///./src/typescript/venience/venience_world.ts","webpack:///external \"ReactDOM\"","webpack:///./src/components/Prompt.tsx","webpack:///./src/components/Text.tsx","webpack:///./src/components/TypeaheadList.tsx","webpack:///./src/typescript/main.tsx"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ee05cb56c72f3d5058f2","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 0\n// module chunks = 0","export class FuckDict<K, V> {\n    readonly keys_map: Map<string, K>;\n    readonly values_map: Map<string, V>;\n\n    size: number = 0\n\n    constructor(a?: [K, V][]) {\n        this.keys_map = new Map<string, K>();\n        this.values_map = new Map<string, V>();\n\n        if (a !== undefined) {\n            for (let [k, v] of a) {\n                this.set(k, v);\n            }\n        }\n    }\n\n    set(k: K, v: V) {\n        let s = k.toString();\n        this.keys_map.set(s, k);\n        this.values_map.set(s, v);\n        this.size = this.keys_map.size;\n        return this;\n    }\n\n    get(k: K) {\n        let s = k.toString();\n        return this.values_map.get(s);\n    }\n\n    has_key(k: K) {\n        return this.keys_map.has(k.toString());\n    }\n\n    keys_array() {\n        return Array.from(this.keys_map.values());\n    }\n\n    values_array() {\n        return Array.from(this.values_map.values());\n    }\n\n    entries_array(): [K, V][] {\n        let result: [K, V][] = [];\n        for (let [s, k] of this.keys_map.entries()) {\n            result.push([k, this.values_map.get(s)]);\n        }\n        return result;\n    }\n\n    keys_equal(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n\n        for (let elem of other.keys_array()) {\n            if (!this.has_key(elem)){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    keys_intersect(other: FuckDict<K, V>) {\n        let result: K[] = [];\n        for (let k of this.keys_array()) {\n            if (other.has_key(k)) {\n                result.push(k)\n            }\n        }\n        return result;\n    }\n\n    keys_subset(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    toString() {\n        let entry_strings: string[] = this.entries_array().map((x) => x.toString()).sort();\n\n        return `FuckDict<${entry_strings.join(',')}>`;\n    }\n\n    copy() {\n        return new FuckDict(this.entries_array());\n    }\n}\n\nexport type FuckSet<T> = FuckDict<T, undefined>;\n\nexport function arrays_fuck_equal<T>(ar1: T[], ar2: T[]) {\n    if (ar1.length !== ar2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < ar1.length; i++) {\n        if (ar1[i].toString() !== ar2[i].toString()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function array_fuck_contains<T>(ar: T[], elt: T){\n    return ar.some((x) => x.toString() === elt.toString())\n}\n\nexport type Point2 = [number, number];\n\nexport function make_matrix2(data_obj: number[][]) {\n    let dim_y = data_obj.length;\n    let dim_x = data_obj[0].length;\n\n    let data = new Int16Array(data_obj.reduce((x, y) => x.concat(y)));\n    // TODO complain if the total length is wrong\n    return new Matrix2(data, dim_x, dim_y);\n}\n\nexport function zeros(dim_x: number, dim_y: number) {\n    return new Matrix2(new Int16Array(dim_x * dim_y), dim_x, dim_y);\n}\n\nexport class Matrix2 {\n    readonly dim_x: number;\n    readonly dim_y: number;\n    readonly data: Int16Array;\n    \n    constructor (data: Int16Array, dim_x: number, dim_y: number) {\n        this.data = data;\n        this.dim_x = dim_x;\n        this.dim_y = dim_y;\n    }\n\n    get(x: number, y: number): number {\n        return this.data[y * this.dim_x + x];\n    }\n\n    set(x: number, y: number, value: number) {\n        this.data[y * this.dim_x + x] = value;\n    }\n\n    rotate(degrees: number): Matrix2 {\n        //validate input better\n\n        if (degrees == 360 || degrees == 0) {\n            return this;\n        }\n\n        const n_rotations = degrees / 90;\n        let m: Matrix2 = this;\n        const dim_x = this.dim_x;\n        const dim_y = this.dim_y;\n        for (let i = 0; i < n_rotations; i++){\n            let new_data = new Int16Array(dim_x * dim_y);\n            let new_mat2 = new Matrix2(new_data, dim_y, dim_x);\n            for (let y = 0; y < dim_y; y++){\n                for (let x = 0; x < dim_x; x++){\n                    new_mat2.set(dim_y - 1 - y, x, m.get(x, y));\n                }\n            }\n            m = new_mat2;\n        }\n        return m\n    }\n\n    contains(value: number): boolean{\n        return this.data.indexOf(value) !== -1;\n    }\n\n    copy(): Matrix2 {\n        return new Matrix2(this.data.slice(), this.dim_x, this.dim_y);\n    }\n}\n\n\nexport type Counter<T> = Map<T, number>;\n\nexport function counter_add<T>(counter: Counter<T>, key: T, inc: number){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return counter.set(key, cur_val + inc);\n}\n\nexport function counter_get<T>(counter: Counter<T>, key: T){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return cur_val;\n}\n\nexport function counter_update<T>(counter1: Counter<T>, counter2: Counter<T>){\n    counter2.forEach(function (v, k){\n        counter_add(counter1, k, v);\n    });\n\n    return counter1;\n}\n\nexport function counter_order<T>(counter: Counter<T>, include_zero=false){\n    let result = Array.from(counter.entries()).sort((a, b) => a[1] - b[1]);\n    if (!include_zero) {\n        result = result.filter(([t, i]) => i > 0);\n    }\n    return result.map(([t, i]) => t);\n}\n\nexport type Disablable<T> = T | DWrapped<T>;\nexport type DWrapped<T> = {value: T, disablable: true, enabled: boolean}\n\n\nexport function is_dwrapped<T>(x: Disablable<T>): x is DWrapped<T>{\n    return (<DWrapped<T>>x).disablable !== undefined;\n}\n\nexport function set_enabled<T>(x: Disablable<T>, enabled: boolean=true): Disablable<T>{\n    if (is_dwrapped(x)) {\n        if (x.enabled !== enabled) {\n            x.enabled = enabled; //could do check here for enabled being set properly already\n        }\n        return x;\n    } else {\n        let result: DWrapped<T> = {value: x, disablable: true, enabled};\n        \n        return result;\n    }\n}\n\nexport function unwrap<T>(x: Disablable<T>): T {\n    if (is_dwrapped(x)) {\n        return x.value;\n    } else {\n        return x;\n    }\n}\n\nexport function with_disablable<T1, T2>(x: Disablable<T1>, f: (t1: T1) => Disablable<T2>): Disablable<T2> {\n    return set_enabled(unwrap(f(unwrap(x))), is_enabled(x));\n}\n\nexport function is_enabled<T>(x: Disablable<T>): boolean {\n    if (is_dwrapped(x)){\n        return x.enabled;\n    } else {\n        return true;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/datatypes.ts","import {starts_with, tokenize, untokenize, normalize_whitespace, split_tokens} from './text_tools';\n\nimport {\n    Disablable,\n    unwrap,\n    is_enabled,\n    set_enabled,\n    with_disablable,\n    array_fuck_contains\n} from './datatypes';\n\n\nexport type Token = string;\n\nexport enum DisplayEltType {\n    keyword = 0,\n    option = 1,\n    filler = 2,\n    partial = 3,\n    error = 4\n}\n\nexport interface DisplayElt {\n    display: DisplayEltType, // the intended display style for this element\n    match: string, // the string that the parser matched for this element\n    typeahead?: Disablable<string>[], // array of typeahead options\n    name?: string, // internal name of this match (probably not useful for rendering purposes)\n}\n\nexport enum MatchValidity {\n    valid = 0,\n    partial = 1,\n    invalid = 2\n}\n\nexport class CommandParser {\n    command: string;\n    tokens: Token[];\n    token_gaps: string[];\n    position: number = 0;\n    validity: MatchValidity = MatchValidity.valid;\n    match: DisplayElt[] = [];\n    tail_padding: string = '';\n\n    constructor(command: string) {\n        this.command = command;\n        [this.tokens, this.token_gaps] = tokenize(command);\n    }\n\n    consume_exact(spec_tokens: Token[], display: DisplayEltType=DisplayEltType.keyword, name?: string): boolean {\n        if (spec_tokens.length === 0) {\n            throw new Error(\"Can't consume an empty spec.\");\n        }\n        \n        let match_tokens: Token[] = [];\n        let match_gaps: string[] = [];\n        let pos_offset = 0;\n        for (let spec_tok of spec_tokens) {\n            if (this.position + pos_offset === this.tokens.length) {\n                this.validity = MatchValidity.partial;\n                break; //partial validity\n            }\n            let next_tok = this.tokens[this.position + pos_offset];\n            let next_gap = this.token_gaps[this.position + pos_offset];\n\n            if (spec_tok.toLowerCase() === next_tok.toLowerCase()) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                pos_offset++;\n                continue;\n            }\n\n            if (starts_with(spec_tok.toLowerCase(), next_tok.toLowerCase())) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                this.validity = MatchValidity.partial;\n                pos_offset++;\n                break;\n            }\n            this.validity = MatchValidity.invalid;\n            break;   \n        }\n\n        this.position += pos_offset;\n\n\n        if (this.validity === MatchValidity.valid) {\n            this.match.push({\n                display: display,\n                match: untokenize(match_tokens, match_gaps),\n                name: name});\n            return true;\n        }\n\n        if (this.validity === MatchValidity.partial) {\n            if (this.position === this.tokens.length) {\n                this.match.push({\n                    display: DisplayEltType.partial,\n                    match: untokenize(match_tokens, match_gaps),\n                    typeahead: [untokenize(spec_tokens)],\n                    name: name});\n                return false;\n            } else {\n                this.validity = MatchValidity.invalid;\n            }\n        }\n\n        match_tokens.push(...this.tokens.slice(this.position));\n        match_gaps.push(...this.token_gaps.slice(this.position, this.tokens.length));\n        this.position = this.tokens.length;\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_gaps),\n            name: name});\n        return false;\n    }\n\n    subparser() {\n        return new CommandParser(untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position)));\n    }\n\n    integrate(subparser: CommandParser) {\n        this.position += subparser.position;\n        this.match.push(...subparser.match);\n        this.validity = subparser.validity;\n    }\n\n    consume_option<S extends string>(option_spec_tokens: Disablable<Token[]>[], name?: string, display: DisplayEltType=DisplayEltType.option): S | false{\n        let partial_matches: Disablable<DisplayElt>[] = [];\n        let exact_match_subparser: CommandParser = null;\n        let exact_match_spec_toks: Token[] = null;\n        for (let spec_toks of option_spec_tokens) {\n            let subparser = this.subparser();\n            let is_exact_match = subparser.consume_exact(unwrap(spec_toks), display, name);\n\n            if (is_enabled(spec_toks)){\n                if (is_exact_match) {\n                    \n                    exact_match_subparser = subparser;\n                    exact_match_spec_toks = unwrap(spec_toks);\n                    \n                    continue;\n                }\n\n                if (subparser.validity === MatchValidity.partial){\n                    partial_matches.push(subparser.match[0]);\n                }\n            } else {\n                if (is_exact_match || subparser.validity === MatchValidity.partial){\n                    let disabled_match = set_enabled(subparser.match[0], false);\n                    partial_matches.push(disabled_match);\n                }\n            }\n        }\n        \n        if (exact_match_subparser !== null) {\n            \n            let typeahead = partial_matches.map((de) => with_disablable(de, (x) => x.typeahead[0]));\n            this.integrate(exact_match_subparser);\n            this.match[this.match.length-1].typeahead = typeahead;\n\n            return <S>normalize_whitespace(untokenize(exact_match_spec_toks));\n        }\n\n        if (partial_matches.filter((de) => is_enabled(de)).length > 0) {\n            this.validity = MatchValidity.partial;\n            this.position = this.tokens.length - 1;\n            let typeahead = partial_matches.map((de) => with_disablable(de, (x) => x.typeahead[0]));\n            this.match.push({\n                display: DisplayEltType.partial,\n                match: unwrap(partial_matches[0]).match,\n                typeahead: typeahead,\n                name: name,\n            });\n            return false;\n        }\n\n        this.validity = MatchValidity.invalid;\n        let match_tokens = this.tokens.slice(this.position);\n        let match_token_gaps = this.token_gaps.slice(this.position, this.tokens.length);\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_token_gaps),\n            name: name});\n        return false;\n    }\n\n    consume_filler(spec_tokens: Token[]){\n        return this.consume_exact(spec_tokens, DisplayEltType.filler);\n    }\n\n    is_done() {\n        if (this.position === this.tokens.length - 1 && this.tokens[this.tokens.length - 1] === ''){\n            return this.validity === MatchValidity.valid;\n        }\n\n        if (this.position !== this.tokens.length) {\n            return false;\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    done() {\n        if (!this.is_done() /*this.position !== this.tokens.length */) {\n            this.validity = MatchValidity.invalid;\n            this.match.push({\n                display: DisplayEltType.error,\n                match: untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position, this.tokens.length))\n            });\n            this.position = this.tokens.length;\n        } else {\n            if (this.position === this.tokens.length - 1) {\n                this.tail_padding = this.token_gaps[this.token_gaps.length - 1];\n            }\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    get_match(name: string){\n        for (let m of this.match) {\n            if (m.name === name) {\n                return m;\n            }\n        }\n        return null;\n    }\n}\n\nexport function stop_early<R>(gen: IterableIterator<string | boolean>): R | undefined{\n    let value: any | boolean = undefined;\n    let done: boolean = false;\n\n    while (!done) {\n        let result = gen.next(value);\n        value = result.value;\n        done = result.done;\n        if (value === false) {\n            return;\n        }\n    }\n\n    return <R>value;\n}\n\nexport function with_early_stopping<R>(gen_func: (...any) => IterableIterator<any>): (...any) => R {\n    function inner(...args) {\n        let gen = gen_func(...args);\n        return <R>stop_early(gen);\n    }\n    return <(...any) => R>inner;\n}\n\nexport function* consume_option_stepwise_eager(parser: CommandParser, options: string[][]) {\n    // assumption: option tokens contain no spaces\n    // assumption: no option is a prefix of any other option\n\n    let current_cmd = [];\n    let pos = 0;\n    while (true) {\n        let remaining_options = options.filter((toks) => \n            toks.slice(0, pos).every((tok, i) => tok === current_cmd[i])\n        );\n\n        if (remaining_options.length === 0) {\n            return untokenize(current_cmd);\n        }\n\n        let next_tokens: Token[] = [];\n        for (let opt of remaining_options) {\n            if (pos < opt.length) {\n                let tok = opt[pos];\n                if (next_tokens.indexOf(tok) === -1) {\n                    next_tokens.push(tok);\n                }\n            } else {\n                return untokenize(current_cmd);\n            }\n        }\n        let display_type: DisplayEltType;\n        if (pos === 0) {\n            display_type = DisplayEltType.keyword;\n        } else {\n            display_type = next_tokens.length === 1 ? DisplayEltType.filler : DisplayEltType.option;\n        }\n        \n        let next_tok = yield parser.consume_option(next_tokens.map(split_tokens), undefined, display_type);\n        current_cmd.push(next_tok);\n        pos++;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/parser.ts","import * as React from 'react';\n\nexport function uncapitalize(msg: string) {\n    return msg[0].toLowerCase() + msg.slice(1);\n}\n\nexport function capitalize(msg: string) {\n    return msg[0].toUpperCase() + msg.slice(1);\n}\n\n\nexport function starts_with(str: string, searchString: string, position?: number){\n    position = position || 0;\n    return str.substr(position, searchString.length) === searchString;\n}\n\nexport function tokens_equal(tks1: string[], tks2: string[]) {\n    if (tks1.length !== tks2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < tks1.length; i++) {\n        if (tks1[i] !== tks2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function tokenize(s: string): [string[], string[]] {\n    let word_pat = /[\\S]+/g;\n    let space_pat = /[^\\S]+/g;\n\n    let tokens = s.split(space_pat);\n    let gaps = s.split(word_pat);\n\n    if (tokens.length > 0){\n        if (tokens[0] === '') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] === '' && gaps[gaps.length - 1] === '') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n    }\n\n    return [tokens, gaps];\n}\n\nexport function split_tokens(s: string): string[] {\n    let space_pat = /[^\\S]+/g;\n    let tokens = s.split(space_pat);\n    if (tokens.length > 0){\n        if (tokens[0] === '') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] === '') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n    }\n    return tokens;\n}\n\nfunction tokenize_tests() {\n    console.log('tokenize tests');\n    console.log(tokenize(' l'));\n}\n\nexport function untokenize(tokens: string[], gaps?: string[]){\n    if (gaps === undefined) {\n        return tokens.join(' ');\n    }\n    \n    let result: string = '';\n    let i = 0;\n    for (i = 0; i < gaps.length; i++){\n        result += gaps[i];\n        if (i < tokens.length) {\n            result += tokens[i];\n        }\n    }\n\n    return result;\n}\n\nexport function get_indenting_whitespace(s: string) {\n    let space_pat = /^[^\\S]+/;\n    let result = space_pat.exec(s);\n    if (result === null){\n        return '';\n    }\n    return result[0];\n}\n\nexport function ends_with_whitespace(s: string) {\n    let last_space_pat = /\\s$/;\n    return last_space_pat.exec(s) !== null;\n}\n\nexport function normalize_whitespace(s: string) {\n    return s.trim().replace(/\\s+/g, ' ');\n}\n\nexport function last(x: any[] | string){\n    return x[x.length - 1];\n}\n\nexport function random_choice(choices: any[]) {\n  var index = Math.floor(Math.random() * choices.length);\n  return choices[index];\n}\n\nexport function dedent(strs: TemplateStringsArray, ...args) {\n    // do interpolation\n    let result: string = strs[0];\n    for (let i = 0; i < args.length; i++) {\n        result += args[i] + strs[i + 1];\n    }\n\n    //find the first newline with whitespace after it\n    let pat = /\\n +/;\n    let m = pat.exec(result);\n\n    if (m === null) {\n        return result\n    }\n\n    let replace_pat = new RegExp(m[0], 'g');\n    let result2 = result.replace(replace_pat, '\\n');\n    \n   return result2;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/text_tools.ts","export let keys = {\n    tab: 9,\n    enter: 13,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40\n};\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/keyboard_tools.ts","import * as React from 'react';\n\nimport {Prompt} from './Prompt';\nimport {ParsedText, OutputText} from './Text';\nimport {TypeaheadList} from './TypeaheadList';\nimport {get_indenting_whitespace, ends_with_whitespace} from '../typescript/text_tools';\n\nimport {WorldType, WorldDriver} from \"../typescript/commands\";\n\nimport {MatchValidity} from '../typescript/parser';\n\nimport {is_enabled} from '../typescript/datatypes';\n\nconst Carat = () => (\n  <span>\n    >&nbsp;\n  </span>\n);\n\nexport class Terminal<T extends WorldType<T>> extends React.Component<any, {world_driver: WorldDriver<T>}> {\n  contentContainer: any;\n  prompt: any;\n  typeahead_list: any;\n\n  constructor(props) {\n    super(props);\n    this.state = {world_driver: this.props.world_driver};\n  }\n\n  componentDidMount() {\n    this.focus();\n  }\n\n  componentDidUpdate() {\n    this.focus();\n    this.scrollToPrompt();\n  }\n\n  handleKeys = (event) => {\n    let swallowed_enter = (this.typeahead_list !== null) ? this.typeahead_list.handleKeys(event) : false;\n    if (!swallowed_enter) {\n      this.prompt.handleKeys(event);\n    }  \n  }\n  \n  handleSubmit = () => {\n    if (this.isCurrentlyValid()) {\n      const output = this.state.world_driver.commit();\n      this.setState({world_driver: this.state.world_driver});\n      return true;\n    }\n    return false;\n  }\n\n  isCurrentlyValid = () => {\n    let parser = this.currentParser();\n    return parser.validity === MatchValidity.valid && parser.is_done();\n  }\n\n  handlePromptChange = (input) => {\n    let result = this.state.world_driver.apply_command(input, false);\n    this.setState({world_driver: this.state.world_driver});\n  }\n\n  handleTypeaheadSelection = (option) => {\n    let matched_tokens = this.currentParser().match.slice(0, this.currentTypeaheadIndex() + 1).map((elt) => elt.match);\n    let current_indentation = this.currentIndentation();\n    if (current_indentation === '' && matched_tokens.length > 1) {\n      current_indentation = ' ';\n    }\n    let new_last_token = current_indentation + option;\n    matched_tokens[matched_tokens.length - 1] = new_last_token;\n\n    let new_command = ''.concat(...matched_tokens) + ' ';\n    this.handlePromptChange(new_command);\n    this.prompt.setState({value: new_command});\n  }\n\n  currentParser = () => this.state.world_driver.current_state.parser;\n\n  currentTypeaheadIndex = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = parser.match.length - 1;\n    let last_match = parser.match[typeahead_ind];\n    if (parser.match.length > 1 && last_match.match === '') {\n      typeahead_ind--;\n    }\n\n    return typeahead_ind;\n  }\n\n  currentTypeahead = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = this.currentTypeaheadIndex();\n\n    if (typeahead_ind === -1) {\n      return [];\n    }\n\n    let typeahead = parser.match[typeahead_ind].typeahead;\n    if (typeahead === undefined) {\n      return [];\n    }\n    return typeahead;\n  }\n\n  currentIndentation = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = this.currentTypeaheadIndex();\n\n    if (typeahead_ind === -1) {\n      return '';\n    }\n\n    return get_indenting_whitespace(parser.match[typeahead_ind].match)\n  }\n\n  focus = () => {\n    this.prompt.focus();\n  }\n\n  blur = () => {\n    this.prompt.blur();\n  }\n\n  scrollToPrompt = () => {\n    if ((this.contentContainer.scrollHeight - this.contentContainer.scrollTop) > this.contentContainer.clientHeight) {\n      this.contentContainer.scrollTop = this.contentContainer.scrollHeight;\n\n    }\n  }\n\n  render() {\n    const container_style: any = {\n      height: '100%',\n      width: '100%',\n      overflowY: 'scroll',\n      whiteSpace: 'pre-wrap',\n      fontFamily: \"'Roboto Mono'\", //\"'Fira Mono'\",\n      fontSize: '1em',\n      fontWeight: 'light',\n      color: 'ivory',\n      background: 'black',\n      radius: 3,\n      position: 'absolute',\n      display: 'block',\n      padding: '1em',\n      marginRight: '3em'\n    };\n    return (\n      <div style={container_style} tabIndex={-1} onFocus={this.focus} onBlur={this.blur} onKeyDown={this.handleKeys} ref={cc => this.contentContainer = cc}>\n        {this.state.world_driver.history.map(({parser, message}, i) => {\n          if (i === 0) {\n            return (\n              <div key={i.toString()}>\n                <p>\n                  <OutputText message={message} />\n                </p>\n              </div>\n            );\n          }\n          let hist_elt_style: any = {\n            marginTop: '1em'\n          };\n\n          if (!is_enabled(this.state.world_driver.possible_history[i])) {\n            hist_elt_style.opacity = '0.4';\n          }\n          return (\n            //check if this.state.world_driver.possible_history[i] is disabled\n            <div key={i.toString()} style={hist_elt_style}>\n              \n                <Carat />\n                <ParsedText parser={parser} />\n              \n              <p>\n                <OutputText message={message} />\n              </p>\n            </div>\n          )\n        })}\n\n          <Prompt\n            onSubmit={this.handleSubmit}\n            onChange={this.handlePromptChange}\n            ref={p => this.prompt = p}>\n            <Carat />\n            <ParsedText\n              parser={this.currentParser()}\n              typeaheadIndex={this.currentTypeaheadIndex()}\n            >\n              <TypeaheadList\n                typeahead={this.currentTypeahead()}\n                indentation={this.currentIndentation()}\n                onTypeaheadSelection={this.handleTypeaheadSelection}\n                ref={t => this.typeahead_list = t}\n              />\n            </ParsedText>\n          </Prompt>\n        \n        \n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Terminal.tsx","import {starts_with, tokenize, untokenize, normalize_whitespace, split_tokens} from './text_tools';\n\nimport {\n    Disablable,\n    unwrap,\n    is_enabled,\n    set_enabled,\n    with_disablable\n} from './datatypes';\n\nimport {CommandParser, DisplayEltType, Token} from './parser';\n\nexport interface WorldType<T extends WorldType<T>> {\n    handle_command(parser: CommandParser): CommandResult<T>,\n    interstitial_update?(): InterstitialUpdateResult<T>\n}\n\nexport type InterstitialUpdateResult<T extends WorldType<T>> = {\n    world?: T;\n    message?: string;\n    history_updater?: (history: CommandResult<T>[], world?: T) => Disablable<CommandResult<T>>[];\n} | undefined;\n\nexport type CommandResult<T extends WorldType<T>> = {\n    world?: T;\n    message?: string;\n    parser?: CommandParser;\n    history_updater?: (history: CommandResult<T>[], world?: T) => Disablable<CommandResult<T>>[];\n} | undefined;\n\nexport interface Command<T extends WorldType<T>> {\n    command_name: Token[];\n    execute: (world: T, parser: CommandParser) => CommandResult<T>;\n}\n\nexport function apply_command<T extends WorldType<T>> (world: T, cmd: string) {\n    let parser = new CommandParser(cmd);\n\n    let result: CommandResult<T> = {parser: parser, world: world};\n    let cmd_result = world.handle_command(parser)\n    \n    if (cmd_result !== undefined) {\n        if (cmd_result.world !== undefined) {\n            result.world = cmd_result.world;\n        }\n        if (cmd_result.message !== undefined) {\n            result.message = cmd_result.message;\n        }\n        if (cmd_result.history_updater !== undefined) {\n            result.history_updater = cmd_result.history_updater;\n        }\n    }\n\n    result = apply_interstitial_update(result);\n    \n    return result;\n}\n\nfunction apply_interstitial_update<T extends WorldType<T>>(result: CommandResult<T>): CommandResult<T> {\n    if (result.world.interstitial_update !== undefined) {\n        //confusing, but we are running pre_command for the *next* command, not the one that just ran\n        let res2 = result.world.interstitial_update();\n        if (res2 !== undefined) {\n            if (res2.world !== undefined) {\n                result.world = res2.world;\n            }\n            if (res2.message !== undefined) {\n                if (result.message !== undefined){\n                    result.message += '\\n\\n' + res2.message;\n                } else {\n                    result.message = res2.message;\n                }\n            }\n            if (res2.history_updater !== undefined) {\n                result.history_updater = res2.history_updater;\n            }\n        }\n    }\n    return result;\n}\n\nfunction apply_history_update<T extends WorldType<T>>(history: CommandResult<T>[], result: CommandResult<T>): Disablable<CommandResult<T>>[] {\n    if (result.history_updater === undefined) {\n        return [...history, result];\n    } else {\n        return result.history_updater(history, result.world);\n    }\n}\n\nexport class WorldDriver<T extends WorldType<T>> {\n    previous_histories: CommandResult<T>[][] = [];\n\n    history: CommandResult<T>[];\n\n    possible_history: Disablable<CommandResult<T>>[];\n    current_state: CommandResult<T>;\n\n    constructor (initial_world: T) {\n        let initial_result: CommandResult<T> = {world: initial_world};\n        initial_result = apply_interstitial_update(initial_result);\n        this.history = [initial_result];\n \n        this.apply_command('', false); //populate this.current_state\n    }\n\n    apply_command(cmd: string, commit: boolean = true) {\n        let prev_state = this.history[this.history.length - 1];\n        let result = apply_command(prev_state.world, cmd);\n         \n        this.current_state = result;\n        this.possible_history = apply_history_update(this.history, this.current_state);\n        if (commit) {\n            this.commit();\n        }\n        return result;\n    }\n\n    commit() {\n        //save previous history for posterity\n        this.previous_histories.push(this.history);\n\n        //filter out any disabled history\n        this.history = this.possible_history.filter(is_enabled).map(unwrap);\n\n        this.apply_command('', false);\n        return this.current_state;\n    }\n}\n\n// eager dispatch\n\ntype WorldWithEagerDispatch<T extends WorldType<T>> = WorldType<T> & {\n    get_commands(): Disablable<Command<T>>[],\n}\n\nexport function eager_dispatch<T extends WorldWithEagerDispatch<T>>(world: T, parser: CommandParser) {\n    let commands = world.get_commands();\n    let options = commands.map((cmd) => with_disablable(cmd, (c) => c.command_name));\n    \n    let cmd_name = parser.consume_option(options, 'command', DisplayEltType.keyword);\n    let result: CommandResult<T> = {parser: parser, world: world};\n\n    if (!cmd_name) {\n        return result;\n    }\n\n    let command = unwrap(commands[commands.findIndex((cmd) => (\n        cmd_name === untokenize(unwrap(cmd).command_name)))]);\n\n    let cmd_result = command.execute(world, parser);\n\n    return cmd_result\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/commands.ts","import {\n    CommandResult,\n    Command,\n    WorldType\n} from '../commands'\n\nimport {\n    Token,\n    CommandParser,\n    with_early_stopping,\n    consume_option_stepwise_eager\n} from '../parser'\n\nimport {\n    FuckDict,\n    Disablable,\n    set_enabled,\n    unwrap,\n    with_disablable,\n    Point2,\n    Matrix2,\n    arrays_fuck_equal,\n    zeros\n} from '../datatypes';\n\nimport {capitalize, tokenize, split_tokens, untokenize, random_choice, dedent} from '../text_tools';\n\nimport {CutsceneData, Cutscene, build_cutscene} from '../cutscenes';\n\ntype ObserverMomentID = string;\n\ntype ObserverMoment = {\n    id: ObserverMomentID,\n    message: string,\n    transitions: [string[], ObserverMomentID][]\n};\n\nfunction index_oms(oms: ObserverMoment[]): FuckDict<ObserverMomentID, ObserverMoment>{\n    let result = new FuckDict<ObserverMomentID, ObserverMoment>();\n\n    for (let om of oms){\n        result.set(om.id, om);\n    }\n\n    //second pass, typecheck em\n\n    return result;\n}\n\nlet tower_oms = index_oms([\n    {\n        id: 'base, from path',\n        message: dedent`<i>(Welcome to the demo! This game doesn't have a proper name yet.)</i>\n\n        The viewing tower sits twenty feet inset from the footpath, towards the Mystic River. The grass leading out to it is brown with wear.`,\n        transitions: [\n            [['approach', 'the viewing tower'], 'base, regarding tower']]\n    },\n    {\n        id: 'base, regarding tower',\n        message: dedent`The viewing tower stands tall and straight. Its construction is one of basic, stable order. A square grid of thick wooden columns rooted deep within the ground rises up before you; the foundation of the tower.\n\n            A wooden stairway set between the first two rows of columns leads upward.`,\n        transitions: [\n            [['climb', 'the stairs'], 'stairs 1, ascending']]\n    },\n    {\n        id: 'stairs 1, ascending',\n        message: dedent`As you ascend, the ground below you recedes.\n\n            You rifle through your notes to another of Katya’s meditations, this one on Vantage Points:\n\n            <i>\"We wander, for the most part, within a tangled, looping mess of thought; a ball of lint.\"</i>\n\n            The stairway terminates at a flat wooden platform leading around a corner to the left, along the next edge of the tower.`,\n        transitions: [\n            [['turn', 'left', 'and proceed along the platform'], 'platform 1, ascending'],\n            [['turn', 'around', 'and descend the stairs'], 'base, regarding tower']]\n    },\n    {\n        id: 'platform 1, ascending',\n        message: dedent`You catch glimpses of the grass, trees, and the Mystic River as you make your way across.\n\n            You continue reading:\n\n            <i>\"From within the tangle, we feel lost. It is only when we find a vantage outside of the central tangle, looking over it, that we might sort out the mess in our minds.\"</i>\n\n            The platform terminates, and another wooden stairway to the left leads further up the tower.`,\n        transitions: [\n            [['turn', 'left', 'and climb the stairs'], 'stairs 2, ascending'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 1, ascending']]\n    },\n    {\n        id: 'stairs 2, ascending',\n        message: dedent`They feel solid under your feet, dull thuds sounding with each step.\n\n            <i>\"It can feel like a deliverance when one reaches such a vantage after much aimless wandering.\"</i>\n\n            The stairs terminate in another left-branching platform.`,\n        transitions: [\n            [['turn', 'left', 'and proceed along the platform'], 'platform 2, ascending'],\n            [['turn', 'around', 'and descend the stairs'], 'platform 1, ascending']]\n    },\n    {\n        id: 'platform 2, ascending',\n        message: dedent`You make your way across the weathered wood.\n\n            <i>\"The twisting fibres of our journey are put into perspective. We see how one piece of the path relates to another. It is peaceful from up there.\"</i>\n\n            A final wooden stairway to the left leads up to the top of the tower.`,\n        transitions: [\n            [['turn', 'left', 'and climb the stairs'], 'top, arriving'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 2, ascending']]\n    },\n    {\n        id: 'top, arriving',\n        message: dedent`You reach the top. A grand visage of the Mystic River and Macdonald Park extends before you in all directions.`,\n        transitions: [\n            [['survey', 'the area'], 'top, surveying'],\n            [['descend', 'the stairs'], 'platform 2, ascending']]\n    },\n    {\n        id: 'top, surveying',\n        message: dedent`You survey the looping fibres of path around the park, the two wooden bridges at either end, and the frozen river carving your vantage in two.\n\n            You see the path you took to reach this viewing tower. You see it continue further onward, into MacDonald Park, and branch, curving into the brush by the river.\n\n            You see the wooden footbridge crossing the river that you are destined to walk across, if you are ever to return to your study, and transcribe your experiences.\n\n            <i>\"But do not be fooled; all there is to do, once one has stood above the tangle for a while, and surveyed it, is to return to it.\"</i>`,\n        transitions: [\n            [['descend', 'the stairs'], 'stairs 2, descending']]\n    },\n    {\n        id: 'stairs 3, descending',\n        message: dedent`Your view of the surrounding park and river is once again obscured by the weathered wood of the viewing tower, rising up around you.\n\n            <i>\"Do not fret, my dear. Return to the madness of life after your brief respite.\"</i>`,\n        transitions: [\n            [['turn', 'right', 'and proceed along the platform'], 'platform 2, descending'],\n            [['turn', 'around', 'and ascend the stairs'], 'top, surveying']]\n    },\n    {\n        id: 'platform 2, descending',\n        message: dedent`The wooden beams of the viewing tower seem more like a maze now than an orderly construction. They branch off of each other and reconnect at odd angles.\n\n            <i>\"Expect to forget; to be turned around; to become tangled up.\"</i>`,\n        transitions: [\n            [['turn', 'right', 'and descend the stairs'], 'stairs 2, descending'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 3, descending']]\n    },\n    {\n        id: 'stairs 2, descending',\n        message: dedent`The light of the sun pokes through odd gaps in the tangles of wood, making you squint at irregular intervals.\n\n            <i>\"Find some joy in it; some exhilaration.\"</i>`,\n        transitions: [\n            [['turn', 'right', 'and proceed along the platform'], 'platform 1, descending'],\n            [['turn', 'around', 'and ascend the stairs'], 'platform 2, descending']]\n    },\n    {\n        id: 'platform 1, descending',\n        message: dedent`You know where you must go from here, roughly. The footpath will branch into thick brush up ahead. And a ways beyond that brush, a wooden footbridge.\n\n            <i>\"And know that you have changed, dear. That your ascent has taught you something.\"</i>`,\n        transitions: [\n            [['turn', 'right', 'and descend the stairs'], 'base, regarding path'],\n            [['turn', 'around', 'and proceed along the platform'], 'stairs 2, descending']]\n    },\n    {\n        id: 'base, regarding path',\n        message: dedent`What lies within the brush you know you will enter, but which you can no longer see from this low vantage? What will it be like to walk across the footbridge?\n\n            <i>(End of demo. Thanks for playing!)</i>`,\n        transitions: []\n    }\n]);\n\nfunction transitions_to_commands(transitions: [string, ObserverMomentID][]): Command<VenienceWorld>[] {\n    return transitions.map(([cmd, next_om_id]) => ({\n        command_name: split_tokens(cmd),\n        execute: with_early_stopping(function*(world: VenienceWorld, parser: CommandParser){\n            yield parser.done();\n\n            return {\n                world: world.update({\n                    current_om: next_om_id\n                })\n            }\n        })\n    }));\n} \n\n//instead of homes, boxes\n\n// Charlotte\n// Southern rural culture\n// Pacifier, baby's clothes, blanket\n// Medical writeup, printed out\n\n// Ben\n// New england mist, trees\n// All notes\n// Musical score of numbers\n\n// Danielle\n// Coffee mug\n// \n\ntype VenienceWorldState = {\n    current_om?: ObserverMomentID,\n    has_seen?: FuckDict<ObserverMomentID, boolean>,\n}\n\nexport class VenienceWorld implements WorldType<VenienceWorld>{\n    readonly current_om: ObserverMomentID;\n    readonly has_seen: FuckDict<ObserverMomentID, boolean>;\n    \n    constructor({current_om, has_seen}: VenienceWorldState) {\n        if (current_om === undefined) {\n            current_om = 'base, from path';\n        }\n        if (has_seen === undefined) {\n            has_seen = new FuckDict<ObserverMomentID, boolean>();\n        }\n\n        this.current_om = current_om;\n        this.has_seen = has_seen;\n    }\n\n    update({current_om, has_seen}: VenienceWorldState) {\n        if (current_om === undefined) {\n            current_om = this.current_om;\n        }\n        if (has_seen === undefined) {\n            has_seen = this.has_seen;\n        }\n\n        return new VenienceWorld({current_om, has_seen});\n    }\n\n    handle_command(parser: CommandParser) {\n        let world = this;\n        return with_early_stopping(function*(parser: CommandParser) {\n            let om = tower_oms.get(world.current_om);\n\n            let cmd_options = om.transitions.map(([cmd, om_id]) => cmd) //split_tokens(cmd))\n\n            if (cmd_options.length === 0) {\n                yield parser.done();\n                return;\n            }\n\n            let cmd_choice = yield* consume_option_stepwise_eager(parser, cmd_options);\n\n            yield parser.done();\n\n            let om_id_choice = world.current_om;\n            om.transitions.forEach(([cmd, om_id]) => {\n                if (cmd_choice === untokenize(cmd)) {\n                    om_id_choice = om_id;\n                }\n            });\n\n            return {world: world.update({\n                        current_om: om_id_choice\n                    })};\n        })(parser);\n    }\n\n    interstitial_update() {\n        let result: CommandResult<VenienceWorld> = {};\n        let world_update: VenienceWorldState = {};\n\n        let message_parts: string[] = [];\n\n        let om_descr = tower_oms.get(this.current_om).message;\n\n        message_parts.push(om_descr);\n\n        if (!this.has_seen.get(this.current_om)) {\n            let new_has_seen = this.has_seen.copy();\n            new_has_seen.set(this.current_om, true);\n            world_update.has_seen = new_has_seen;\n        } else {\n            //historoony\n            let world = this;\n            function update_history(history: CommandResult<VenienceWorld>[]): Disablable<CommandResult<VenienceWorld>>[] {\n                let new_history = history.map((x) => set_enabled(x, true));\n\n                let pos;\n                for (pos = history.length - 1; pos >= 0; pos--) {\n                    if (history[pos].world.current_om == world.current_om) {\n                        break;\n                    } else {\n                        new_history[pos] = set_enabled(new_history[pos], false);\n                    }\n                }\n\n                new_history[pos] = with_disablable(new_history[pos], (res) => {\n                    let new_res = {...res}; //copy it so we aren't updating the original history entry\n                    return new_res;\n                })\n\n                return new_history;\n            }\n            return {history_updater: update_history};\n        }\n\n        if (message_parts.length > 0) {\n            result.message = message_parts.join('\\n\\n');\n        }\n\n        if (Object.keys(world_update).length > 0){\n            result.world = this.update(world_update);\n        }\n\n        return result;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/venience/venience_world.ts","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 8\n// module chunks = 0","import * as React from 'react';\nimport {keys} from '../typescript/keyboard_tools';\n\nconst InputWrapper = (props) => {\n  const {children, ...rest} = props;\n  const style: any = {\n    position: 'relative',\n    minHeight: '8em',\n    marginTop: '1em'\n  };\n  return (\n    <div style={style} {...rest} >\n      {children}\n    </div>\n  );\n}\n\nconst InputDisplay = (props) => {\n  const {children} = props;\n  const style = {\n    wordWrap: 'break-word',\n    \n  };\n\n  return (\n    <span style={style}>\n      {children}\n    </span>\n  );\n}\n\nconst Cursor = ({onClick}) => {\n  let style: any = {\n    position: 'absolute'\n  };\n  return (\n    <span className=\"blinking-cursor\" style={style} onClick={onClick}>\n      {String.fromCharCode(9608)}\n    </span>\n  );\n};\n\nexport class Prompt extends React.Component<any, any> {\n  input: any;\n\n  state = { value: '', is_focused: false };\n\n  handleSubmit = () => {\n    let success = this.props.onSubmit();\n    if (success) {\n      this.setState({value: ''});\n    } \n  }\n\n  // when key down is called by auto complete see if we should just submit\n  handleKeys = ({keyCode}) => {\n    if (keyCode === keys.enter) {\n      this.handleSubmit();\n    }\n    this.setCursor(this.input, this.input.value.length);\n  }\n\n  handleChange = () => {\n    const value = this.input.value;\n    this.props.onChange(value)\n    this.setState({value: value});\n  }\n\n  focus = () => {\n    this.input.focus();\n    this.setState({is_focused: true});\n  }\n\n  blur = () => {\n    this.setState({is_focused: false});\n  }\n\n  setCursor = (node,pos) => {\n      node = (typeof node === \"string\") ? document.getElementById(node) : node;\n\n      if(!node){\n          return false;\n      }else if(node.createTextRange){\n          var textRange = node.createTextRange();\n          textRange.collapse(true);\n          textRange.moveEnd(pos);\n          textRange.moveStart(pos);\n          textRange.select();\n          return true;\n      }else if(node.setSelectionRange){\n          node.setSelectionRange(pos,pos);\n          return true;\n      }\n\n      return false;\n  }\n\n  render() {\n    const input_style: any = {\n      position: 'absolute',\n      left: '-16px',\n      top: 0,\n      width: 0,\n      height: 0,\n      background: 'transparent',\n      border: 'none',\n      color: 'transparent',\n      outline: 'none',\n      padding: 0,\n      resize: 'none',\n      zIndex: -1,\n      overflow: 'hidden'\n    };\n    return (\n        <InputWrapper onClick={() => this.focus()}>\n            <input onChange={this.handleChange} value={this.state.value} style={input_style} ref={i => this.input = i} />\n            <InputDisplay>\n              {this.props.children}\n              {  \n                this.state.is_focused ?\n                  ( <Cursor onClick={() => this.handleSubmit()} /> ) :\n                  ''\n              }\n            </InputDisplay>\n        </InputWrapper>\n    );\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Prompt.tsx","import * as React from 'react';\n\nimport {DisplayEltType, MatchValidity} from '../typescript/parser';\n\nimport {get_indenting_whitespace} from '../typescript/text_tools';\n\nfunction get_display_color(det: DisplayEltType) {\n  switch (det) {\n    case DisplayEltType.keyword:\n      return 'aqua';\n    case DisplayEltType.option:\n      return 'orange';\n    case DisplayEltType.filler:\n      return 'ivory';\n    case DisplayEltType.partial:\n      return 'silver';\n    case DisplayEltType.error:\n      return 'red';\n  }\n}\n\nexport const ParsedText = (props) => {\n  let {parser, typeaheadIndex, children} = props;\n\n  let style: any = {\n    display: 'inline-block',\n    whiteSpace: 'pre-wrap',\n    position: 'relative'\n  }\n  let validity = parser.validity;\n  if (validity === MatchValidity.valid) {\n    style.fontWeight = '900';\n    style.fontStyle = 'italic'\n  } else {\n    style.fontWeight = '100';\n    if (validity === MatchValidity.invalid) {\n      style.opacity = '0.6';\n    }\n  }\n\n  const elt_style: any = {\n    display: 'inline-block'\n  }\n\n  const span_style: any = {\n    display: 'inline-block'\n  }\n\n  return (\n    <div style={style}>\n      {(parser === undefined) ? '' : \n        parser.match.map((elt, i) => (\n          <div key={i.toString()} style={{...elt_style, ...{color: get_display_color(elt.display)}}}>\n            <span style={span_style}>\n              {elt.match + ( i === parser.match.length - 1  ? parser.tail_padding : '' ) }\n            </span>\n            { ( i === typeaheadIndex ) ? children : '' }\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nexport const OutputText = (props) => {\n  const {message} = props;\n  const style = {\n    display: 'inline-block',\n    whiteSpace: 'pre-wrap'\n  }\n\n  return (\n    <div style={style} dangerouslySetInnerHTML={{__html: message}} />\n  );\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Text.tsx","import * as React from 'react';\n\nimport {keys} from '../typescript/keyboard_tools';\nimport {is_enabled, unwrap} from '../typescript/datatypes';\n\nexport class TypeaheadList extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.state = {selection_index: -1};\n  }\n\n  componentDidUpdate() {\n    if (this.state.selection_index >= this.props.typeahead.length) {\n      this.setState({selection_index: this.props.typeahead.length - 1});\n    }\n  }\n\n  handleClick(option) {\n    this.props.onTypeaheadSelection(option);\n  }\n\n  handleMouseOver(index) {\n    this.setState({selection_index: index});\n  }\n\n  handleKeys(event) {\n    let swallowed_enter = false;\n    \n    top: switch (event.keyCode) {\n      case keys.enter:\n        if (this.state.selection_index === -1) {\n          break;\n        }\n        swallowed_enter = true;\n      case keys.tab:\n        event.preventDefault();\n      case keys.right:      \n        if (this.props.typeahead.length === 0) {\n          break;\n        }\n        let selected = (this.state.selection_index === -1) ?\n          this.props.typeahead[0] :\n          this.props.typeahead[this.state.selection_index];\n\n        if (is_enabled(selected)) {\n          this.props.onTypeaheadSelection(unwrap(selected));\n        }\n        break;\n      \n      case keys.up:\n      case keys.down:\n        let new_selection_index;\n        switch (event.keyCode) {\n          case keys.up:\n            if (this.state.selection_index === -1) {\n              break top;\n            }\n            new_selection_index = this.state.selection_index - 1;\n            break;\n          case keys.down:\n            if (this.state.selection_index === this.props.typeahead.length - 1) {\n              break top;\n            }\n            new_selection_index = this.state.selection_index + 1;\n            break;  \n        }\n        this.setState({selection_index: new_selection_index});\n        break;\n    }\n\n    return swallowed_enter;\n  }\n\n  render() {\n    const {typeahead, indentation} = this.props;\n    const style: any = {\n      position: \"absolute\",\n      listStyleType: \"none\",\n      padding: 0,\n      margin: 0,\n      whiteSpace: 'pre',\n      color: 'silver'\n    };\n    return (\n      <ul style={style}>\n        {typeahead.map((option, i) => (\n          <li\n            key={i.toString()} \n            onMouseOver={() => this.handleMouseOver(i)}\n            style={{\n              marginTop: '1em',\n              background: i === this.state.selection_index ? 'DimGray' : 'inherit',\n              opacity: is_enabled(option) ? 1.0 : 0.4\n            }}\n            {...(\n              is_enabled(option)\n                ? {onClick: () => this.handleClick(unwrap(option))}\n                : {}\n            )}\n          >\n            <span>{indentation}</span>\n            <span>{unwrap(option)}</span>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/TypeaheadList.tsx","import * as React from \"react\";\nimport * as ReactDom from \"react-dom\";\n\nimport {Terminal} from \"../components/Terminal\";\n\nimport {WorldDriver} from \"../typescript/commands\";\n\n//import {BirdWorld} from '../typescript/bird_world';\nimport {VenienceWorld} from '../typescript/venience/venience_world';\n\nlet world_driver = new WorldDriver(new VenienceWorld({}))\n\nReactDom.render(<Terminal world_driver={world_driver} />, document.getElementById('terminal'));\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/main.tsx"],"sourceRoot":""}