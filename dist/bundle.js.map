{"version":3,"sources":["webpack:///webpack/bootstrap ec7663a4b1e97a50a52b","webpack:///external \"React\"","webpack:///./src/typescript/datatypes.ts","webpack:///./src/typescript/parser.ts","webpack:///./src/typescript/text_tools.ts","webpack:///./src/typescript/venience/venience_world.ts","webpack:///./src/typescript/commands.ts","webpack:///external \"ReactDOM\"","webpack:///./src/components/Text.tsx","webpack:///./src/typescript/keyboard_tools.ts","webpack:///./src/components/Terminal.tsx","webpack:///./src/components/History.tsx","webpack:///./src/components/Preface.tsx","webpack:///./src/components/Prompt.tsx","webpack:///./src/components/TypeaheadList.tsx","webpack:///./src/typescript/main.tsx","webpack:///./src/typescript/venience/chapters/00_prologue.ts","webpack:///./src/typescript/venience/chapters/01_chapter_1.ts","webpack:///./src/typescript/venience/observer_moments.ts"],"names":[],"mappings":"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,4BAiBC;AAEmB;AACN;AACD;AAEwB;AAC7B;AACyB;AACiE;AAC3E;AACyE;AACpC;AACnC;AACmD;AACnE;AACD;AAC+B;AACqM;AACjN;AAC+D;AACjE;AACuC;AACvD;AACD;AAC6B;AACkC;AAC5C;AACc;AACqE;AAC/E;AAC8E;AAC7E;AACX;AACoH;AAChH;AACoE;AACN;AAC9E;AACD;AAC+B;AAC6E;AACzF;AACc;AACL;AACT;AAC2J;AAC3J;AACN;AACwF;AACpF;AACwD;AACY;AACpF;AACD;AAC6B;AAC0D;AACpE;AACc;AACoE;AAClF;AACN;AACoD;AAChD;AACoE;AACN;AAC9E;AACD;AAC+B;AACgC;AAC5C;AACc;AACuH;AACrI;AACN;AACiE;AAC7D;AACkD;AACkB;AACpF;AACD;AACuB;AAC4G;AAClH;AACiC;AACU;AAC3D;AACD;AACwB;AACyI;AAC9I;AACoJ;AACpJ;AACoJ;AACpJ;AACc;AACuG;AACzH;AACE;AAC0C;AAC1D;AACD;AAC8B;AACyH;AACpI;AACc;AACqD;AACvE;AACE;AACsE;AAChB;AACtE;AACD;AACgC;AAC2I;AAC1I;AACd;AACkD;AACtD;AACE;AAC4D;AACS;AACrF;AACD;AAC8B;AACkG;AAC/F;AACd;AAC6B;AACjC;AACE;AACsE;AACR;AAC9E;AACD;AACgC;AACwI;AACvI;AACd;AACsE;AAC1E;AACE;AAC4D;AACS;AACrF;AACD;AAC8B;AACmJ;AAC9J;AAC+B;AAChC;AAClB;AACF,M","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ec7663a4b1e97a50a52b","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 0\n// module chunks = 0","export class FuckDict<K, V> {\n    readonly keys_map: Map<string, K>;\n    readonly values_map: Map<string, V>;\n\n    size: number = 0\n\n    constructor(a?: [K, V][]) {\n        this.keys_map = new Map<string, K>();\n        this.values_map = new Map<string, V>();\n\n        if (a !== undefined) {\n            for (let [k, v] of a) {\n                this.set(k, v);\n            }\n        }\n    }\n\n    set(k: K, v: V) {\n        let s = k.toString();\n        this.keys_map.set(s, k);\n        this.values_map.set(s, v);\n        this.size = this.keys_map.size;\n        return this;\n    }\n\n    get(k: K, default_value?: V): V {\n        if (!this.has_key(k) && default_value !== undefined) {\n            this.set(k, default_value);\n            return default_value;\n        }\n        let s = k.toString();\n        return this.values_map.get(s);\n    }\n\n    update(a: [K, V][]): FuckDict<K, V> {\n        let updated = this.copy();\n        for (let [k, v] of a) {\n            updated.set(k, v);\n        }\n        return updated;\n    }\n\n    has_key(k: K) {\n        return this.keys_map.has(k.toString());\n    }\n\n    keys_array() {\n        return Array.from(this.keys_map.values());\n    }\n\n    values_array() {\n        return Array.from(this.values_map.values());\n    }\n\n    entries_array(): [K, V][] {\n        let result: [K, V][] = [];\n        for (let [s, k] of this.keys_map.entries()) {\n            result.push([k, this.values_map.get(s)]);\n        }\n        return result;\n    }\n\n    keys_equal(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n\n        for (let elem of other.keys_array()) {\n            if (!this.has_key(elem)){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    keys_intersect(other: FuckDict<K, V>) {\n        let result: K[] = [];\n        for (let k of this.keys_array()) {\n            if (other.has_key(k)) {\n                result.push(k)\n            }\n        }\n        return result;\n    }\n\n    keys_subset(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    toString() {\n        let entry_strings: string[] = this.entries_array().map((x) => x.toString()).sort();\n\n        return `FuckDict<${entry_strings.join(',')}>`;\n    }\n\n    copy() {\n        return new FuckDict(this.entries_array());\n    }\n}\n\nexport type FuckSet<T> = FuckDict<T, undefined>;\n\nexport function chain_object<T extends object>(src: T) {\n    return new Proxy<T>(src, {\n        get: function (target, key) {\n            if (target[key] === undefined) {\n                target[key] = {};\n            }\n            let v = target[key];\n            if (typeof v === 'object' && !(v instanceof Array)) {\n                return chain_object(v);\n            } else {\n                return v;    \n            }  \n        }    \n    });\n} \n\nexport function chain_update(target: Object, source: Object, replace_keys: string[]=[], inplace=false) {\n    let updated: Object;\n    if (inplace) {\n        updated = target || {};\n    } else {\n        updated = {...target};\n    }\n\n    for (let [n, v] of Object.entries(source)) {\n        if (!replace_keys.includes(n) && typeof v === 'object' && !(v instanceof Array)) {\n            updated[n] = chain_update(updated[n], v, replace_keys, inplace);\n        } else {\n            updated[n] = v;\n        }\n    }\n    return updated;\n}\n\nexport function arrays_fuck_equal<T>(ar1: T[], ar2: T[]) {\n    if (ar1.length !== ar2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < ar1.length; i++) {\n        if (ar1[i].toString() !== ar2[i].toString()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function array_fuck_contains<T>(ar: T[], elt: T){\n    return ar.some((x) => x.toString() === elt.toString())\n}\n\nexport type Point2 = [number, number];\n\nexport function make_matrix2(data_obj: number[][]) {\n    let dim_y = data_obj.length;\n    let dim_x = data_obj[0].length;\n\n    let data = new Int16Array(data_obj.reduce((x, y) => x.concat(y)));\n    // TODO complain if the total length is wrong\n    return new Matrix2(data, dim_x, dim_y);\n}\n\nexport function zeros(dim_x: number, dim_y: number) {\n    return new Matrix2(new Int16Array(dim_x * dim_y), dim_x, dim_y);\n}\n\nexport class Matrix2 {\n    readonly dim_x: number;\n    readonly dim_y: number;\n    readonly data: Int16Array;\n    \n    constructor (data: Int16Array, dim_x: number, dim_y: number) {\n        this.data = data;\n        this.dim_x = dim_x;\n        this.dim_y = dim_y;\n    }\n\n    get(x: number, y: number): number {\n        return this.data[y * this.dim_x + x];\n    }\n\n    set(x: number, y: number, value: number) {\n        this.data[y * this.dim_x + x] = value;\n    }\n\n    rotate(degrees: number): Matrix2 {\n        //validate input better\n\n        if (degrees == 360 || degrees == 0) {\n            return this;\n        }\n\n        const n_rotations = degrees / 90;\n        let m: Matrix2 = this;\n        const dim_x = this.dim_x;\n        const dim_y = this.dim_y;\n        for (let i = 0; i < n_rotations; i++){\n            let new_data = new Int16Array(dim_x * dim_y);\n            let new_mat2 = new Matrix2(new_data, dim_y, dim_x);\n            for (let y = 0; y < dim_y; y++){\n                for (let x = 0; x < dim_x; x++){\n                    new_mat2.set(dim_y - 1 - y, x, m.get(x, y));\n                }\n            }\n            m = new_mat2;\n        }\n        return m\n    }\n\n    contains(value: number): boolean{\n        return this.data.indexOf(value) !== -1;\n    }\n\n    copy(): Matrix2 {\n        return new Matrix2(this.data.slice(), this.dim_x, this.dim_y);\n    }\n}\n\n\nexport type Counter<T> = Map<T, number>;\n\nexport function counter_add<T>(counter: Counter<T>, key: T, inc: number){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return counter.set(key, cur_val + inc);\n}\n\nexport function counter_get<T>(counter: Counter<T>, key: T){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return cur_val;\n}\n\nexport function counter_update<T>(counter1: Counter<T>, counter2: Counter<T>){\n    counter2.forEach(function (v, k){\n        counter_add(counter1, k, v);\n    });\n\n    return counter1;\n}\n\nexport function counter_order<T>(counter: Counter<T>, include_zero=false){\n    let result = Array.from(counter.entries()).sort((a, b) => a[1] - b[1]);\n    if (!include_zero) {\n        result = result.filter(([t, i]) => i > 0);\n    }\n    return result.map(([t, i]) => t);\n}\n\n// export type Disablable<T> = T | DWrapped<T>;\n// export type DWrapped<T> = {value: T, disablable: true, enabled: boolean}\n\n// export function is_dwrapped<T>(x: Disablable<T>): x is DWrapped<T>{\n//     return (<DWrapped<T>>x).disablable !== undefined;\n// }\n\n// export function set_enabled<T>(x: Disablable<T>, enabled: boolean=true): Disablable<T>{\n//     if (is_dwrapped(x)) {\n//         if (x.enabled !== enabled) {\n//             x.enabled = enabled; //could do check here for enabled being set properly already\n//         }\n//         return x;\n//     } else {\n//         let result: DWrapped<T> = {value: x, disablable: true, enabled};\n        \n//         return result;\n//     }\n// }\n\n// export function unwrap<T>(x: Disablable<T>): T {\n//     if (is_dwrapped(x)) {\n//         return x.value;\n//     } else {\n//         return x;\n//     }\n// }\n\n// export function with_disablable<T1, T2>(x: Disablable<T1>, f: (t1: T1) => Disablable<T2>): Disablable<T2> {\n//     return set_enabled(unwrap(f(unwrap(x))), is_enabled(x));\n// }\n\n// export function is_enabled<T>(x: Disablable<T>): boolean {\n//     if (is_dwrapped(x)){\n//         return x.enabled;\n//     } else {\n//         return true;\n//     }\n// }\n\nexport type Annotatable<T, AT> = T | Annotated<T, AT>;\nexport type Annotated<T, AT> = {value: T, annotated: true, annotation: Partial<AT>};\n\n//export type _MergeAnnotations<T, A1 extends Annotatable<T, AT1>,  AT1, AT2> = Annotatable<T, AT1 & AT2>\n//export type MergeAnnotations<T, > = \n\nexport function is_annotated<T, AT>(x: Annotatable<T, AT>): x is Annotated<T, AT>{\n    if (x === undefined) {\n        return false;\n    }\n    return (<Annotated<T, AT>>x).annotated !== undefined;\n}\n\nexport function annotate<T, AT>(x: Annotatable<T, AT>, annotation?: Partial<AT>): Annotated<T, AT>{\n    if (annotation === undefined) {\n        annotation = {};\n    }\n    if (is_annotated(x)) {\n        Object.assign(x.annotation, annotation);\n        return x;\n    } else {\n        let result: Annotated<T, AT> = {value: x, annotated: true, annotation};\n        \n        return result;\n    }\n}\n\nexport function unwrap<T, AT>(x: Annotatable<T, AT>): T {\n    if (is_annotated(x)) {\n        return x.value;\n    } else {\n        return x;\n    }\n}\n\nexport function with_annotatable<T1, T2, TA>(f: (t1: T1) => T2, default_value?: TA): (x: Annotatable<T1, TA>) => Annotatable<T2, TA> {\n    return (x: Annotatable<T1, TA>) => annotate(unwrap(f(unwrap(x))), get_annotation(x, default_value));\n}\n\nexport function get_annotation<T, TA>(x: Annotatable<T, TA>, default_value?: TA): Partial<TA> {\n    if (is_annotated(x)){\n        if (default_value !== undefined) {\n            return {...<any>default_value, ...<any>x.annotation};\n        } else {\n            return x.annotation;\n        }\n        \n    } else {\n        return default_value;\n    }\n}\n\nexport type ADisablable = {enabled: boolean};\nexport type Disablable<T> = Annotatable<T, ADisablable>;\n\nexport function set_enabled<T>(x: Disablable<T>, enabled: boolean=true){\n    return annotate(x, {enabled});\n}\n\nexport function with_disablable<T1, T2>(f: (t1: T1) => T2): (x: Disablable<T1>) => Disablable<T2> {\n    return with_annotatable(f, {enabled: true});\n}\n\nexport function is_enabled<T>(x: Disablable<T>): boolean {\n    let result = get_annotation(x);\n    if (result === undefined) {\n        return true;\n    }\n\n    return result.enabled;\n}\n\n\nexport type Numbered<T> = Annotatable<T, number>\n\n\nconst enum _StringValidity {\n    valid\n}\n\nexport type StringValidity = _StringValidity | string;\n\nexport class StringValidator {\n    static validate<V extends StringValidator>(s: string): s is ValidString<V> {\n        return new this().is_valid(s);\n    }\n\n    is_valid(s: ValidatedString<this>): s is ValidString<this> {\n        return false;\n    }\n}\n\nexport type ValidatedString<V extends StringValidator> = string & StringValidity;\nexport type ValidString<V extends StringValidator> = string & _StringValidity.valid;\n\n\n// Holy dang this is cool:\n// https://stackoverflow.com/questions/46445115/derive-a-type-a-from-a-list-of-strings-a\n//\n// Point here is to define the list of ObserverMomentIDs and PerceptionIDs\n// as a constant, and get string literal typechecking elsewhere in the code.\nexport function infer_literal_array<T extends string>(...arr: T[]): T[] {\n  return arr;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/datatypes.ts","import {starts_with, tokenize, untokenize, normalize_whitespace, split_tokens} from './text_tools';\n\nimport {\n    Annotatable,\n    Annotated,\n    annotate,\n    is_annotated,\n    with_annotatable,\n    get_annotation,\n    ADisablable,\n    Disablable,\n    unwrap,\n    is_enabled,\n    set_enabled,\n    with_disablable,\n    array_fuck_contains,\n    StringValidator,\n    ValidatedString,\n    ValidString\n} from './datatypes';\n\n\nexport type Token = string;\n\nexport enum DisplayEltType {\n    keyword = 0,\n    option = 1,\n    filler = 2,\n    partial = 3,\n    error = 4\n}\n\nexport type ADisplayable = {display: DisplayEltType};\nexport type Displayable<T> = Annotatable<T, ADisplayable>;\nexport function set_display<T>(x: Displayable<T>, display: DisplayEltType){\n    return annotate(x, {display});\n}\nexport type AMatch = (ADisplayable & ADisablable);\n\nexport interface DisplayElt {\n    display: DisplayEltType, // the intended display style for this element\n    match: string, // the string that the parser matched for this element\n    typeahead?: Disablable<string>[], // array of typeahead options\n    name?: string, // internal name of this match (probably not useful for rendering purposes)\n}\n\nexport enum MatchValidity {\n    valid = 0,\n    partial = 1,\n    invalid = 2\n}\n\nexport class CommandParser {\n    command: string;\n    tokens: Token[];\n    token_gaps: string[];\n    position: number = 0;\n    validity: MatchValidity = MatchValidity.valid;\n    match: DisplayElt[] = [];\n    tail_padding: string = '';\n\n    constructor(command: string) {\n        this.command = command;\n        [this.tokens, this.token_gaps] = tokenize(command);\n    }\n\n    consume_exact(spec_tokens: Token[], display: DisplayEltType=DisplayEltType.keyword, name?: string): boolean {\n        if (spec_tokens.length === 0) {\n            throw new Error(\"Can't consume an empty spec.\");\n        }\n        \n        let match_tokens: Token[] = [];\n        let match_gaps: string[] = [];\n        let pos_offset = 0;\n        for (let spec_tok of spec_tokens) {\n            if (this.position + pos_offset === this.tokens.length) {\n                this.validity = MatchValidity.partial;\n                break; //partial validity\n            }\n            let next_tok = this.tokens[this.position + pos_offset];\n            let next_gap = this.token_gaps[this.position + pos_offset];\n\n            if (spec_tok.toLowerCase() === next_tok.toLowerCase()) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                pos_offset++;\n                continue;\n            }\n\n            if (starts_with(spec_tok.toLowerCase(), next_tok.toLowerCase())) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                this.validity = MatchValidity.partial;\n                pos_offset++;\n                break;\n            }\n            this.validity = MatchValidity.invalid;\n            break;   \n        }\n\n        this.position += pos_offset;\n\n\n        if (this.validity === MatchValidity.valid) {\n            this.match.push({\n                display: display,\n                match: untokenize(match_tokens, match_gaps),\n                name: name});\n            return true;\n        }\n\n        if (this.validity === MatchValidity.partial) {\n            if (this.position === this.tokens.length) {\n                this.match.push({\n                    display: DisplayEltType.partial,\n                    match: untokenize(match_tokens, match_gaps),\n                    typeahead: [untokenize(spec_tokens)],\n                    name: name});\n                return false;\n            } else {\n                this.validity = MatchValidity.invalid;\n            }\n        }\n\n        match_tokens.push(...this.tokens.slice(this.position));\n        match_gaps.push(...this.token_gaps.slice(this.position, this.tokens.length));\n        this.position = this.tokens.length;\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_gaps),\n            name: name});\n        return false;\n    }\n\n    subparser() {\n        return new CommandParser(untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position)));\n    }\n\n    integrate(subparser: CommandParser) {\n        this.position += subparser.position;\n        this.match.push(...subparser.match);\n        this.validity = subparser.validity;\n    }\n\n    consume_option<S extends string>(option_spec_tokens: (Annotatable<Token[], AMatch>)[], name?: string): S | false{\n        let partial_matches: Disablable<DisplayElt>[] = [];\n        let exact_match_subparser: CommandParser = null;\n        let exact_match_spec_toks: Token[] = null;\n        for (let spec_toks of option_spec_tokens) {\n            let subparser = this.subparser();\n            let annotation = get_annotation(spec_toks, {display: DisplayEltType.option, enabled: true})\n            let display = annotation.display;\n            let is_exact_match = subparser.consume_exact(unwrap(spec_toks), annotation.display, name);\n\n            if (annotation.enabled){\n                if (is_exact_match) {\n                    exact_match_subparser = subparser;\n                    exact_match_spec_toks = unwrap(spec_toks);\n                    continue;\n                }\n\n                if (subparser.validity === MatchValidity.partial){\n                    partial_matches.push(subparser.match[0]);\n                }\n            } else {\n                if (is_exact_match || subparser.validity === MatchValidity.partial){\n                    let disabled_match = set_enabled(subparser.match[0], false);\n                    partial_matches.push(disabled_match);\n                }\n            }\n        }\n        \n        if (exact_match_subparser !== null) {\n            let typeahead = partial_matches.map(with_disablable((x) => unwrap(x.typeahead[0])));\n            // let typeahead = partial_matches.map( (de) => with_disablable(de, (x) => x.typeahead[0]));\n            this.integrate(exact_match_subparser);\n            this.match[this.match.length-1].typeahead = typeahead;\n\n            return <S>normalize_whitespace(untokenize(exact_match_spec_toks));\n        }\n\n        if (partial_matches.length > 0) {\n            this.validity = MatchValidity.partial;\n            this.position = this.tokens.length - 1;\n            let typeahead = partial_matches.map(with_disablable((x) => unwrap(x.typeahead[0])));\n            this.match.push({\n                display: DisplayEltType.partial,\n                match: unwrap(partial_matches[0]).match,\n                typeahead: typeahead,\n                name: name,\n            });\n            return false;\n        }\n\n        return this.invalidate();\n    }\n\n    invalidate(): false {\n        this.validity = MatchValidity.invalid;\n        let match_tokens = this.tokens.slice(this.position);\n        let match_token_gaps = this.token_gaps.slice(this.position, this.tokens.length);\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_token_gaps),\n            name: name});\n        this.position = this.tokens.length;\n        return false;\n    }\n\n    consume_filler(spec_tokens: Token[]){\n        return this.consume_exact(spec_tokens, DisplayEltType.filler);\n    }\n\n    is_done() {\n        if (this.position === this.tokens.length - 1 && this.tokens[this.tokens.length - 1] === ''){\n            return this.validity === MatchValidity.valid;\n        }\n\n        if (this.position !== this.tokens.length) {\n            return false;\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    done() {\n        if (!this.is_done() /*this.position !== this.tokens.length */) {\n            this.validity = MatchValidity.invalid;\n            this.match.push({\n                display: DisplayEltType.error,\n                match: untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position, this.tokens.length))\n            });\n            this.position = this.tokens.length;\n        } else {\n            if (this.position === this.tokens.length - 1) {\n                this.tail_padding = this.token_gaps[this.token_gaps.length - 1];\n            }\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    get_match(name: string){\n        for (let m of this.match) {\n            if (m.name === name) {\n                return m;\n            }\n        }\n        return null;\n    }\n}\n\nexport function stop_early<R>(gen: IterableIterator<string | boolean>): R | undefined{\n    let value: any | boolean = undefined;\n    let done: boolean = false;\n\n    while (!done) {\n        let result = gen.next(value);\n        value = result.value;\n        done = result.done;\n        if (value === false) {\n            return;\n        }\n    }\n\n    return <R>value;\n}\n\nexport let with_early_stopping = <R>(gen_func: (...args: any[]) => IterableIterator<any>): (...args: any[]) => R => {\n    let inner = (...args) => {\n        let gen = gen_func(...args);\n        return <R>stop_early(gen);\n    }\n    return <(...args: any[]) => R>inner;\n}\n\nexport function with_early_stopping2<R, T>(gen_func: (this: T, ...args: any[]) => IterableIterator<any>): (...args: any[]) => R {\n    let inner = (...args) => {\n        let gen = gen_func.call(this, ...args);\n        return <R>stop_early(gen);\n    }\n    return <(...args: any[]) => R>inner;\n}\n\nexport function combine<R>(parser: CommandParser, consumers: ((parser: CommandParser) => (R | false))[]) {\n    type Thread = {\n        result: R | false,\n        subparser: CommandParser\n    }\n    let threads: Thread[] = [];\n\n    for (let c of consumers) {\n        let sp = parser.subparser();\n        threads.push({\n            result: c.call(this, sp),\n            subparser: sp,\n        });\n    }\n\n    let partial_matches: Thread[] = [];\n\n    for (let t of threads) {\n        if (t.subparser.is_done()) {\n            parser.integrate(t.subparser);\n            return t.result;\n        } else {\n            if (t.subparser.validity === MatchValidity.partial) {\n                partial_matches.push(t);\n            }\n        }\n    }\n\n    if (partial_matches.length > 0) {\n        //integrate the first one\n        parser.integrate(partial_matches[0].subparser);\n        let final_typeahead = parser.match[parser.match.length - 1].typeahead;\n        let final_t_strings = final_typeahead.map(unwrap);\n        for (let p of partial_matches.slice(1)) {\n            //extend the typeahead with the rest\n            let typeahead = p.subparser.match[p.subparser.match.length - 1].typeahead;\n            for (let t of typeahead) {\n                let t_string = unwrap(t);\n                if (!final_t_strings.includes(t_string)) {\n                    final_typeahead.push(t);\n                    final_t_strings.push(t_string);\n                }\n            }\n        }\n    } else {\n        // set to invalid\n        parser.invalidate();\n    }\n    return false;\n}\n\n// Validator for the mini-language applying to transitions for syntax highlighting\nexport class PhraseDSLValidator extends StringValidator {\n    is_valid(s: ValidatedString<this>): s is ValidString<this> {\n        let toks = tokenize(s)[0];\n        if (toks.slice(1).some(t => \n            t.startsWith('~') || t.startsWith('*') || t.startsWith('&'))) {\n            return false;\n        }\n        return true;\n    }\n}\n\nexport function consume_declarative_dsl(parser: CommandParser, options: ValidatedString<PhraseDSLValidator>[][]) {\n    // assumption: no option is a prefix of any other option\n    let consumers = [];\n\n    for (let option of options) {\n        let opt_consumer = with_early_stopping(function*(parser) {\n            for (let o of option) {\n                let enabled = true;\n                if (o.startsWith('~')) {\n                    enabled = false;\n                    o = o.slice(1);\n                }\n\n                let display: DisplayEltType = DisplayEltType.filler;\n                if (o.startsWith('*')) {\n                    display = DisplayEltType.keyword;\n                    o = o.slice(1);\n                } else if (o.startsWith('&')) {\n                    display = DisplayEltType.option;\n                    o = o.slice(1);\n                }\n\n                let toks = tokenize(o)[0];\n                yield parser.consume_option([annotate(toks, {enabled, display})]);\n            }\n\n            return untokenize(option);\n        });\n\n        consumers.push(opt_consumer);\n    }\n\n    let result = combine.call(this, parser, consumers);\n\n    return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/parser.ts","import * as React from 'react';\n\nexport function uncapitalize(msg: string) {\n    return msg[0].toLowerCase() + msg.slice(1);\n}\n\nexport function capitalize(msg: string) {\n    return msg[0].toUpperCase() + msg.slice(1);\n}\n\n\nexport function starts_with(str: string, searchString: string, position?: number){\n    position = position || 0;\n    return str.substr(position, searchString.length) === searchString;\n}\n\nexport function tokens_equal(tks1: string[], tks2: string[]) {\n    if (tks1.length !== tks2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < tks1.length; i++) {\n        if (tks1[i] !== tks2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function tokenize(s: string): [string[], string[]] {\n    let word_pat = /[\\S]+/g;\n    let space_pat = /[^\\S]+/g;\n\n    let tokens = s.split(space_pat);\n    let gaps = s.split(word_pat);\n\n    if (tokens.length > 0){\n        if (tokens[0] === '') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] === '' && gaps[gaps.length - 1] === '') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n    }\n\n    return [tokens, gaps];\n}\n\nexport function split_tokens(s: string): string[] {\n    let space_pat = /[^\\S]+/g;\n    let tokens = s.split(space_pat);\n    if (tokens.length > 0){\n        if (tokens[0] === '') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] === '') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n    }\n    return tokens;\n}\n\nfunction tokenize_tests() {\n    console.log('tokenize tests');\n    console.log(tokenize(' l'));\n}\n\nexport function untokenize(tokens: string[], gaps?: string[]){\n    if (gaps === undefined) {\n        return tokens.join(' ');\n    }\n    \n    let result: string = '';\n    let i = 0;\n    for (i = 0; i < gaps.length; i++){\n        result += gaps[i];\n        if (i < tokens.length) {\n            result += tokens[i];\n        }\n    }\n\n    return result;\n}\n\nexport function get_indenting_whitespace(s: string) {\n    let space_pat = /^[^\\S]+/;\n    let result = space_pat.exec(s);\n    if (result === null){\n        return '';\n    }\n    return result[0];\n}\n\nexport function ends_with_whitespace(s: string) {\n    let last_space_pat = /\\s$/;\n    return last_space_pat.exec(s) !== null;\n}\n\nexport function normalize_whitespace(s: string) {\n    return s.trim().replace(/\\s+/g, ' ');\n}\n\nexport function last(x: any[] | string){\n    return x[x.length - 1];\n}\n\nexport function random_choice(choices: any[]) {\n  var index = Math.floor(Math.random() * choices.length);\n  return choices[index];\n}\n\nexport function dedent(strs: TemplateStringsArray, ...args) {\n    // do interpolation\n    let result: string = strs[0];\n    for (let i = 0; i < args.length; i++) {\n        result += args[i] + strs[i + 1];\n    }\n\n    //find the first newline with whitespace after it\n    let pat = /\\n +/;\n    let m = pat.exec(result);\n\n    if (m === null) {\n        return result\n    }\n\n    let replace_pat = new RegExp(m[0], 'g');\n    let result2 = result.replace(replace_pat, '\\n');\n    \n   return result2;\n}\n\nexport function wrap_in_div(message: string): HTMLElement {\n    let elt = document.createElement('div');\n    elt.innerHTML = message;\n    return elt;\n} \n\n\n// WEBPACK FOOTER //\n// ./src/typescript/text_tools.ts","import {\n    CommandResult,\n    CommandHandler,\n    InterstitialUpdateResult,\n    HistoryInterpreter,\n    HistoryInterpretationOp,\n    World\n} from '../commands'\n\nimport {\n    CommandParser,\n    DisplayEltType,\n    with_early_stopping,\n    consume_declarative_dsl,\n    PhraseDSLValidator\n} from '../parser'\n\nimport {\n    FuckDict,\n    FuckSet,\n    array_fuck_contains,\n    set_enabled,\n    annotate,\n    ValidString\n} from '../datatypes';\n\nimport {\n    tokenize,\n    untokenize,\n    wrap_in_div\n} from '../text_tools';\n\nimport {\n    ObserverMomentID,\n    ObserverMoment,\n    PerceptionID,\n    ContentionID,\n    are_transitions_declarative,\n    has_interpretations,\n    are_interpretations_declarative,\n    index_oms,\n    index_perceptions\n} from './observer_moments';\n\nimport prologue from './chapters/00_prologue';\nimport chapter_1 from './chapters/01_chapter_1';\n\n//instead of homes, boxes\n\n// Charlotte\n// Southern rural culture\n// Pacifier, baby's clothes, blanket\n// Medical writeup, printed out\n\n// Ben\n// New england mist, trees\n// All notes\n// Musical score of numbers\n\n// Danielle\n// Coffee mug\n// \n\nexport interface VenienceWorldState {\n    experiences?: ObserverMomentID[],\n    history_index?: number,\n    om_state?: {[K in ObserverMomentID]?: any},\n    has_regarded?: {[K in PerceptionID]?: boolean},\n    has_understood?: {[K in ContentionID]?: boolean},\n    has_visited?: {[K in ObserverMomentID]?: boolean}\n}\n\nexport type VenienceWorldCommandHandler = CommandHandler<VenienceWorldState>;\n\nexport type VenienceWorldCommandResult = CommandResult<VenienceWorldState>;\n\nexport type VenienceWorldInterstitialUpdateResult = InterstitialUpdateResult<VenienceWorldState> & {\n    world: VenienceWorld\n}\n\nexport type VenienceWorldHistoryInterpreter = {\n    interpret_history(this: VenienceWorld, history_elt: VenienceWorldInterstitialUpdateResult): HistoryInterpretationOp\n};\n\nexport let wrap_handler = (handler: (this: VenienceWorld, parser: CommandParser) => IterableIterator<any>): (parser: CommandParser) => VenienceWorldCommandResult => \n    function(this: VenienceWorld, parser: CommandParser) { return with_early_stopping(handler.bind(this))(parser); }\n\nexport class VenienceWorld extends World<VenienceWorldState>{\n\n    static observer_moments = index_oms([\n        ...prologue.observer_moments(),\n        ...chapter_1.observer_moments()\n    ]);\n\n    static perceptions = index_perceptions([\n        ...prologue.perceptions(),\n        ...chapter_1.perceptions()\n    ]);\n    \n    constructor({experiences, history_index, om_state, has_regarded, has_understood, has_visited}: VenienceWorldState) {\n        if (experiences === undefined) {\n            experiences = ['bed, sleeping 1'];\n        }\n        if (history_index === undefined) {\n            history_index = 0;\n        }\n        if (om_state === undefined) {\n            om_state = {};\n        }\n        if (has_regarded === undefined) {\n            has_regarded = {};\n        }\n        if (has_understood === undefined) {\n            has_understood = {};\n        }\n        if (has_visited === undefined) {\n            has_visited = {};\n        }\n        \n        super({experiences, history_index, om_state, has_regarded, has_understood, has_visited});\n    }\n\n    current_om(): ObserverMomentID {\n        for (let i = this.state.experiences.length - 1; i >= 0; i--) {\n            let exp: ObserverMomentID = this.state.experiences[i];\n            if (exp !== null) {\n                return exp;\n            }\n        }\n        throw \"Somehow got a fully null or empty history.\";\n    }\n\n    get_om_state(om_id: ObserverMomentID) {\n        return this.state.om_state[om_id] || {};\n    }\n\n    get_current_om_state() {\n        return this.get_om_state(this.current_om());\n    }\n\n    transition_to(dest: ObserverMomentID, dest_om_state?: any, message?: HTMLElement | false) {\n        let update: VenienceWorldState = {\n            experiences: [...this.state.experiences, dest],\n            history_index: this.state.history_index + 1,\n            has_visited: {[dest]: true}\n        };\n\n        if (dest_om_state !== undefined) {\n            update.om_state = {\n                [dest]: dest_om_state\n            };\n        }\n\n        let result: VenienceWorldCommandResult = {\n            world: this.update(update)\n        };\n\n        if (message !== false) {\n            if (message === undefined) {\n                let msg: string;\n                let dest_om = VenienceWorld.observer_moments[dest];\n                if (this.state.has_visited[dest] && dest_om.short_enter_message !== undefined) {\n                    msg = dest_om.short_enter_message;\n                } else {\n                    msg = dest_om.enter_message;\n                }\n                if (msg !== undefined) {\n                    result.message = wrap_in_div(msg);\n                }\n            } else {\n                result.message = message;\n            }\n        }\n        return result;\n    }\n\n    get handle_command() {\n        return wrap_handler(function*(parser: CommandParser) {\n            let om = VenienceWorld.observer_moments[this.current_om()];\n\n            if (!are_transitions_declarative(om)) {\n                //dispatch to a more specific handler\n                return om.handle_command.call(this, parser)\n                \n            }\n\n            // we know these are valid because we indexed them\n            // too lazy/busy to thread the validity tag up thru the types :(\n            let cmd_options = <ValidString<PhraseDSLValidator>[][]>om.transitions.map(([cmd, om_id]) => cmd)\n\n            if (cmd_options.length === 0) {\n                yield parser.done();\n                return;\n            }\n\n            let cmd_choice = consume_declarative_dsl(parser, cmd_options);\n\n            if (cmd_choice !== false){\n                yield parser.done();\n            }\n\n            let om_id_choice: ObserverMomentID = this.current_om();\n            om.transitions.forEach(([cmd, om_id]) => {\n                if (cmd_choice === untokenize(cmd)) {\n                    om_id_choice = om_id;\n                }\n            });\n\n            return this.transition_to(om_id_choice);\n\n        });\n    }\n\n    make_look_consumer(look_options: [string[], PerceptionID][], enabled=true) {\n        return wrap_handler(function*(parser: CommandParser){\n            let cmd_enabled = enabled && !look_options.every(([cmd, t]) => this.state.has_regarded[t])\n            \n            yield parser.consume_option([annotate(['look'], {\n                enabled: cmd_enabled,\n                display: DisplayEltType.keyword\n            })]);\n\n            // let options = look_options.map(([opt_toks, t]) => {\n            //     if (this.state.has_regarded[t]) {\n            //         return ['~' + opt_toks[0], ...opt_toks.slice(1)];\n            //     } else {\n            //         return opt_toks;\n            //     }\n            // });\n\n            // let opt = yield consume_option_stepwise_eager(parser, options);\n            // yield parser.done();\n\n            let options = look_options.map(([opt_toks, t]) =>\n                annotate(opt_toks, {\n                    enabled: !(this.state.has_regarded[t] || false),\n                    display: DisplayEltType.filler\n                })\n            );\n\n            let opt = yield parser.consume_option(options);\n            yield parser.done();\n\n            let target: PerceptionID = null;\n            for (let [opt_toks, t] of look_options) {\n                if (untokenize(opt_toks) === opt) {\n                    target = t;\n                    break;\n                }\n            } \n\n            return this.regard(target);\n        });\n    }\n\n    regard(perception_id: PerceptionID, formatter?:(message: string) => HTMLElement) {\n        if (formatter === undefined) {\n            formatter = wrap_in_div;\n        }\n        let result: VenienceWorldCommandResult = {\n            world: this.update({\n                has_regarded: {\n                    [perception_id]: true\n                }\n            }),\n            message: formatter(VenienceWorld.perceptions[perception_id].content)\n        };\n        return result;\n    }\n\n    // make_understand_consumer(understand_options: [string[], ContentionID][], enabled=true) {\n    //     return wrap_handler(function*(parser: CommandParser){\n    //         let cmd_enabled = enabled && !understand_options.every(([cmd, t]) => this.state.has_regarded[t])\n            \n    //         yield parser.consume_option([annotate(['try'], {\n    //             enabled: cmd_enabled,\n    //             display: DisplayEltType.filler\n    //         })]);\n    //         yield parser.consume_filler(['to']);\n            \n    //         // let options = look_options.map(([opt_toks, t]) => {\n    //         //     if (this.state.has_regarded[t]) {\n    //         //         return ['~' + opt_toks[0], ...opt_toks.slice(1)];\n    //         //     } else {\n    //         //         return opt_toks;\n    //         //     }\n    //         // });\n\n    //         // let opt = yield consume_option_stepwise_eager(parser, options);\n    //         // yield parser.done();\n\n    //         let options = understand_options.map(([opt_toks, t]) =>\n    //             set_enabled(opt_toks, !(this.state.has_contended_with[t] || false))\n    //         );\n\n    //         let opt = yield parser.consume_option(options);\n    //         yield parser.done();\n\n    //         let target: ContentionID = null;\n    //         for (let [opt_toks, t] of understand_options) {\n    //             if (untokenize(opt_toks) === opt) {\n    //                 target = t;\n    //                 break;\n    //             }\n    //         } \n\n    //         let result: VenienceWorldCommandResult = {\n    //             world: this.update({\n    //                 has_contended_with: {\n    //                     [target]: true\n    //                 }\n    //             }),\n    //             message: wrap_in_div(VenienceWorld.perceptions[target].content)\n    //         };\n    //         return result;\n    //     });\n    // }\n\n    interstitial_update(message?: HTMLElement) {\n        let result: CommandResult<VenienceWorldState> = {};\n        let world_update: VenienceWorldState = {};\n\n        // apply loop erasure\n        // if (this.state.experiences.length > 0) {\n        //     let loop_idx = this.state.experiences.indexOf(this.current_om());\n        //     if (loop_idx !== this.state.experiences.length - 1) {\n        //         let new_experiences = this.state.experiences.slice().fill(null, loop_idx + 1, this.state.experiences.length - 1);\n        //         world_update.experiences = new_experiences;\n        //     }\n        // }\n\n        if (Object.keys(world_update).length > 0){\n            result.world = this.update(world_update);\n        }\n\n        return result;\n    }\n\n    interpret_history(history_elt: VenienceWorldInterstitialUpdateResult): HistoryInterpretationOp {\n        // apply loop erasure mechanic\n\n        // if (this.state.experiences[history_elt.world.state.history_index] === null) {\n        //     return [{'add': 'forgotten'}];\n        // }\n\n        // apply the OM-specific interpretation\n        let om = VenienceWorld.observer_moments[this.current_om()];\n        if (has_interpretations(om)) {\n            if (are_interpretations_declarative(om)) {\n                return om.interpretations[history_elt.world.current_om()];\n            } else {\n                return om.interpret_history.call(this, history_elt);\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/venience/venience_world.ts","import {starts_with, tokenize, untokenize, normalize_whitespace, split_tokens} from './text_tools';\n\nimport {\n    Annotatable,\n    annotate,\n    Disablable,\n    unwrap,\n    get_annotation,\n    with_annotatable,\n    with_disablable,\n    set_enabled,\n    is_enabled,\n    chain_update,\n    chain_object\n} from './datatypes';\n\nimport {CommandParser, DisplayEltType, Token, MatchValidity} from './parser';\n\nexport interface CommandHandler<T> {\n    handle_command(this: World<T>, parser: CommandParser): CommandResult<T>\n}\n\nexport interface HistoryInterpreter<T> {\n    interpret_history(this: World<T>, history_elt: InterstitialUpdateResult<T>): HistoryInterpretationOp\n}\n\nexport abstract class World<T> implements CommandHandler<T>, Partial<HistoryInterpreter<T>> {\n    abstract handle_command: (this: World<T>, parser: CommandParser) => CommandResult<T>;\n    abstract interstitial_update?(command_message?: HTMLElement): InterstitialUpdateResult<T>;\n    abstract interpret_history?(history: InterstitialUpdateResult<T>): HistoryInterpretationOp;\n\n    readonly state: T;\n    constructor(state?: T){\n        this.state = state;\n    }\n\n    update(state_updates: T, replace_keys?: string[]): this {\n        let new_state = chain_update(this.state, state_updates, replace_keys);\n        return new (this.constructor as any)(new_state);\n    }\n}\n\nexport type InterstitialUpdateResult<T> = {\n    world?: World<T>;\n    message?: HTMLElement;\n} | undefined;\n\nexport type CommandResult<T> = InterstitialUpdateResult<T> & {\n    parser?: CommandParser;\n} | undefined;\n\nexport type HistoryInterpretation = string[];\n\nexport type HistoryInterpretationOp = ({'add': string} | {'remove': string})[];\n\nexport type PostProcessedCommandResult<T> = CommandResult<T> & {\n    index?: number;\n    message_classes?: HistoryInterpretation;\n}\n\nexport interface Command<T> {\n    command_name: Token[];\n    execute: (world: World<T>, parser: CommandParser) => CommandResult<T>;\n}\n\nexport function apply_command<T> (world: World<T>, cmd: string) {\n    let parser = new CommandParser(cmd);\n\n    let result: CommandResult<T> = {parser: parser, world: world};\n    let cmd_result = world.handle_command(parser)\n    \n    if (cmd_result !== undefined) {\n        if (cmd_result.world !== undefined) {\n            result.world = cmd_result.world;\n        }\n        if (cmd_result.message !== undefined) {\n            result.message = cmd_result.message;\n        }\n\n        result = apply_interstitial_update(result);\n    }\n\n    return result;\n}\n\nfunction apply_interstitial_update<T>(result: CommandResult<T>): CommandResult<T> {\n    if (result.world.interstitial_update !== undefined) {\n        let res2 = result.world.interstitial_update();\n        if (res2 !== undefined) {\n            if (res2.world !== undefined) {\n                result.world = res2.world;\n            }\n            if (res2.message !== undefined) { \n                //assume they updated the original message in some way   \n                result.message = res2.message;\n            }\n        }\n    }\n    return result;\n}\n\nclass HistoryInterpretationError extends Error {};\n\nfunction apply_history_interpretation_op(interp: HistoryInterpretation, op: HistoryInterpretationOp): HistoryInterpretation {\n    if (op === undefined || op.length === 0){\n        return interp;\n    }\n    let new_interp: HistoryInterpretation;\n    if (interp === undefined) {\n        new_interp = [];\n    } else {\n        new_interp = [...interp];\n    }\n    for (let o of op) {\n        if (o['add'] !== undefined){\n            let message_class = o['add'];\n            if (new_interp.indexOf(message_class) === -1) {\n                new_interp.push(message_class);\n            }\n        }\n        if (o['remove'] !== undefined){\n            let message_class = o['remove'];\n            let idx = new_interp.indexOf(message_class);\n            if (idx !== -1) {\n                new_interp.splice(idx, 1);\n            }\n        }\n    }\n    return new_interp;\n}\n\nfunction apply_history_interpretation<T>(history: PostProcessedCommandResult<T>[], world: World<T>): PostProcessedCommandResult<T>[] {\n    if (world.interpret_history === undefined) {\n        return history;\n    } else {\n        let history_input = history.map(({world, message}) => ({world, message}));\n\n        let interp_ops = history_input.map(world.interpret_history, world);\n\n        let new_history = [];\n        for (let i = 0; i < interp_ops.length; i++) {\n            let new_elt = {...history[i]};\n            let msg_clss = new_elt.message_classes;\n            let op = interp_ops[i];\n            new_elt.message_classes = apply_history_interpretation_op(msg_clss, op);\n            new_history.push(new_elt);\n        }\n        return new_history;\n    }\n}\n\nexport class WorldDriver<T> {\n    previous_histories: PostProcessedCommandResult<T>[][] = [];\n\n    history: PostProcessedCommandResult<T>[];\n\n    possible_history: PostProcessedCommandResult<T>[];\n    current_state: CommandResult<T>;\n\n    constructor (initial_world: World<T>) {\n        let initial_result: PostProcessedCommandResult<T> = {world: initial_world};\n        initial_result = apply_interstitial_update(initial_result);\n        initial_result.index = 0;\n        this.history = apply_history_interpretation([initial_result], initial_world);\n \n        this.apply_command('', false); //populate this.current_state\n    }\n\n    apply_command(cmd: string, commit: boolean = true) {\n        let prev_state = unwrap(this.history[this.history.length - 1]);\n        let result: PostProcessedCommandResult<T> = apply_command(prev_state.world, cmd);\n         \n        result.index = prev_state.index + 1;\n\n        this.current_state = result;\n\n        if (this.current_state.parser.validity === MatchValidity.valid) {\n            this.possible_history = apply_history_interpretation([...this.history, this.current_state], this.current_state.world);\n            if (commit) {\n                this.commit();\n            }\n        } else {\n            this.possible_history = this.history;\n        }\n        return result;\n    }\n\n    commit() {\n        //save previous history for posterity\n        this.previous_histories.push(this.history);\n\n        //filter out any disabled history\n        this.history = this.possible_history.filter(is_enabled); //.map(x => annotate(x, 1));\n\n        this.apply_command('', false);\n        return this.current_state;\n    }\n}\n\n// eager dispatch\n\n// type WorldWithEagerDispatch<T> = World<T> & {\n//     get_commands(): Disablable<Command<T>>[],\n// }\n\n// export function eager_dispatch<T>(world: WorldWithEagerDispatch<T>, parser: CommandParser) {\n//     let commands = world.get_commands();\n//     let options = commands.map((cmd) => with_disablable(cmd, (c) => c.command_name));\n    \n//     let cmd_name = parser.consume_option(options, 'command');\n//     let result: CommandResult<T> = {parser: parser, world: world};\n\n//     if (!cmd_name) {\n//         return result;\n//     }\n\n//     let command = unwrap(commands[commands.findIndex((cmd) => (\n//         cmd_name === untokenize(unwrap(cmd).command_name)))]);\n\n//     let cmd_result = command.execute(world, parser);\n\n//     return cmd_result\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/commands.ts","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 6\n// module chunks = 0","import * as React from 'react';\n\nimport {DisplayEltType, MatchValidity} from '../typescript/parser';\n\nexport const Carat = () => (\n  <span>\n    >&nbsp;\n  </span>\n);\n\nfunction get_display_color(det: DisplayEltType) {\n  switch (det) {\n    case DisplayEltType.keyword:\n      return 'aqua';\n    case DisplayEltType.option:\n      return 'orange';\n    case DisplayEltType.filler:\n      return 'ivory';\n    case DisplayEltType.partial:\n      return 'silver';\n    case DisplayEltType.error:\n      return 'red';\n  }\n}\n\nexport const ParsedText = (props) => {\n  let {parser, typeaheadIndex, children} = props;\n\n  let style: any = {\n    //display: 'inline-block',\n    whiteSpace: 'pre-wrap',\n    position: 'relative'\n  }\n  let validity = parser.validity;\n  if (validity === MatchValidity.valid) {\n    style.fontWeight = '900';\n    //style.fontStyle = 'italic'\n  } else {\n    style.fontWeight = '100';\n    if (validity === MatchValidity.invalid) {\n      style.opacity = '0.6';\n    }\n  }\n\n  const elt_style: any = {\n    //display: 'inline-block'\n  }\n\n  const span_style: any = {\n    //display: 'inline-block'\n  }\n\n  return (\n    <div className=\"parsed-text\" style={{/*display: 'inline-block'*/}}>\n      <Carat />\n      <div style={style}>\n        {(parser === undefined) ? '' : \n          parser.match.map((elt, i) => (\n            <div key={i.toString()} style={{...elt_style, ...{color: get_display_color(elt.display)}}}>\n              <span style={span_style}>\n                {elt.match + ( i === parser.match.length - 1  ? parser.tail_padding : '' ) }\n              </span>\n              { ( i === typeaheadIndex ) ? children : '' }\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport const OutputText = (props) => {\n  const {message_html} = props;\n\n  return (\n    <div className=\"output-text\" dangerouslySetInnerHTML={{__html: message_html}} />\n  );\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Text.tsx","export let keys = {\n    tab: 9,\n    enter: 13,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40\n};\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/keyboard_tools.ts","import * as React from 'react';\n\nimport {Preface} from './Preface';\nimport {Prompt} from './Prompt';\nimport {ParsedText} from './Text';\nimport {TypeaheadList} from './TypeaheadList';\nimport {History} from './History';\n\nimport {get_indenting_whitespace, ends_with_whitespace} from '../typescript/text_tools';\n\nimport {World, WorldDriver} from \"../typescript/commands\";\n\nimport {MatchValidity} from '../typescript/parser';\n\nimport {is_enabled} from '../typescript/datatypes';\n\nimport * as ReactTransitionGroup from 'react-transition-group';\n\nexport class Terminal<T> extends React.Component<any, {world_driver: WorldDriver<T>}> {\n  contentContainer: any;\n  prompt: any;\n  typeahead_list: any;\n  history: any;\n\n\n  constructor(props) {\n    super(props);\n    this.state = {world_driver: this.props.world_driver};\n  }\n\n  componentDidMount() {\n    this.prompt.focus();\n  }\n\n  handleKeys = (event) => {\n    let swallowed_enter = (this.typeahead_list !== null) ? this.typeahead_list.handleKeys(event) : false;\n    if (!swallowed_enter) {\n      this.prompt.handleKeys(event);\n    }\n  }\n  \n  handleSubmit = () => {\n    if (this.isCurrentlyValid()) {\n      const output = this.state.world_driver.commit();\n      this.setState(\n        {world_driver: this.state.world_driver});\n      this.history.commit_after_update = true;\n      //this.history.commit();\n      return true;\n    }\n    return false;\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  isCurrentlyValid = () => {\n    let parser = this.currentParser();\n    return parser.validity === MatchValidity.valid && parser.is_done();\n  }\n\n  handlePromptChange = (input) => {\n    let result = this.state.world_driver.apply_command(input, false);\n    this.setState({\n      world_driver: this.state.world_driver\n    });\n   this.history.edit_after_update = true;\n    //this.history.edit();\n    this.prompt.focus();\n    //this.scrollToPrompt();\n    let that = this;\n    window.setTimeout(function() {\n      that.scrollToPrompt();\n    }, 0)\n  }\n\n  handleTypeaheadSelection = (option) => {\n    let matched_tokens = this.currentParser().match.slice(0, this.currentTypeaheadIndex() + 1).map((elt) => elt.match);\n    let current_indentation = this.currentIndentation();\n    if (current_indentation === '' && matched_tokens.length > 1) {\n      current_indentation = ' ';\n    }\n    let new_last_token = current_indentation + option;\n    matched_tokens[matched_tokens.length - 1] = new_last_token;\n\n    let new_command = ''.concat(...matched_tokens) + ' ';\n    this.handlePromptChange(new_command);\n    this.prompt.setState({value: new_command});\n  }\n\n  currentParser = () => this.state.world_driver.current_state.parser;\n\n  currentTypeaheadIndex = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = parser.match.length - 1;\n    let last_match = parser.match[typeahead_ind];\n    if (parser.match.length > 1 && last_match.match === '') {\n      typeahead_ind--;\n    }\n\n    return typeahead_ind;\n  }\n\n  currentTypeahead = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = this.currentTypeaheadIndex();\n\n    if (typeahead_ind === -1) {\n      return [];\n    }\n\n    let typeahead = parser.match[typeahead_ind].typeahead;\n    if (typeahead === undefined) {\n      return [];\n    }\n    return typeahead;\n  }\n\n  currentIndentation = () => {\n    let parser = this.currentParser();\n    let typeahead_ind = this.currentTypeaheadIndex();\n\n    if (typeahead_ind === -1) {\n      return '';\n    }\n\n    return get_indenting_whitespace(parser.match[typeahead_ind].match)\n  }\n\n  scrollToPrompt = () => {\n    if (this.state.world_driver.history.length > 1) {\n      this.prompt.input.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"end\"});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"terminal\" tabIndex={-1} onKeyDown={this.handleKeys} ref={cc => this.contentContainer = cc}>\n        <Preface on_start_game={() => this.prompt.focus()} />\n        <History\n          timeout={700}\n          onAnimationFinish={this.scrollToPrompt}\n          history={this.state.world_driver.history}\n          possible_history={this.state.world_driver.possible_history}\n          ref={h => this.history = h}\n          />\n        <Prompt\n          onSubmit={this.handleSubmit}\n          onChange={this.handlePromptChange}\n          ref={p => this.prompt = p}>\n          <ParsedText\n            parser={this.currentParser()}\n            typeaheadIndex={this.currentTypeaheadIndex()}\n          >\n            <TypeaheadList\n              typeahead={this.currentTypeahead()}\n              indentation={this.currentIndentation()}\n              onTypeaheadSelection={this.handleTypeaheadSelection}\n              ref={t => this.typeahead_list = t}\n            />\n          </ParsedText>\n        </Prompt>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Terminal.tsx","import * as React from 'react';\nimport * as ReactDom from \"react-dom\";\n\nimport {Prompt} from './Prompt';\nimport {ParsedText, OutputText, Carat} from './Text';\nimport {get_annotation, is_enabled, unwrap} from '../typescript/datatypes';\n\n\nexport class BookGuy extends React.Component<any, any> {\n  /*\n    BookGuy is a bad component that get's the danged job done.\n\n    It encapsulates a single element of history in the game.\n\n    When a css change to the history element is \"committed\" (via this.commit()),\n    It triggers an idiosyncratic little animation progression that\n    adds CSS classes in a certain order and dynamically sets\n    the max-height on all elements contained by the history element\n    so that they can grow or shrink smoothly by added css transitions on\n    the max-height property.\n\n    The particulars of the animation progress are currently undocumented because\n    they are pretty bad and might change.\n  */\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message_classes: [],\n      adding_message_classes: [],\n      removing_message_classes: [],\n      entering: true\n    };\n  }\n\n  edit(possible_message_classes, callback?) {\n    if (possible_message_classes === undefined) {\n      possible_message_classes = [];\n    }\n    let edit_message_classes = [];\n    let message_classes = this.state.message_classes;\n\n    let removing_message_classes = []\n    for (let mc of message_classes) {\n        if (possible_message_classes.indexOf(mc) === -1) {\n            removing_message_classes.push(mc);\n        }\n    }\n\n    let adding_message_classes = []\n    for (let pmc of possible_message_classes) {\n        if (message_classes.indexOf(pmc) === -1) {\n            adding_message_classes.push(pmc);\n        }\n    }\n\n    this.setState({removing_message_classes, adding_message_classes}, callback);\n  }\n\n  commit() {\n    let adding_classes = this.state.adding_message_classes;\n    let removing_classes = this.state.removing_message_classes;\n\n    if (this.state.entering\n        || adding_classes.length > 0\n        || removing_classes.length > 0){\n      let new_message_classes = [...this.state.message_classes];\n\n      new_message_classes.push(...adding_classes);\n\n      for (let rmc of removing_classes) {\n        new_message_classes.splice(new_message_classes.indexOf(rmc), 1);\n      }\n\n      this.setState({\n        message_classes: new_message_classes,\n        adding_message_classes: [],\n        removing_message_classes: [],\n      }, () => this.animate(adding_classes, removing_classes));\n    }\n  }\n\n  animate(adding_classes=[], removing_classes=[]) {\n    function walkElt(elt, f){\n      let children = elt.children;\n      for (let i = 0; i < children.length; i++) {\n        let child = children.item(i);\n        walkElt(child, f)\n      }\n      f(elt)\n    }\n\n    let comp_elt: any = ReactDom.findDOMNode(this);\n\n    if (this.state.entering) {\n      comp_elt.classList.add('animation-new')\n      this.setState({entering: false});\n    }\n\n    // Momentarily apply the animation-pre-compute class\n    // to accurately measure the target maxHeight\n    // and check for the custom --is-collapsing property\n    // (This is basically an abomination and I am sorry.)\n    comp_elt.classList.add('animation-pre-compute');\n    \n    walkElt(comp_elt, (e) => e.dataset.maxHeight = `${e.scrollHeight}px`);\n    comp_elt.dataset.isCollapsing = parseInt(getComputedStyle(comp_elt).getPropertyValue('--is-collapsing')) || 0;\n\n    comp_elt.classList.remove('animation-pre-compute');\n\n    \n    let edit_classes = [\n      ...adding_classes.map(c => 'adding-' + c),\n      ...removing_classes.map(c => 'removing-' + c)\n    ]\n    comp_elt.classList.add('animation-start', ...edit_classes);\n\n    \n    // If --is-collapsing was set by the animation-pre-compute class,\n    // then apply the maxHeight update at the end of this animation frame\n    // rather than the beginning of the next one.\n    // I have no idea why this works/is necessary, but it does/is.\n    if (comp_elt.dataset.isCollapsing == 1) {\n      walkElt(comp_elt, (e) => e.style.maxHeight = e.dataset.maxHeight);\n    }\n      \n    requestAnimationFrame(() => {\n      // If --is-collapsing wasn't set in the animation-pre-compute class,\n      // then apply the maxHeight update now.\n      // Websites technology keyboard mouse.\n      if (comp_elt.dataset.isCollapsing != 1) {\n        walkElt(comp_elt, (e) => e.style.maxHeight = e.dataset.maxHeight);\n      }\n      \n      comp_elt.classList.add('animation-active');\n\n      setTimeout(() => {\n        comp_elt.classList.remove(\n          'animation-new',\n          'animation-start',\n          'animation-active',\n          ...edit_classes);\n\n        walkElt(comp_elt, (e) => e.style.maxHeight = '');\n\n        if (this.props.onAnimationFinish){\n          this.props.onAnimationFinish();\n        }\n      }, this.props.timeout)\n      \n    });\n  }\n\n  render() {\n    let classList = ['history', ...this.state.message_classes];\n    classList.push(...this.state.adding_message_classes.map(s => 'would-add-'+s));\n    classList.push(...this.state.removing_message_classes.map(s => 'would-remove-'+s));\n    \n    let className = classList.join(' ');\n    \n    return (\n      <div className={className}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n}\n\nexport class History extends React.Component<any, any> {\n  book_guys: BookGuy[] = [];\n\n  edit_after_update = false;\n  commit_after_update = false;\n\n  constructor(props) {\n    super(props);\n  }\n\n  edit() {\n    this.props.history.forEach((hist) => {\n      let {parser, message, message_classes, index} = hist;\n      let the_book_guy = this.book_guys[index];\n      the_book_guy.edit(this.props.possible_history[index].message_classes);\n    });\n  }\n\n  commit() {\n    // edit the most recent element since that is how we pass in the new classes\n    // and it hasn't had them passed in thru the most recent edit() call yet.\n    let last_index = this.props.history.length - 1;\n    let {message_classes} = this.props.history[last_index];\n    let the_book_guy = this.book_guys[last_index];\n\n    the_book_guy.edit(\n      message_classes,\n      // Once the edit has been accepted, call commit on all book guys.\n      () => this.book_guys.forEach((bg) => bg.commit()));\n\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.history.map(hist => {\n          let msg_html = '';\n          if (hist.message !== undefined) {\n            msg_html = hist.message.innerHTML;\n          }\n          \n          return (\n            <BookGuy\n              timeout={this.props.timeout}\n              onAnimationFinish={this.props.onAnimationFinish}\n              key={hist.index}\n              ref={bg => this.book_guys[hist.index] = bg}>\n              {hist.index > 0 ? (\n                <ParsedText parser={hist.parser} />\n              ) : ''} \n              <OutputText message_html={msg_html} />\n            </BookGuy>\n          );\n        })}\n      </div>\n    )\n  }\n\n  componentDidUpdate() {\n    if (this.edit_after_update) {\n      this.edit()\n      this.edit_after_update = false;\n    }\n    if (this.commit_after_update) {\n      this.commit()\n      this.commit_after_update = false;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/History.tsx","import * as React from 'react';\n\nexport class Preface extends React.Component<any, any> {\n  div: HTMLDivElement;\n\n  start_game = () => {\n    this.div.style.display = 'none';\n    this.props.on_start_game();\n  }\n\n  render() {\n    return (\n      <div className=\"preface\" style={{display: 'none'}} ref={(d) => this.div = d}>\n        <h1 onClick={this.start_game}>\n            <a href='#'>Start Venience World</a>\n        </h1>\n        <h3>\n        Welcome to Venience World!\n        </h3>\n        <br/><br/>\n        <section>\n        <h3>How to play</h3>\n        Venience World is an incomplete game that uses a new kind of parser interface.\n        <br/><br/>\n        Use tab, enter, the arrow keys or the mouse to select autocompletions of your commands as you play.\n        <br/><br/>\n        Play time is about 10 to 20 minutes. I hope you enjoy playing!\n        <br/><br/>\n        <strong>Warning:</strong> Currently there is <i>no way to save or load</i> your game. If you need to take a break, leave Venience World open in a tab. Save/Load will be added in a future release.\n        <br/><br/>\n        To get started now, click the Start Venience World button up top.\n        <br/><br/>\n        </section>\n        \n        <section>\n        <h3>Replaying</h3>\n        Venience World is designed to make all content accessible in a single playthrough.\n        <br/><br/>\n        This means you will <i>never be expected</i> to reset the game and repeat yourself in order to explore a missed branch.\n        <br/><br/>\n        Have faith in this as you play through the game. Replaying a game is often worthwhile; in this case, just know it is <i>not required</i> to get the full experience.\n        <br/><br/>\n        </section>\n\n        <section>\n        <h3>Browser compatibility</h3>\n        Venience World has been tested to work on the Chrome and Firefox browsers.\n        <br/><br/>\n        It definitely doesn't work on Safari.\n        <br/><br/>\n        I haven't tested it on IE/Edge, Opera, or others.\n        <br/><br/>\n        </section>\n\n        <section>\n        <h3>Development progress</h3>\n        This is a playable demo with a prologue and partial first chapter with no puzzle elements.\n        <br/><br/>\n        The final release will complete the story and contain mild puzzle elements surrounding the interpretation of aphorisms.\n        <br/><br/>\n        Most of what you see will be subject to change for the final release.\n        <br/><br/>\n        I'm not sure when it will be finished.\n        <br/><br/>\n        </section>\n\n        <section>\n        <h3>Contact</h3>\n        If you are interested in updates on the game, follow the <a href=\"https://twitter.com/VenienceWorld\">@VenienceWorld</a> twitter account, or <a href=\"mailto:spitz.dan.L+venience@gmail.com\">email me</a>.\n        <br/><br/>\n        I would love to hear about your experience playing Venience World!\n        <br/><br/>\n        </section>\n\n        <section>\n        <h3>Open source</h3>\n        Venience World is open source.\n        <br/><br/>\n        The project can be found at <a href=\"https://github.com/spitz-dan-l/wreck/\">https://github.com/spitz-dan-l/wreck/</a>.\n        <br/><br/>\n        </section>\n\n        <section>\n        <h3>The name</h3>\n        The name \"Venience World\" is a play on \"<a href=\"https://plato.stanford.edu/entries/supervenience/\">Supervenience</a>\", and the trope wherein games have names of the form \"Super <i>X</i> World\".\n        <br/><br/>\n        The game is thematically about seeking an understanding about what is going on. Supervenience as a concept is one of the philosophical tools that has been developed for doing that.\n        </section>\n      </div>  \n    );\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Preface.tsx","import * as React from 'react';\nimport {keys} from '../typescript/keyboard_tools';\n\nconst InputWrapper = (props) => {\n  const {children, ...rest} = props;\n  const style: any = {\n    position: 'relative',\n    minHeight: '8em',\n    marginTop: '1em'\n  };\n  return (\n    <div style={style} {...rest} >\n      {children}\n    </div>\n  );\n}\n\nconst InputDisplay = (props) => {\n  const {children} = props;\n  const style = {\n    wordWrap: 'break-word',\n    \n  };\n\n  return (\n    <span style={style}>\n      {children}\n    </span>\n  );\n}\n\nconst Cursor = ({onClick}) => {\n  let style: any = {\n    position: 'absolute'\n  };\n  return (\n    <span className=\"blinking-cursor\" style={style} onClick={onClick}>\n      {String.fromCharCode(9608)}\n    </span>\n  );\n};\n\nexport class Prompt extends React.Component<any, any> {\n  input: any;\n\n  state = { value: '', is_focused: false };\n\n  handleSubmit = () => {\n    let success = this.props.onSubmit();\n    if (success) {\n      this.setState({value: ''});\n    } \n  }\n\n  // when key down is called by auto complete see if we should just submit\n  handleKeys = ({keyCode}) => {\n    if (keyCode === keys.enter) {\n      this.handleSubmit();\n    }\n    this.setCursor(this.input, this.input.value.length);\n  }\n\n  handleChange = () => {\n    const value = this.input.value;\n    this.props.onChange(value)\n    this.setState({value: value});\n  }\n\n  focus = () => {\n    this.input.focus();\n    this.setState({is_focused: true});\n  }\n\n  blur = () => {\n    this.setState({is_focused: false});\n  }\n\n  setCursor = (node, pos) => {\n      node = (typeof node === \"string\") ? document.getElementById(node) : node;\n\n      if(!node){\n          return false;\n      }else if(node.createTextRange){\n          var textRange = node.createTextRange();\n          textRange.collapse(true);\n          textRange.moveEnd(pos);\n          textRange.moveStart(pos);\n          textRange.select();\n          return true;\n      }else if(node.setSelectionRange){\n          node.setSelectionRange(pos,pos);\n          return true;\n      }\n\n      return false;\n  }\n\n  render() {\n    const input_style: any = {\n      position: 'absolute',\n      left: '-16px',\n      top: 0,\n      width: 0,\n      height: 0,\n      background: 'transparent',\n      border: 'none',\n      color: 'transparent',\n      outline: 'none',\n      padding: 0,\n      resize: 'none',\n      zIndex: -1,\n      overflow: 'hidden'\n    };\n    return (\n        <InputWrapper onClick={() => this.focus()} onBlur={() => this.blur()}>\n            <input onChange={this.handleChange} value={this.state.value} style={input_style} ref={i => this.input = i} />\n            <InputDisplay>\n              {this.props.children}\n              {  \n                this.state.is_focused ?\n                  ( <Cursor onClick={() => this.handleSubmit()} /> ) :\n                  ''\n              }\n            </InputDisplay>\n        </InputWrapper>\n    );\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Prompt.tsx","import * as React from 'react';\n\nimport {keys} from '../typescript/keyboard_tools';\nimport {is_enabled, unwrap} from '../typescript/datatypes';\n\nexport class TypeaheadList extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.state = {selection_index: -1};\n  }\n\n  componentDidUpdate() {\n    if (this.state.selection_index >= this.props.typeahead.length) {\n      this.setState({selection_index: this.props.typeahead.length - 1});\n    }\n  }\n\n  handleClick(option) {\n    this.props.onTypeaheadSelection(option);\n  }\n\n  handleMouseOver(index) {\n    this.setState({selection_index: index});\n  }\n\n  handleKeys(event) {\n    let swallowed_enter = false;\n    \n    top: switch (event.keyCode) {\n      case keys.enter:\n        // if (this.state.selection_index === -1) {\n        //   break;\n        // }\n        if (this.props.typeahead.length > 0) {\n          swallowed_enter = true;\n        }\n        // swallowed_enter = true;\n      case keys.tab:\n        event.preventDefault();\n      case keys.right:      \n        if (this.props.typeahead.length === 0) {\n          break;\n        }\n        let selected = (this.state.selection_index === -1) ?\n          this.props.typeahead[0] :\n          this.props.typeahead[this.state.selection_index];\n\n        if (is_enabled(selected)) {\n          this.props.onTypeaheadSelection(unwrap(selected));\n        }\n        break;\n      \n      case keys.up:\n      case keys.down:\n        let new_selection_index;\n        switch (event.keyCode) {\n          case keys.up:\n            if (this.state.selection_index === -1) {\n              break top;\n            }\n            new_selection_index = this.state.selection_index - 1;\n            break;\n          case keys.down:\n            if (this.state.selection_index === this.props.typeahead.length - 1) {\n              break top;\n            }\n            new_selection_index = this.state.selection_index + 1;\n            break;  \n        }\n        this.setState({selection_index: new_selection_index});\n        break;\n    }\n\n    return swallowed_enter;\n  }\n\n  render() {\n    const {typeahead, indentation} = this.props;\n    const style: any = {\n      position: \"absolute\",\n      listStyleType: \"none\",\n      padding: 0,\n      margin: 0,\n      whiteSpace: 'pre',\n      color: 'silver'\n    };\n    return (\n      <ul style={style}>\n        {typeahead.map((option, i) => (\n          <li\n            key={i.toString()} \n            onMouseOver={() => this.handleMouseOver(i)}\n            style={{\n              marginTop: '1em',\n              background: i === this.state.selection_index ? 'DimGray' : 'inherit',\n              opacity: is_enabled(option) ? 1.0 : 0.4\n            }}\n            {...(\n              is_enabled(option)\n                ? {onClick: () => this.handleClick(unwrap(option))}\n                : {}\n            )}\n          >\n            <span>{indentation}</span>\n            <span>{unwrap(option)}</span>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/TypeaheadList.tsx","import * as React from \"react\";\nimport * as ReactDom from \"react-dom\";\n\nimport {Terminal} from \"../components/Terminal\";\n\nimport {WorldDriver} from \"../typescript/commands\";\n\nimport {VenienceWorld, VenienceWorldState} from '../typescript/venience/venience_world';\n\nlet start: VenienceWorldState = {};\n\n//start.experiences = ['grass, asking 2'];\n//start.experiences = ['alcove, entering the forest']; \n// start.experiences = ['woods, ending interpretation'];\n// start.experiences = ['bed, sitting up 2'];\n// start.experiences = ['woods, crossing the boundary 2'];\nstart.experiences = ['woods, clearing'];\n// start.has_regarded = {'tangle, 3': true};\n// start.has_understood = {'tangle, 3': true};\n\nlet world_driver = new WorldDriver(new VenienceWorld(start))\n\nReactDom.render(<Terminal world_driver={world_driver} />, document.getElementById('terminal'));\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/main.tsx","import {\n    HistoryInterpretationOp\n} from '../../commands';\n\nimport {\n    ObserverMoment,\n    Perception,\n    PerceptionID\n} from '../observer_moments';\n\nimport {\n    wrap_handler,\n    VenienceWorldCommandResult,\n    VenienceWorldInterstitialUpdateResult\n} from '../venience_world';\n\nimport {\n    tokenize,\n    wrap_in_div\n} from '../../text_tools';\n\nimport {\n    set_enabled,\n    is_enabled,\n    annotate\n} from '../../datatypes';\n\nimport {\n    CommandParser,\n    DisplayEltType,\n    combine\n} from '../../parser';\n\nlet prologue_oms: () => ObserverMoment[] = () => [\n    {\n        id: 'bed, sleeping 1',\n        enter_message: '',\n        transitions: [\n            [['awaken'], 'bed, awakening 1']]\n    },\n    {\n        id: 'bed, awakening 1',\n        enter_message: 'You awaken in your bed.',\n        transitions: [\n            [['sit', 'up'], 'bed, sitting up 1']],\n    },\n    {\n        id: 'bed, sitting up 1',\n        enter_message: `You push yourself upright, blankets falling to your waist.\n        You squint and see only the palest light of dawn.\n        Crickets chirp in the forest bordering your alcove.\n        <br /><br />\n        Your body still feels heavy with sleep.\n        <br /><br />\n        Something important nags quietly at you from the back of your mind...`,\n        transitions: [\n            [['try', 'to', '*remember'], 'bed, trying to remember 1']]\n    },\n    {\n        id: 'bed, trying to remember 1',\n        enter_message: `\n        Something to do with Katya's twelfth sequence.`,\n        transitions: [\n            [['remember', 'the', 'twelfth', 'sequence'], 'bed, trying to remember 2']]\n    },\n    {\n        id: 'bed, trying to remember 2',\n        enter_message: `\n        The twelfth sequence was the first purely numeric one in Katya's notes.\n        <br/><br/>\n        None of the greek symbols, none of the allusions to physical constants.\n        <br/><br/>\n        Just numbers. Eighty-seven of them.`,\n        transitions: [\n            [['remember', 'the', 'numbers'], 'bed, trying to remember 3']]\n    },\n    {\n        id: 'bed, trying to remember 3',\n        enter_message: `\n        For years, the meaning of this sequence has eluded you.\n        <br/><br/>\n        It begins:\n        <br/><br/>\n        57 44 35\n        <br/><br/>\n        and continues:`,\n        transitions: [\n            [['20', '699', '319'], 'bed, trying to remember 4']]\n    },\n    {\n        id: 'bed, trying to remember 4',\n        enter_message: `\n        Your favorite bit is positions fifty-one through fifty-three:`,\n        transitions: [\n            [['936', '5223', '2717'], 'bed, trying to remember 5']]\n    },\n    {\n        id: 'bed, trying to remember 5',\n        enter_message: `\n        Such strange poetry in these numbers.\n        <br/><br/>\n        You know they must mean <i>something.</i>\n        <br/><br/>\n        Katya was brilliant, after all.\n        <br/><br/>\n        Sometimes frighteningly so.`,\n        transitions: [\n            [['remember', 'Katya'], 'bed, trying to remember 6']]\n    },\n    {\n        id: 'bed, trying to remember 6',\n        enter_message: `\n        She was your advisor.\n        <br/><br/>\n        But she treated you like family.\n        <br/><br/>\n        You miss her.\n        <br/><br/>\n        <div class=\"interp\">\n        <i>\"Go back to sleep, my dear.\n        <br/><br/>\n        Number Twelve can wait til morning,\"</i> you imagine she'd say.\n        </div>`,\n        transitions: [\n            [['lie', 'down'], 'bed, lying down 1']]\n    },\n    {\n        id: 'bed, lying down 1',\n        enter_message: `\n        Yes, no reason to be up now.\n        <br/><br/>\n        You can update your notes first thing tomorrow.\n        <br/><br/>\n        You slide back under the blankets. The pre-spring breeze cools your face.`,\n        transitions: [\n            [['sleep', 'until', 'sunrise'], 'bed, sleeping 2']],\n        interpretations: {\n            'bed, trying to remember 1': [{'add': 'forgotten'}],\n            'bed, trying to remember 2': [{'add': 'forgotten'}],\n            'bed, trying to remember 3': [{'add': 'forgotten'}],\n            'bed, trying to remember 4': [{'add': 'forgotten'}],\n            'bed, trying to remember 5': [{'add': 'forgotten'}]\n        }\n    },\n    {\n        id: 'bed, sleeping 2',\n        enter_message: `You dream of<br /><br />\n        <div class=\"alien-interp\"><i>\n        calamity\n        <br/><br/>\n        </i></div>\n        <div class=\"interp\">\n        a <i>shattered mirror</i>\n        <br/><br/>\n        an <i>ice-covered mountain</i>\n        <br/><br/>\n        and <i>her voice.</i>\n        </div>`,\n        transitions: [\n            [['awaken'], 'bed, awakening 2']]\n    },\n    {\n        id: 'bed, awakening 2',\n        enter_message: `You awaken in your bed again.`,\n        transitions: [\n            [['sit', 'up'], 'bed, sitting up 2']],\n        interpretations: {\n            'bed, sleeping 1': [{'add': 'forgotten'}],\n            'bed, awakening 1': [{'add': 'forgotten'}],\n            'bed, sitting up 1': [{'add': 'forgotten'}],\n            'bed, trying to remember 1': [{'add': 'forgotten'}],\n            'bed, trying to remember 2': [{'add': 'forgotten'}],\n            'bed, trying to remember 3': [{'add': 'forgotten'}],\n            'bed, trying to remember 4': [{'add': 'forgotten'}],\n            'bed, trying to remember 5': [{'add': 'forgotten'}],\n            'bed, trying to remember 6': [{'add': 'forgotten'}],\n            'bed, lying down 1': [{'add': 'forgotten'}],\n            'bed, sleeping 2': [{'add': 'forgotten'}]\n        }\n    },\n    {\n        id: 'bed, sitting up 2',\n        enter_message: `As you do, the first ray of sun sparkles through the trees, hitting your face. Your alcove begins to come to life.`,\n        handle_command: wrap_handler(function*(parser: CommandParser) {\n            let look_consumer = this.make_look_consumer([\n                [['around'], 'alcove, general'],\n                [['at', 'myself'], 'self, 1']\n            ])\n\n            let other_consumer = wrap_handler(function*(parser: CommandParser) {\n                yield parser.consume_option([annotate(['approach'], {\n                    enabled: ['alcove, general', 'self, 1'].every(p => this.state.has_regarded[p]), //this.state.has_regarded['alcove, general'],\n                    display: DisplayEltType.keyword\n                })]);\n                yield parser.consume_filler(['the', 'desk']);\n                yield parser.done();\n\n                return this.transition_to('desk, sitting down');\n            })\n\n            return combine.call(this, parser, [look_consumer, other_consumer]);\n        }),\n        dest_oms: ['desk, sitting down']\n    },\n    {\n        id: 'desk, sitting down',\n        enter_message: `You pace across the grass and take your seat at the leather-backed study chair.\n        <br /><br />\n        On the desk is a large parchment envelope, bound in twine.`,\n        handle_command: wrap_handler(function*(parser: CommandParser) {\n            let look_consumer = this.make_look_consumer([\n                [['at', 'the', 'envelope'], 'alcove, envelope'],\n                [['around'], 'alcove, general'],\n                [['at', 'myself'], 'self, 1']]);\n\n            let open_consumer = wrap_handler(function*(parser: CommandParser) {\n                yield parser.consume_option([\n                    annotate(['open'], {\n                        enabled: this.state.has_regarded['alcove, envelope'] || false,\n                        display: DisplayEltType.keyword\n                    })\n                ]);\n\n                yield parser.consume_filler(['the']);\n                yield parser.consume_filler(['envelope']);\n                yield parser.done();\n\n                return this.transition_to('desk, opening the envelope');\n            });\n\n            return combine.call(this, parser, [\n                look_consumer,\n                open_consumer\n            ]);\n        }),\n        dest_oms: ['desk, sitting down', 'desk, opening the envelope']\n\n\n        // transitions: [\n        //     [['open', 'the', 'envelope'], 'desk, opening the envelope']]\n    },\n    {\n        id: 'desk, opening the envelope',\n        enter_message: `You undo the twine, leaving it in a loop on the desk.\n        <br /><br />\n        You unfold the envelope’s flap.\n        <br /><br />\n        It’s empty.`,\n        transitions: [\n            [['what?'], 'desk, reacting']]\n    },\n    {\n        id: 'desk, reacting',\n        enter_message: `\n        Empty?\n        <br/><br/>\n        No, it can't be empty.\n        <br/><br/>\n        You closed it up last night, bound it in twine and went to sleep.\n        <br/><br/>\n        <i>Empty?</i>`,\n        transitions: [\n            [['try', 'to', '~*remember'], null],\n            [['try', 'to', '*understand'], 'desk, trying to understand 1']]\n    },\n    {\n        id: 'desk, trying to understand 1',\n        enter_message: `\n        Years of work.\n        <br/><br/>\n        Sequence Number Twelve.\n        </br><br/>\n        How does it go?`,\n        handle_command: wrap_handler(function*(parser: CommandParser) {\n            const r = [\n                [9735, 4130, 3261],\n                [3538, 8177, 3424],\n                [6930, 3134, 2822]\n            ];\n\n            for (let i = 0; i < 3; i++){\n                let options = [];\n                for (let j = 0; j < 3; j++){\n                    let n = r[i][j]\n                    let opt = annotate([n.toString() + '?'], {\n                        display: DisplayEltType.filler\n                    });\n                    options.push(opt);\n                }\n                yield parser.consume_option(options);\n            }\n            yield parser.done();\n\n            return this.transition_to('desk, trying to understand 2');\n        }),\n        dest_oms: ['desk, trying to understand 2']\n\n    },\n    {\n        id: 'desk, trying to understand 2',\n        enter_message: `        \n        A panic comes over you. Without your notes, how will you continue your work?\n        <br /><br />\n        How will you possibly understand? How will you honor Katya’s memory?`,\n        transitions: [\n            [['*consider', 'the', 'sense of', '&panic'], 'desk, considering the sense of panic']]\n    },\n    {\n        id: 'desk, considering the sense of panic',\n        enter_message: `<div class=\"interp\">\n        Katya used to say that panic was like slipping down an ice-covered mountain face.\n        <br /><br />\n        It throws one particular path into relief: the path to the bottom.\n        </div>`,\n        transitions: [\n            [['search', 'for', 'the', 'notes'], 'desk, searching for the notes']]\n    },\n    {\n        id: 'desk, searching for the notes',\n        enter_message: `You look in the envelope again.\n        <br /><br />\n        You look in the grass under the desk, under the chair.\n        <br /><br />\n        You strip your bed, finding nothing within the folds.\n        <br /><br />\n        <div class=\"interp\">\n        You can feel yourself slipping down an icy hill.\n        </div>`,\n        transitions: [\n            [['slip', 'further'], 'grass, slipping further']]\n    },\n    {\n        id: 'grass, slipping further',\n        enter_message: `Thoughts of dread, of a terrible, empty future, fill your mind.\n        <br /><br />\n        You curl up on the grass beneath you, holding yourself.`,\n        handle_command: wrap_handler(function* (parser: CommandParser) {\n            yield parser.consume_exact(['consider']);\n            yield parser.consume_filler(['the']);\n            yield parser.consume_filler(['sense', 'of']);\n            yield parser.consume_option([\n                set_enabled(['panic'], false),\n                set_enabled(['dread'], true)\n            ]);\n            yield parser.done();\n            return this.transition_to('grass, considering the sense of dread');\n        }),\n        dest_oms: ['grass, considering the sense of dread']\n    },\n    {\n        id: 'grass, considering the sense of dread',\n        enter_message: `<div class=\"interp\">\n        <i>\"Catch your breath, dear,\"</i> Katya would say. <i>\"The mountain, the ice, they are here to tell you something.\"</i>\n        </div>`,\n        transitions: [\n            [['tell', 'me', 'what?'], 'grass, asking 1']]\n    },\n    {\n        id: 'grass, asking 1',\n        enter_message: `<div class=\"interp\">\n        <i>\"That you are capable of a great deal of care, my dear.\n        <br /><br />\n        That your capacity to experience meaning is as energetic as a body sliding down a mountain.\"</i>\n        </div>`,\n        transitions: [\n            [['what', 'should', 'I', 'do?'], 'grass, asking 2']]\n    },\n    {\n        id: 'grass, asking 2',\n        enter_message: `<div class=\"interp\"><i>\n        \"Judge the direction of gravity. Judge the slickness of the ice.\n        <br /><br />\n        Survey the horizon.\n        <br /><br />\n        And then, choose where to go.\"\n        </i></div>`,\n        transitions: [\n            [['begin', '*interpretation'], 'alcove, beginning interpretation']]\n    },\n    {\n        id: 'alcove, beginning interpretation',\n        enter_message: `\n        <div class=\"face-of-it\">\n        A nervous energy buzzes within your mind.\n        <br/><br/>\n        </div>\n        <div class=\"interp-alcove-1\">\n        Care. Orientation. Like gravity binds a body to the earth, your vulnerability binds you to a sense of meaning within the world. You have a <i>compass</i>.\n        <br/><br/>\n        </div>\n        <div class=\"face-of-it\">\n        Your notes are gone.\n        <br/><br/>\n        </div>\n        <div class=\"interp-alcove-2\">\n        Your effort to organize and understand everything Katya taught you over the years. If your notes are truly gone, it is a great setback.\n        <br/><br/>\n        But the ice is not impossibly slick; the rock face not impossibly sheer. You have your mind. She still whispers to you, even now, <i>my dear.</i>\n        <br/><br/>\n        </div>\n        <div class=\"face-of-it\">\n        You are alone in a grassy alcove in the forest.\n        </div>\n        <div class=\"interp-alcove-3\">\n        <br/>\n        Indeed. And perhaps it is time to leave. To venture forth from the confines of this sanctuary you have constructed.\n        <br/><br/>\n        Your view of the horizon is occluded by the trees from in here. Set out, seeking <i>new vantages.</i>\n        </div>`,\n        handle_command: wrap_handler(function* (parser: CommandParser) {\n            let {interp_step = 0} = this.get_om_state('alcove, beginning interpretation');\n\n            let next_interp = () => ({\n                world: this.update({\n                    om_state: {\n                        ['alcove, beginning interpretation']: {\n                            interp_step: interp_step + 1\n                        }\n                    }\n                })\n            });\n\n            let judge_consumer = wrap_handler(function*(parser: CommandParser) {\n                yield parser.consume_option([annotate(['judge'], {\n                    display: DisplayEltType.keyword,\n                    enabled: interp_step < 2})]);\n\n                yield parser.consume_option([\n                    annotate(['the', 'direction', 'of', 'gravity'], {enabled: interp_step === 0}),\n                    annotate(['the', 'slickness', 'of', 'the', 'ice'], {enabled: interp_step === 1}),\n                ]);\n\n                yield parser.done();\n\n                return next_interp();\n            });\n\n            let survey_consumer = wrap_handler(function*(parser: CommandParser) {\n                yield parser.consume_option([annotate(['survey'], {\n                    display: DisplayEltType.keyword,\n                    enabled: interp_step === 2\n                })]);\n\n                yield parser.consume_filler(['the', 'horizon']);\n                yield parser.done();\n\n                return next_interp();\n            });\n\n            let end_consumer = wrap_handler(function*(parser: CommandParser) {\n                if (interp_step < 3) {\n                    yield parser.invalidate();\n                }\n\n                yield parser.consume_filler(['end']);\n                yield parser.consume_exact(['interpretation']);\n                yield parser.done();\n\n                return this.transition_to('alcove, ending interpretation');\n            });\n\n            return combine.call(this, parser, [\n                judge_consumer,\n                survey_consumer,\n                end_consumer]);\n        }),\n        dest_oms: ['alcove, ending interpretation'],\n\n        interpret_history(history_elt: VenienceWorldInterstitialUpdateResult): HistoryInterpretationOp {\n            let hist_om = history_elt.world.current_om();\n            if (hist_om === 'alcove, beginning interpretation') {\n                let {interp_step: hist_interp_step = 0} = history_elt.world.get_om_state('alcove, beginning interpretation');    \n                if (hist_interp_step === 0) {\n                    let {interp_step = 0} = this.get_om_state('alcove, beginning interpretation');\n                    if (interp_step > 0) {\n                        return [{'add': `interp-alcove-${interp_step}-enabled`}];\n                    }\n                }\n            }\n        }\n    },\n    {\n        id: 'alcove, ending interpretation',\n        enter_message: `A sense of purpose exists within you. It had been occluded by the panic, but you can feel it there, now.\n        <br /><br />\n        You do not know precisely what awaits you, out there. You have slept and worked within this alcove for such a long time. You are afraid to leave.\n        <br /><br />\n        But your sense of purpose compels you. To go. To seek. To try to understand.`,\n        transitions: [\n            [['enter', 'the', 'forest'], 'alcove, entering the forest']]\n    },\n    {\n        id: 'alcove, entering the forest',\n        enter_message: `What lies within the forest, and beyond? What will it be like, out there?`,\n        transitions: [[['continue'], 'title']]\n    },\n    {\n        id: 'title',\n        enter_message: `VENIENCE WORLD\n        <br />\n        <br />\n        An Interactive Fiction by Daniel Spitz`,\n        transitions: [[['continue'], 'alone in the woods']]\n    }\n];\n\nlet prologue_perceptions: () => Perception[] = () => [\n    {\n        id: 'alcove, general',\n        content: `\n        You turn and dangle your knees off the bed. Your feet brush against the damp grass on the ground.\n        <br /><br />\n        You see your desk and chair a few paces away, in the center of the alcove.\n        <br /><br />\n        On all sides you are surrounded by trees.`\n    },\n    {\n        id: 'self, 1',\n        content: `\n        You are wearing a perfectly dignified pair of silk pajamas.`\n    },\n    {\n        id: 'alcove, envelope',\n        content: `\n        You keep your research in this thick envelope.\n        <br/><br/>\n        You've been analyzing Katya's work for years now.\n        <br/><br/>\n        Your career is built in reverence of hers.`\n    }\n];\n\nexport default {\n    observer_moments: prologue_oms,\n    perceptions: prologue_perceptions\n};\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/venience/chapters/00_prologue.ts","import {\n    HistoryInterpretationOp\n} from '../../commands';\n\nimport {\n    ObserverMoment,\n    ObserverMomentID,\n    Perception,\n    PerceptionID\n} from '../observer_moments';\n\nimport {\n    wrap_handler,\n    VenienceWorld,\n    VenienceWorldCommandResult,\n    VenienceWorldInterstitialUpdateResult,\n    VenienceWorldState\n} from '../venience_world';\n\nimport {\n    tokenize,\n    untokenize,\n    wrap_in_div\n} from '../../text_tools';\n\nimport {\n    set_enabled,\n    is_enabled,\n    annotate,\n    Annotatable,\n    FuckDict,\n    infer_literal_array\n} from '../../datatypes';\n\nimport {\n    CommandParser,\n    DisplayEltType,\n    AMatch,\n    combine\n} from '../../parser';\n\n\nlet ch1_oms: () => ObserverMoment[] = (() => {\n    type TangleContention = (\n        'tangle, 1' |\n        'tangle, 2' |\n        'tangle, 3'\n    );\n\n    type InterpAction = (\n        'beginning interpretation' |\n        { 'considering a fragment': TangleContention } |\n        { 'reifying a fragment': TangleContention, correctly: boolean } |\n        'ending interpretation'\n    );\n\n    function is_considering(a: InterpAction): a is {'considering a fragment' : TangleContention} {\n        return typeof a === 'object' && <any>a['considering a fragment'] !== undefined;\n    }\n\n    function is_reifying(a: InterpAction): a is {'reifying a fragment' : TangleContention, correctly: boolean} {\n        return typeof a === 'object' && <any>a['reifying a fragment'] !== undefined;\n    }\n\n    type InterpState = {\n        prev_interp_action: InterpAction\n        index: number,\n        begin_tag: number\n    };\n\n    const om_id_2_contention: {[K in ObserverMomentID]?: ('tangle, 1' | 'tangle, 2' | 'tangle, 3')} = {\n        'tower, peak': 'tangle, 2',\n        'woods, tangle': 'tangle, 1',\n        'woods, clearing': 'tangle, 3'\n        // 'woods, clearing 2': 'tangle, 3',\n        // 'woods, clearing 3': 'tangle, 3'\n    };\n\n    let make_tangle_consumer = (begin_enabled=true) => wrap_handler(function*(parser: CommandParser) {\n        if (this.state.has_understood[om_id_2_contention[this.current_om()]]) {\n            yield parser.invalidate();\n        }\n\n        let {\n            prev_interp_action = 'ending interpretation',\n            index = 0,\n            begin_tag = -1\n        }: InterpState = this.get_current_om_state();\n\n        let begin_consumer = wrap_handler(function*(parser: CommandParser) {\n            if (prev_interp_action !== 'ending interpretation') {\n                yield parser.invalidate();\n            }\n            yield parser.consume_option([\n                annotate(['begin'], {\n                    display: DisplayEltType.filler,\n                    enabled: begin_enabled\n                })]);\n            yield parser.consume_exact(['interpretation']);\n\n            // Begin message\n\n            // Depending on\n            // How many times you have begun an interpretation?\n            let message: HTMLElement;\n            if (!this.state.has_understood['tangle, 1']) {\n                message = wrap_in_div(`\n                You have all three fragments.\n                <br/><br/>\n                Considered together, their words rouse a sense of wonder in you.\n                <br/><br/>\n                You are determined to understand them.`);\n            } else if (!this.state.has_understood['tangle, 2']) {\n                message = wrap_in_div(`What did Katya mean?`);\n            } else {                \n                message = wrap_in_div(`The words beckon you.`);\n            }\n            return {\n                world: this.update({\n                    om_state: {\n                        [this.current_om()]: {\n                            prev_interp_action: 'beginning interpretation',\n                            index: index + 1,\n                            begin_tag: index\n                        }\n                    }\n                }, ['prev_interp_action']),\n                message\n            }\n        \n        });\n\n        let end_consumer = wrap_handler(function*(parser: CommandParser) {\n            if (prev_interp_action === 'ending interpretation') {\n                yield parser.invalidate();\n            }\n\n            yield parser.consume_filler(['end']);\n            yield parser.consume_exact(['interpretation']);\n            yield parser.done()\n\n            let world_update: VenienceWorldState = {\n                om_state: {\n                    [this.current_om()]: {\n                        prev_interp_action: 'ending interpretation',\n                        index: index + 1\n                    }\n                }\n            };\n\n            let message: string;\n\n            // check if they successfully reified the correct contention\n            if (is_reifying(prev_interp_action) && prev_interp_action.correctly) {\n                let understood = om_id_2_contention[this.current_om()];\n                world_update.has_understood = {\n                    [understood]: true\n                };\n\n                // TODO: different messages depending on:\n                // Where you are\n                // Which step of the interpretation you're up to\n                if (understood === 'tangle, 1') {\n                    message = `\n                    <div class=\"interp\"><i>\n                    \"You are beginning to understand, my dear.\n                    <br/><br/>\n                    Keep going.\"\n                    </i></div>`;\n                } else if (understood === 'tangle, 2') {\n                    message = `\n                    <div class=\"interp\"><i>\n                    \"Indeed.\n                    <br/><br/>\n                    Don't stop now. Follow the thread to its end.\"\n                    </i></div>`;\n                } else {\n                    message = `\n                    You feel, once again, as though the world around you has changed.\n                    <br/><br/>\n                    Your understanding encompasses more than the space around you, the trees, your body.\n                    <br/><br/>\n                    It is further comprised by your path through that space,\n                    <br/><br/>\n                    the way in which you navigate it over time,\n                    <br/><br/>\n                    the way your feelings change to reflect the circumstances.\n                    <br/><br/>\n                    <div class=\"interp\"><i>\n                    \"You are writing your story now, my dear.\n                    <br/><br/>\n                    And reading it too.\n                    <br/><br/>\n                    Where will you go?\"\n                    </i></div>`;\n                }\n            } else {\n                message = `\n                There must be more to understand.`;\n            }\n\n            return {\n                world: this.update(world_update, ['prev_interp_action']),\n                message: wrap_in_div(message)\n            };\n        });\n\n        let consider_consumer = wrap_handler(function*(parser: CommandParser) {\n            if (prev_interp_action === 'ending interpretation') {\n                yield parser.invalidate();\n            }\n            yield parser.consume_option([\n                annotate(['consider'], {\n                    display: DisplayEltType.keyword,\n                    enabled: !is_reifying(prev_interp_action) || !prev_interp_action.correctly\n                })]);\n            yield parser.consume_filler(['the']);\n\n            let prev_contention: string = null;\n            if (is_considering(prev_interp_action)){\n                prev_contention = prev_interp_action['considering a fragment'];\n            } else if (is_reifying(prev_interp_action)) {\n                prev_contention = prev_interp_action['reifying a fragment'];\n            }\n\n            let choice_str: string = yield parser.consume_option([\n                set_enabled(['first', 'fragment'], !this.state.has_understood['tangle, 1'] && prev_contention !== 'tangle, 1'),\n                set_enabled(['second', 'fragment'], !this.state.has_understood['tangle, 2'] && prev_contention !== 'tangle, 2'),\n                set_enabled(['third', 'fragment'], !this.state.has_understood['tangle, 3'] && prev_contention !== 'tangle, 3')\n            ]);\n            let choice = tokenize(choice_str)[0][0];\n\n            yield parser.done();\n\n            let choice_2_contention: {[K: string]: 'tangle, 1' | 'tangle, 2' | 'tangle, 3'} = {\n                'first': 'tangle, 1',\n                'second': 'tangle, 2',\n                'third': 'tangle, 3'\n            };\n\n            let x: Perception = VenienceWorld.perceptions[choice_2_contention[choice]]\n\n            return {\n                world: this.update({\n                    om_state: {\n                        [this.current_om()]: {\n                            prev_interp_action: {\n                                'considering a fragment': choice_2_contention[choice]\n                            },\n                            index: index + 1\n                        }\n                    }\n                }, ['prev_interp_action']),\n                message: wrap_in_div(`\n                The ${choice} fragment reads:\n                <br/><br/>\n                ${VenienceWorld.perceptions[choice_2_contention[choice]].content}`)\n            };\n        });\n\n        let reify_consumer = wrap_handler(function*(parser: CommandParser) {\n            if (!is_considering(prev_interp_action)) {\n                yield parser.invalidate();\n                return;\n            }\n\n            yield parser.consume_exact(['reify']);\n            yield parser.consume_filler(['the']);\n            \n            const contentions = infer_literal_array(\n                'tangle, 1',\n                'tangle, 2',\n                'tangle, 3'\n            )\n\n            type ContentionID = typeof contentions[number];\n\n            let contention_2_option: {[K in ContentionID]: string[]} = {\n                'tangle, 1': ['tangle'],\n                'tangle, 2': ['outside', 'vantage'],\n                'tangle, 3': ['dance']\n            };\n\n            let choice = yield parser.consume_option(contentions.map(c =>\n                set_enabled(contention_2_option[c], c === prev_interp_action['considering a fragment'])));\n\n            yield parser.done();\n\n            let message: HTMLElement;\n\n            let correctly = prev_interp_action['considering a fragment'] === om_id_2_contention[this.current_om()];\n\n            if (prev_interp_action['considering a fragment'] === 'tangle, 2') {\n                correctly = correctly && this.state.has_understood['tangle, 1'];\n            } else if (prev_interp_action['considering a fragment'] === 'tangle, 3') {\n                correctly = correctly && this.state.has_understood['tangle, 2'];\n            }\n            \n            if (correctly) {\n                // all the work gets done in the interpret history bit\n            } else {\n                // TODO: different messages depending on\n                // Where you are\n                // Which thing you tried to reify\n                if (prev_interp_action['considering a fragment'] !== om_id_2_contention[this.current_om()]) {\n                    message = wrap_in_div(`\n                    You struggle to connect \"the ${choice}\" to your present environment and circumstance.`);\n                } else {\n                    if (prev_interp_action['considering a fragment'] === 'tangle, 2') {\n                        message = wrap_in_div(`\n                        You think the viewing tower might correspond to \"the ${choice}\".\n                        <br/><br/>\n                        However, the first fragment mentions a \"tangle\", which you still don't entirely understand.\n                        <br/><br/>\n                        Until you do, it will be hard to say what this ${choice} helps to elucidate.`);\n                    } else if (prev_interp_action['considering a fragment'] === 'tangle, 3') {\n                        // If they have visited both the tangle and viewing tower\n                        let must_have_visited: ObserverMomentID[] = ['woods, tangle', 'tower, peak'];\n                        if (must_have_visited.every(x => this.state.experiences.includes(x))) {\n                            let incomplete_msg_parts: string[] = [];\n                            if (!this.state.has_understood['tangle, 1']) {\n                                incomplete_msg_parts.push(`the first fragment's \"tangle\"`)\n                            }\n                            if (!this.state.has_understood['tangle, 2']) {\n                                incomplete_msg_parts.push(`the second fragment's \"outside vantage\"`);\n                            }\n\n                            let incomplete_msg = incomplete_msg_parts.join(' or ');\n\n                            message = wrap_in_div(`\n                            The idea of \"the ${choice}\" is beginning to feel familiar, with all your motion in and out of the twisting woods, up and down the viewing tower.\n                            <br/><br/>\n                            But you still don't entirely understand ${incomplete_msg}.\n                            <br/><br/>\n                            Until you do, it will be hard to say why this ${choice} is worth returning to.`);\n                        } else {\n                            message = wrap_in_div(`\n                            You struggle to connect \"the ${choice}\" to your present environment and circumstance.`);\n                        }\n                    }\n                }\n            }\n\n            return {\n                world: this.update({\n                    om_state: {\n                        [this.current_om()]: {\n                            prev_interp_action: {\n                                'reifying a fragment': prev_interp_action['considering a fragment'],\n                                correctly\n                            },\n                            index: index + 1\n                        }\n                    }\n                }, ['prev_interp_action']),\n                message\n            };\n\n        });\n\n        return combine.call(this, parser, [\n            begin_consumer,\n            reify_consumer,\n            consider_consumer,\n            end_consumer\n        ]);\n    });\n\n    function tangle_interpreter(this: VenienceWorld, history_elt: VenienceWorldInterstitialUpdateResult): HistoryInterpretationOp {\n        let h_world = history_elt.world;\n        if (h_world.current_om() === this.current_om() && history_elt.world.current_om() in om_id_2_contention) {\n            let {\n                prev_interp_action = 'ending interpretation',\n                index = 0,\n                begin_tag = -1\n            }: InterpState = this.get_current_om_state();\n\n            let {\n                prev_interp_action: h_prev_inter_action = 'ending interpretation',\n                index: h_index = 0,\n                begin_tag: h_begin_tag = -1\n            }: InterpState = h_world.get_current_om_state();\n            \n            if (prev_interp_action === 'ending interpretation') {\n                if (!this.state.has_understood[om_id_2_contention[this.current_om()]]) {\n                    if (h_index > begin_tag + 1 && h_index < index) {\n                        return [{'add': 'forgotten'}];\n                    }\n                }\n            } else if (is_considering(prev_interp_action)) {\n                // forget back to last 'beginning interpretation'\n                \n                if (h_index > begin_tag + 1 && h_index < index) {\n                    return [{'add': 'forgotten'}];\n                }\n            } else if (is_reifying(prev_interp_action)) {\n                if (prev_interp_action.correctly) {\n                    // find most recent considering (it will be index - 1)\n                    // add reify-tangle-N class\n                    if (h_index === index - 1) {\n                        let n: number;\n                        if (prev_interp_action['reifying a fragment'] === 'tangle, 1') {\n                            n = 1;\n                        } else if (prev_interp_action['reifying a fragment'] === 'tangle, 2') {\n                            n = 2;\n                        } else {\n                            n = 3;\n                        }\n                        return [{'add': `reif-tangle-${n}-enabled`}];\n                    }\n                }\n            }\n        }\n    }\n\n    return [\n        {\n            id: 'alone in the woods',\n            enter_message: `Chapter 1 - A Sense Of Direction\n            <br />\n            <br />\n            You are alone in the woods in midmorning.`,\n            handle_command: wrap_handler(function*(parser: CommandParser) {\n                let {has_travelled = []} = this.get_om_state('alone in the woods');\n\n                let look_consumer = this.make_look_consumer([\n                    [['around'], 'forest, general'],\n                    [['at', 'myself'], 'self, 2']\n                ]);\n\n                let go_consumer = wrap_handler(function*(parser: CommandParser){\n                    \n                    yield parser.consume_option([\n                        annotate(['go'], {\n                            enabled: (has_travelled.length < 4\n                                      && this.state.has_regarded['self, 2']\n                                      && this.state.has_regarded['forest, general']),\n                            display: DisplayEltType.keyword\n                        })]);\n                    \n                    let dir = yield parser.consume_option([\n                        ['north?'],\n                        ['east?'],\n                        ['south?'],\n                        ['west?']\n                    ].map(d => set_enabled(d, has_travelled.indexOf(d[0]) === -1)));\n                    yield parser.done();\n\n                    let message: HTMLElement;\n                    if (has_travelled.length === 0){\n                        message = wrap_in_div(`\n                        You take a few steps ${dir.slice(0, -1)}.\n                        <br/><br/>\n                        Your surroundings appear similar.\n                        <br/><br/>\n                        Perhaps this isn't the right way.`);\n                    } else if (has_travelled.length === 1) {\n                        message = wrap_in_div(`\n                        You feel no different after the second attempt to advance.\n                        <br/><br/>\n                        You have moved, but not meaningfully.\n                        `);\n                    } else if (has_travelled.length === 2) {\n                        message = wrap_in_div(`\n                        A swirling cocktail of\n                        <br/><br/>\n                        doubt,\n                        <br/><br/>\n                        confusion\n                        <br/><br/>\n                        and disorientation\n                        <br/><br/>\n                        begins to set in.\n                        `);\n                    } else if (has_travelled.length === 3) {\n                        message = wrap_in_div(`\n                        You are lost in the woods in midmorning.\n                        <br/><br/>\n                        You miss the security of your alcove.\n                        <br/><br/>\n                        <div class=\"alien-interp\">\n                        <i>\"You were a fool to leave\n                        <br/><br/>\n                        too fragile\n                        <br/><br/>\n                        too sensitive\n                        <br/><br/>\n                        to find your own way.\"</i>\n                        </div>`)\n                    }\n                    return {\n                        world: this.update({\n                            om_state: {\n                                ['alone in the woods']: {\n                                    has_travelled: [...has_travelled, dir]\n                                }\n                            }\n                        }),\n                        message\n                    };\n                });\n\n                let understand_consumer = wrap_handler(function*(parser: CommandParser) {\n                    if (!(has_travelled.length >= 4)) {\n                        yield parser.invalidate();\n                    }\n                    yield parser.consume_filler(['try']);\n                    yield parser.consume_filler(['to']);\n                    yield parser.consume_exact(['understand']);\n                    yield parser.done();\n\n                    return this.transition_to('woods, trying to understand');\n                });\n\n                return combine.call(this, parser, [\n                    look_consumer,\n                    go_consumer,\n                    understand_consumer]);\n            }),\n            dest_oms: ['alone in the woods', 'woods, trying to understand']\n        },\n        {\n            id: 'woods, trying to understand',\n            enter_message: `\n            You are overwhelmed by the number of indistinct options.\n            <br/><br/>\n            The trees surrounding you are like a wall, made of irrelevance and uncertainty rather than impermeability.\n            <br/><br/>\n            You are unsure of what your heading should be.`,\n            transitions: [\n                [['*consider', 'the', 'sense of', '&uncertainty'], 'woods, considering the sense of uncertainty']\n            ]\n        },\n        {\n            id: 'woods, considering the sense of uncertainty',\n            enter_message: `\n            <div class=\"interp\">\n            Katya used to say that a circle, when considered in relation to nothing,\n            is about as useful as a point, a dot, considered in the same context.\n            <br/><br/>\n            <i>“It is only important that a circle is circular when something other than the circle exists in terms of it,”</i>\n            she’d say, chuckling as you wracked your brain to understand.\n            </div>`,\n            transitions: [\n                [['where', 'should', 'I', 'go?'], 'woods, asking 1']\n            ]\n        },\n        {\n            id: 'woods, asking 1',\n            enter_message: `\n            <div class=\"interp\">\n            <i>\"I certainly can’t answer that, my dear.\n            <br/><br/>\n            But I assure you, you can do this.\"</i>\n            </div>`,\n            transitions: [\n                [['what', 'should', 'I', 'do?'], 'woods, asking 2']\n            ]\n        },\n        {  \n            id: 'woods, asking 2',\n            enter_message: `\n            <div class=\"interp\">\n            <i>\"Judge the circle in terms of the world.\n            <br/><br/>\n            Question its circlehood.\n            <br/><br/>\n            Take the only path forward.\"</i>\n            </div>`,\n            transitions: [\n                [['begin', '*interpretation'], 'woods, beginning interpretation']\n            ]\n        },\n        {\n            id: 'woods, beginning interpretation',\n            enter_message: `\n            You are surrounded in all directions by the forest.\n            <br/><br/>\n            <div class=\"interp-woods-1\">\n            The circle that is the forest encloses you.\n            <br/><br/>\n            It separates you from the world.\n            <br/><br/>\n            </div> \n            You are unsure of which direction to go.\n            <br/><br/>\n            <div class=\"interp-woods-2\">\n            It is primarily important that the occluding wood is a boundary, not that it is circular in shape.\n            <br/><br/>\n            <i>\"The circularity is a mere artifact of our Euclidean heritage, my dear.\"</i>\n            <br/><br/>\n            A boundary separates you from the answers you seek.\n            <br/><br/>\n            </div>\n            You feel lost.\n            <div class=\"interp-woods-3\">\n            <br/>\n            A circle may offer a continuum of freedom, and with it, an infinity of wrong ways.\n            <br/><br/>\n            But what of an enclosing boundary?\n            <br/><br/>\n            You’re either within it, or you’re free of it.\n            <br/><br/>\n            In or Out.\n            <br/><br/>\n            Perhaps there is only a single way forward after all.\n            </div>\n            `,\n            handle_command: wrap_handler(function*(parser: CommandParser){\n                let {interp_step = 0} = this.get_om_state('woods, beginning interpretation');\n\n                let next_interp = () => ({\n                    world: this.update({\n                        om_state: {\n                            ['woods, beginning interpretation']: {\n                                interp_step: interp_step + 1\n                            }\n                        }\n                    })\n                });\n\n                let judge_consumer = wrap_handler(function*(parser: CommandParser) {\n                    yield parser.consume_option([annotate(['judge'], {\n                        display: DisplayEltType.keyword,\n                        enabled: interp_step === 0\n                    })]);\n                    yield parser.consume_filler(['the', 'circle']);\n                    yield parser.consume_filler(['in', 'terms', 'of', 'the', 'world']);\n                    yield parser.done()\n\n                    return next_interp();\n                });\n\n                let question_consumer = wrap_handler(function*(parser: CommandParser) {\n                    yield parser.consume_option([annotate(['question'], {\n                        display: DisplayEltType.keyword,\n                        enabled: interp_step === 1\n                    })]);\n\n                    yield parser.consume_filler(['its', 'circlehood']);\n                    yield parser.done()\n\n                    return next_interp();\n                });\n\n                let take_consumer = wrap_handler(function*(parser: CommandParser) {\n                    yield parser.consume_option([annotate(['take'], {\n                        display: DisplayEltType.keyword,\n                        enabled: interp_step === 2\n                    })]);\n\n                    yield parser.consume_filler(['the', 'only', 'path', 'forward']);\n                    yield parser.done()\n\n                    return next_interp();\n                });\n\n                let end_consumer = wrap_handler(function*(parser: CommandParser) {\n                    if (interp_step < 3) {\n                        yield parser.invalidate();\n                    }\n\n                    yield parser.consume_filler(['end']);\n                    yield parser.consume_exact(['interpretation']);\n                    yield parser.done();\n\n                    return this.transition_to('woods, ending interpretation');\n                });\n\n                return combine.call(this, parser, [\n                    judge_consumer,\n                    question_consumer,\n                    take_consumer,\n                    end_consumer]);\n\n            }),\n            dest_oms: ['woods, beginning interpretation', 'woods, ending interpretation'],\n            interpret_history(history_elt: VenienceWorldInterstitialUpdateResult): HistoryInterpretationOp {\n                if (history_elt.world.current_om() === 'woods, beginning interpretation') {\n                    let {interp_step: hist_interp_step = 0} = history_elt.world.get_om_state('woods, beginning interpretation');\n                    if (hist_interp_step === 0) {\n                        let {interp_step = 0} = this.get_om_state('woods, beginning interpretation');\n                        if (interp_step > 0) {\n                            return [{'add': `interp-woods-${interp_step}-enabled`}];\n                        }\n                    }\n                }\n            }\n        },\n        {\n            id: 'woods, ending interpretation',\n            enter_message: `\n            You haven’t moved an inch.\n            <br/><br/>\n            And yet, the world around you seems to have been reshaped.\n            <br/><br/>\n            The proliferation of possibly-wrong paths forward has collapsed to a single binary choice:`,\n            transitions: [\n                [['*remain', 'within the boundary'], 'woods, considering remaining'],\n                [['~*cross', 'the boundary'], 'woods, crossing the boundary 1']\n            ]\n        },\n        {\n            id: 'woods, considering remaining',\n            enter_message: `or...`,\n            transitions: [\n                [['~*remain', 'within the boundary'], 'woods, considering remaining'],\n                [['*cross', 'the boundary'], 'woods, crossing the boundary 1']]\n        },\n        {\n            id: 'woods, crossing the boundary 1',\n            enter_message: `\n            The particular direction of travel is unimportant.\n            <br/><br/>\n            <div class=\"interp\">\n            <i>\"Our world is one in which most degrees of freedom are accompanied by entropy production;\n            <br/><br/>\n            that is to say, arbitrariness is rarely scarce, my dear.\"</i>\n            <br/><br/>\n            </div>\n            You choose a direction <span class=\"interp-inline\">(Arbitrarily! <i>\"Thanks, <a target=\"_blank\" href=\"https://arxiv.org/abs/cond-mat/0005382\">Dewar</a>!\"</i>)</span> and take it.\n            <br/><br/>\n            The forest around you remains an undifferentiated boundary of New England brush and flora...`,\n            transitions: [\n                [['continue'], 'woods, crossing the boundary 2']],\n            interpretations: {\n                'woods, considering remaining': [{'add': 'forgotten'}]\n            }\n        },\n        {\n            id: 'woods, crossing the boundary 2',\n            enter_message: `\n            ...until it begins to change.\n            <br/><br/>\n            You notice that the brown trunks of oak are sprinkled with the white of birch here and there.\n            <br/><br/>\n            And on the ground, partially covered in leaves, is a fragment of parchment paper.`,\n            handle_command: wrap_handler(function* (parser: CommandParser) {\n                let {\n                    has_taken_note = false\n                } = this.get_current_om_state();\n\n                let fragment_thread = wrap_handler(function*(parser: CommandParser) {\n                    let look_consumer = wrap_handler(function*(parser: CommandParser) {\n                        if (this.state.has_regarded['note fragment']) {\n                            yield parser.invalidate();\n                        }\n\n                        return this.make_look_consumer([\n                            [['at', 'the', 'fragment'], 'note fragment']]).call(this, parser);\n                    });\n                    \n                    let take_consumer = wrap_handler(function*(parser: CommandParser) {\n                        if (!this.state.has_regarded['note fragment'] || has_taken_note) {\n                            yield parser.invalidate();\n                        }\n\n                        yield parser.consume_option([\n                            annotate(['take'], {\n                                display: DisplayEltType.keyword,\n                                enabled: !has_taken_note\n                            })\n                        ]);\n                        yield parser.consume_filler(['it']);\n                        yield parser.done()\n\n                        return {\n                            message: wrap_in_div(`\n                            You pick it up.\n                            <br/><br/>\n                            It's been torn from a full page.\n                            <br/><br/>\n                            You recognize your own loopy scrawl on the parchment paper.\n                            <br/><br/>\n                            Who left it out here? And where are the rest of your notes?`),\n                            world: this.update({\n                                om_state: {\n                                    [this.current_om()] : {\n                                        has_taken_note: true\n                                    }\n                                }\n                            })\n                        };\n                    });\n\n                    let read_consumer = wrap_handler(function*(parser: CommandParser) {\n                        if (!has_taken_note || this.state.has_regarded['tangle, 1']) {\n                            yield parser.invalidate();\n                        }\n                        yield parser.consume_option([\n                            annotate(['read'], {\n                                display: DisplayEltType.keyword,\n                                enabled: !this.state.has_regarded['tangle, 1']\n                            })]);\n                        yield parser.consume_filler(['it']);\n                        yield parser.done();\n\n                        return this.regard('tangle, 1', (msg) => wrap_in_div(`\n                        It's the beginning of a transcript you took.\n                        <br/><br/>\n                        Something Katya said, that you wanted to remember:\n                        <br/><br/>\n                        ${msg}`));\n                    });\n\n                    return combine.call(this, parser, [\n                        look_consumer,\n                        take_consumer,\n                        read_consumer\n                    ]);\n                });\n\n                let consumer = wrap_handler(function*(parser: CommandParser) {\n                    yield parser.consume_option([\n                        annotate(['continue'], {\n                            display: DisplayEltType.keyword,\n                            enabled: this.state.has_regarded['tangle, 1']\n                        })]);\n                    yield parser.done();\n\n                    return this.transition_to('woods, crossing the boundary 3');\n                });\n\n                return combine.call(this, parser, [fragment_thread, consumer]);\n            }),\n            dest_oms: ['woods, crossing the boundary 2', 'woods, crossing the boundary 3']\n        },\n        {\n            id: 'woods, crossing the boundary 3',\n            enter_message: `\n            More and more birch trees appear as your trudge onward.\n            <br/><br/>\n            Another fragment of parchment paper catches your eye on the ground.`,\n            handle_command: wrap_handler(function *(parser: CommandParser) {\n                let take_consumer = wrap_handler(function*(parser: CommandParser) {\n                    if (this.state.has_regarded['tangle, 2']) {\n                        yield parser.invalidate();\n                    }\n\n                    yield parser.consume_option([\n                        annotate(['take'], {\n                            display: DisplayEltType.keyword,\n                            enabled: !this.state.has_regarded['tangle, 2']\n                        })\n                    ]);\n                    yield parser.consume_filler(['the', 'second', 'fragment']);\n                    yield parser.done();\n\n                    return this.regard('tangle, 2', (msg) => wrap_in_div(`\n                    It reads:\n                    <br/><br/>\n                    ${msg}`));\n\n                });\n\n                let continue_consumer = wrap_handler(function*(parser:CommandParser) {\n                    yield parser.consume_option([\n                        annotate(['continue'], {\n                            enabled: Boolean(this.state.has_regarded['tangle, 2']),\n                            display: DisplayEltType.keyword\n                        })]);\n                    yield parser.consume_filler(['up', 'the']);\n                    yield parser.consume_filler(['birch', 'gradient']);\n                    yield parser.done();\n\n                    return this.transition_to('woods, clearing');\n                });\n\n                return combine.call(this, parser, [\n                    take_consumer,\n                    continue_consumer\n                ]);\n            }),\n            dest_oms: ['woods, crossing the boundary 3', 'woods, clearing']\n        },\n        {\n            id: 'woods, clearing',\n            enter_message: `\n            You arrive at a small clearing, surrounded by the parchment-white of birch.\n            <br/><br/>\n            The path forward branches in two:\n            <br/>\n            <blockquote>\n                In one direction, the path narrows and bends sharply behind a roiling wall of birch.\n                <br/><br/>\n                In another, a looming structure of some kind stands beyond the trees.\n            </blockquote>\n            A third note fragment lies on the ground.`,\n            short_enter_message: `\n            You arrive back at the clearing.`,\n            handle_command: wrap_handler(function*(parser: CommandParser) {\n                let take_consumer = wrap_handler(function*(parser: CommandParser) {\n                    if (this.state.has_regarded['tangle, 3']) {\n                        yield parser.invalidate();\n                    }\n\n                    yield parser.consume_option([\n                        annotate(['take'], {\n                            display: DisplayEltType.keyword,\n                            enabled: !this.state.has_regarded['tangle, 3']\n                        })\n                    ]);\n                    yield parser.consume_filler(['the', 'third', 'fragment']);\n                    yield parser.done()\n\n                    return this.regard('tangle, 3', (msg) => wrap_in_div(`\n                    It reads:\n                    <br/><br/>\n                    ${msg}\n                    <br/>\n                    This completes the transcript. The three fragments comprise a full page from your notes.`));\n                });\n\n                let go_consumer = wrap_handler(function*(parser:CommandParser) {\n                    let {prev_interp_action = 'ending interpretation'} : InterpState = this.get_current_om_state();\n\n                    if (prev_interp_action !== 'ending interpretation') {\n                        yield parser.invalidate();\n                    }\n\n                    yield parser.consume_option([\n                        annotate(['proceed'], {\n                            enabled: this.state.has_regarded['tangle, 3'],\n                            display: DisplayEltType.keyword\n                        })]);\n\n                    let go_tangle_consumer = wrap_handler(function*(parser: CommandParser) {\n                        if (!this.state.has_understood['tangle, 3']) {\n                            yield parser.consume_filler(['inward']);\n                            yield parser.consume_filler(['on', 'the']);\n                            yield parser.consume_exact(['narrow', 'path'], DisplayEltType.option);\n                            yield parser.done();\n\n                            return this.transition_to('woods, tangle');\n                        } else {\n                            yield parser.consume_filler(['inward,']);\n                            yield parser.consume_filler(['interrogating']);\n                            yield parser.consume_exact(['my', 'perceptions'], DisplayEltType.option);\n                            yield parser.done();\n\n                            return this.transition_to('inward, 1');\n                        }\n                    });\n                    \n                    let go_tower_consumer = wrap_handler(function*(parser: CommandParser) {\n                        if (!this.state.has_understood['tangle, 3']) {\n                            yield parser.consume_filler(['outward']);\n                            yield parser.consume_filler(['to', 'the']);\n                            yield parser.consume_exact(['looming', 'structure'], DisplayEltType.option);\n                            yield parser.done();\n\n                            return this.transition_to('tower, base');\n                        } else {\n                            yield parser.consume_filler(['outward,']);\n                            yield parser.consume_filler(['seeking']);\n                            yield parser.consume_exact(['the', 'mountain'], DisplayEltType.option);\n                            yield parser.done();\n\n                            return this.transition_to('outward, 1');\n                        }\n                    });\n\n                    return combine.call(this, parser, [go_tangle_consumer, go_tower_consumer]);\n                });\n\n                return combine.call(this, parser, [\n                    take_consumer,\n                    make_tangle_consumer(Boolean(this.state.has_regarded['tangle, 3'])),\n                    go_consumer\n                ]);\n            }),\n            dest_oms: ['woods, clearing', 'woods, tangle', 'tower, base', 'inward, 1', 'outward, 1'],\n            interpret_history: function (this: VenienceWorld, history_elt: VenienceWorldInterstitialUpdateResult): HistoryInterpretationOp {\n                let result: HistoryInterpretationOp = tangle_interpreter.call(this, history_elt) || [];\n\n                let ending_oms: ObserverMomentID[] = [\n                    'inward, 1',\n                    'inward, 2',\n                    'inward, 3',\n                    'inward, 4',\n                    'inward, 5',\n                    'reading the story of charlotte',\n                    'outward, 1',\n                    'outward, 2',\n                    'outward, 3',\n                    'outward, 4',\n                ];\n\n                if (ending_oms.includes(history_elt.world.current_om())) {\n                    result.push({'add': 'forgotten'});\n                } else if (history_elt.world.current_om() === 'woods, clearing') {\n                    if (['inward, 1', 'outward, 1'].some(x => history_elt.world.state.has_visited[x])) {\n                        result.push({'add': 'forgotten'});\n                    }\n                }\n                return result;\n            }\n        },\n        {\n            id: 'woods, tangle',\n            enter_message: `\n            The path inward narrows to form a gap just wide enough to fit your body.\n            <br/><br/>\n            You step carefully along the path, bending around corners, surrounded by parchment-white.\n            <br/><br/>\n            Some ways in, you arrive at a dead end.\n            <br/><br/>\n            You feel as though you have arrived somewhere significant, though you have nowhere to go now but back.`,\n            handle_command: wrap_handler(function*(parser: CommandParser) {\n                let return_consumer = wrap_handler(function*(parser: CommandParser) {\n                    let {prev_interp_action = 'ending interpretation'} : InterpState = this.get_current_om_state();\n\n                    if (prev_interp_action !== 'ending interpretation') {\n                        yield parser.invalidate();\n                    }\n\n                    yield parser.consume_exact(['return']);\n                    yield parser.consume_filler(['to', 'the']);\n                    yield parser.consume_filler(['clearing']);\n\n                    yield parser.done();\n\n                    let dest: ObserverMomentID = 'woods, clearing';\n                \n                    return this.transition_to(dest);\n                });\n\n                return combine.call(this, parser, [make_tangle_consumer(), return_consumer]);\n\n            }),\n            dest_oms: ['woods, tangle', 'woods, clearing'],\n            interpret_history: tangle_interpreter\n        },\n        {\n            id: 'tower, base',\n            enter_message: `\n            As you make your way outward, the trees begin the thin.\n            <br/><br/>\n            You arrive at the base of a wooden viewing tower, erected perfectly among the trees.`,\n            short_enter_message: `\n            You arrive at the viewing tower's base.`,\n            handle_command: wrap_handler(function*(parser: CommandParser) {\n                let look_consumer = this.make_look_consumer([[['at', 'the', 'tower'], 'tangle, tower base']]);\n\n                let ascend_consumer = wrap_handler(function*(parser: CommandParser) {\n                    // Climbs the tower\n                    yield parser.consume_option([\n                        annotate(['ascend'], {\n                            display: DisplayEltType.keyword,\n                            enabled: this.state.has_regarded['tangle, tower base']\n                        })]);\n                    yield parser.consume_filler(['the', 'viewing', 'tower']);\n                    yield parser.done();\n\n                    return this.transition_to('tower, peak');\n                });\n\n                let return_consumer = wrap_handler(function*(parser: CommandParser) {\n                    // Returns to the clearing\n                    yield parser.consume_exact(['return']);\n                    yield parser.consume_filler(['to', 'the']);\n                    yield parser.consume_filler(['clearing']);\n\n                    yield parser.done();\n\n                    let dest: ObserverMomentID = 'woods, clearing';\n\n                    return this.transition_to(dest);\n                });\n\n                return combine.call(this, parser, [look_consumer, ascend_consumer, return_consumer]);\n            }),\n            dest_oms: ['tower, peak', 'woods, clearing']\n        },\n        {\n            id: 'tower, peak',\n            enter_message: `\n            As your feet thud up the heavy stairs, your view begins to change.\n            <br/><br/>\n            You can see over the parchment-white treeline.\n            <br/><br/>\n            The sky streches further and further across the horizon.\n            <br/><br/>\n            You set foot on the top platform.`,\n            short_enter_message: `\n            You climb the stairs and arrive at the tower's top platform.`,\n            handle_command: wrap_handler(function*(parser: CommandParser) {\n                let survey_consumer = wrap_handler(function*(parser: CommandParser) {\n                    yield parser.consume_option([\n                        annotate(['survey'], {\n                            display: DisplayEltType.keyword,\n                            enabled: !this.state.has_regarded['tangle, tower peak']\n                        })]);\n\n                    yield parser.consume_filler(['the', 'horizon']);\n                    yield parser.done();\n\n                    return this.regard('tangle, tower peak');\n                });\n\n                let descend_consumer = wrap_handler(function*(parser: CommandParser) {\n                    let {prev_interp_action = 'ending interpretation'} : InterpState = this.get_current_om_state();\n\n                    if (prev_interp_action !== 'ending interpretation') {\n                        yield parser.invalidate();\n                    }\n\n                    yield parser.consume_exact(['descend']);\n                    yield parser.done();\n\n                    return this.transition_to('tower, base');\n                });\n                \n                return combine.call(this, parser, [\n                    make_tangle_consumer(Boolean(this.state.has_regarded['tangle, tower peak'])),\n                    survey_consumer,\n                    descend_consumer\n                ]);       \n            }),\n            interpret_history: tangle_interpreter,\n            dest_oms: ['tower, base', 'tower, peak'] // , 'tower, base 2'\n        },\n        {\n            id: 'inward, 1',\n            enter_message: `\n            You proceed again into the narrow, winding path within the birch thicket.\n            <br/><br/>\n            The parchment-white trees surrounding you ebb and flow, carving a tangled, wild path to the center.`,\n            transitions: [\n                [['*consider', 'the', 'familiar qualities', 'of', 'birch bark'], 'inward, 2']]\n        },\n        {\n            id: 'inward, 2',\n            enter_message: `\n            It strikes you how <i>parchment-like</i> birch bark is.\n            <br/><br/>\n            It has roughly the same off-white color as your own note paper.\n            <br/><br/>\n            And it often appears embedded with dark, script-like etchings.\n            <br/><br/>\n            <div class=\"interp\"><i>\n            \"Indeed.\n            <br/><br/>\n            Like writing.\"\n            </i></div>`,\n            transitions: [\n            [['begin', '*interpretation'], 'inward, 3']]\n        },\n        {\n            id: 'inward, 3',\n            enter_message: `\n            You are surrounded by a twisting, roiling wall of birch trees.\n            <div class=\"interp-parchment-trees\">\n            <br/>\n            You are surrounded by a meticulous, exhaustive continuum of etched parchment.\n            </div>`,\n            transitions: [\n            [['*consider', 'the', 'second sense', 'of', 'birch bark'], 'inward, 4']]\n        },\n        {\n            id: 'inward, 4',\n            transitions: [\n            [['end', '*interpretation'], 'inward, 5']],\n            interpretations: {\n                'inward, 3': [{add: 'interp-parchment-trees-enabled'}]\n            }\n        },\n        {\n            id: 'inward, 5',\n            enter_message: `\n            <div class=\"interp\">\n            The parchment surrounding you teems with scrawlings of\n            <br/><br/>\n            stories,\n            <br/><br/>\n            transcripts,\n            <br/><br/>\n            annotations,\n            <br/><br/>\n            <i>\n            and interpretations.\n            </i>\n            </div>`,\n            handle_command: wrap_handler(function*(parser: CommandParser) {\n                let {read_state = 0}: {read_state: number} = this.get_current_om_state();\n                \n\n                let apply_read_update = (world=this) => world.update({\n                    om_state: {\n                        [this.current_om()]: {\n                            read_state: read_state + 1\n                        }\n                    }\n                });\n\n                let read_consumer = wrap_handler(function*(parser: CommandParser) {\n                    yield parser.consume_option([\n                        annotate(['read'], {\n                            display: DisplayEltType.keyword,\n                            enabled: true //this.state.has_regarded['forest, parchment trees']\n                        })\n                    ]);\n\n                    let read_0_consumer = wrap_handler(function*(parser: CommandParser) {\n                        yield parser.consume_option([\n                            annotate(['the', 'parchment'], {\n                                display: DisplayEltType.filler,\n                                enabled: read_state === 0\n                            })\n                        ]);\n\n                        yield parser.done();\n\n                        return {\n                            world: apply_read_update(),\n                            message: wrap_in_div(`\n                            <div class=\"interp\">\n                            Your eyes skim over the vast text laid out before you for a moment, searching.\n                            <br/><br/>\n                            Then, you come to rest on one particular story.\n                            </div>`)\n                        };\n                    });\n\n                    let read_1_consumer = wrap_handler(function*(parser: CommandParser) {\n                        if (read_state < 1) {\n                            yield parser.invalidate();\n                        }\n\n                        yield parser.consume_filler(['the', 'story', 'of']);\n                        yield parser.consume_exact(['Charlotte'], DisplayEltType.option);\n\n                        yield parser.done();\n\n                        let result = this.transition_to('reading the story of charlotte');\n                        result.world = apply_read_update(result.world);\n                        return result;\n                    });\n\n                    return combine.call(this, parser, [\n                        read_0_consumer, read_1_consumer\n                    ]);\n\n                });\n\n                return combine.call(this, parser, [read_consumer]);\n\n            }),\n            dest_oms: ['reading the story of charlotte']\n        },\n        {\n            id: 'reading the story of charlotte',\n            enter_message: `\n            <i>You have reached the end of the demo.\n            <br/><br/>\n            Charlotte's story will be told in Chapter 2.\n            <br/><br/>\n            Thanks for playing Venience World!\n            <br/><br/>\n            Feel free to return to the clearing and proceed differently.\n            </i>`,\n            transitions: [\n            [['*return', 'to the', 'clearing'], 'woods, clearing']]\n        },\n        {\n            id: 'outward, 1',\n            enter_message: `\n            You walk back out to the base of the viewing tower, and continue past it,\n            <br/><br/>\n            cutting into the woods where the footpath ends.\n            <br/><br/>\n            As you proceed, the birch trees become sparser, and the oak thickens again.`,\n            transitions: [\n                [['*consider', 'what lies ahead'], 'outward, 2']]\n        },\n        {\n            id: 'outward, 2',\n            enter_message: `\n            <div class=\"interp\"><i>\n            \"An adventure, my dear.\n            <br/><br/>\n            Challenges, the likes of which you have not anticipated.\n            <br/><br/>\n            Opportunities to learn and grow.\"\n            </i></div>`,\n            transitions: [\n                [['begin', '*interpretation'], 'outward, 3']]\n        },\n        (() => {\n            const interp_steps = infer_literal_array(\n                'the calamity',\n                'the shattered mirror',\n                'the ice-covered mountain',\n                'her voice'\n            );\n            type InterpStep = typeof interp_steps[number];\n\n            return<ObserverMoment>{\n                id: 'outward, 3',\n                enter_message: `\n                You remember fragments from your dream last night.\n                <br/><br/>\n                There was\n                <br/><br/>\n                \n                <div class=\"alien-interp\"><i>\n                calamity\n                <br/><br/>\n                </i></div>\n                <div class=\"reif-dream-1\">\n                Katya's death,\n                <br/><br/>\n                and the destruction that her loss wrought on your life\n                <br/><br/>\n                </div>\n                \n                <div class=\"interp\">\n                a <i>shattered mirror</i>\n                <br/><br/>\n                </div>\n                <div class=\"reif-dream-2\">\n                the unexplained scattering of your notes across the land\n                <br/><br/>\n                </div>\n                \n                <div class=\"interp\">\n                an <i>ice-covered mountain</i>\n                <br/><br/>\n                </div>\n                <div class=\"reif-dream-3\">\n                the literal mountain that stands in wait across the river\n                <br/><br/>\n                </div>\n                \n                <div class=\"interp\">\n                and <i>her voice.</i>\n                </div>\n                <div class=\"reif-dream-4\">\n                <br/>\n                and <i>your determination to understand;</i>\n                <br/><br/>\n                to return to the world you left;\n                <br/><br/>\n                to intervene in its unfolding.\n                </div>`,\n                handle_command: wrap_handler(function*(parser: CommandParser) {\n                    let {\n                        has_interpreted = {},\n                        prev_interp = null\n                    }: {\n                        has_interpreted: {\n                            [K in InterpStep]: boolean\n                        },\n                        prev_interp: InterpStep\n                    } = this.get_current_om_state();\n\n                    let ready_for_last = interp_steps.slice(0, 3).every(x => has_interpreted[x]);\n                    let finished = interp_steps.every(x => has_interpreted[x]);\n\n                    let reify_consumer = wrap_handler(function*(parser: CommandParser) {\n                        yield parser.consume_option([\n                            annotate(['reify'], {\n                                display: DisplayEltType.keyword,\n                                enabled: !finished\n                            })]);\n\n                        let opt1: string = yield parser.consume_option([\n                            annotate(['the'], {\n                                display: DisplayEltType.filler,\n                                enabled: !ready_for_last\n                            }),\n                            annotate(['her'], {\n                                display: DisplayEltType.filler,\n                                enabled: ready_for_last\n                            })\n                        ]);\n\n                        let opt2: string;\n\n                        if (opt1 === 'the') {\n                            // the calamity\n                            // the shattered mirror\n                            // the ice-covered mountain\n                            opt2 = yield parser.consume_option([\n                                annotate(['calamity'], {enabled: !has_interpreted['the calamity']}),\n                                annotate(['shattered', 'mirror'], {enabled: !has_interpreted['the shattered mirror']}),\n                                annotate(['ice-covered', 'mountain'], {enabled: !has_interpreted['the ice-covered mountain']})\n                            ]);\n                        } else {\n                            yield parser.consume_exact(['voice'], DisplayEltType.option);\n                            opt2 = 'voice';\n                        }\n\n                        yield parser.done();\n\n                        let chosen_step: InterpStep = <InterpStep>(opt1 + ' ' + opt2);\n                        \n                        return {\n                            world: this.update({\n                                om_state: {\n                                    [this.current_om()]: {\n                                        has_interpreted: {\n                                            [chosen_step]: true\n                                        },\n                                        prev_interp: chosen_step\n                                    }\n                                }\n                            })\n                        }\n                    });\n\n                    let end_consumer = wrap_handler(function*(parser: CommandParser) {\n                        yield parser.consume_option([\n                            annotate(['end'], {\n                                display: DisplayEltType.filler,\n                                enabled: finished\n                            })]);\n\n                        yield parser.consume_exact(['interpretation']);\n                        yield parser.done();\n\n                        let result = this.transition_to('outward, 4');\n                        result.world = result.world.update({\n                            om_state: {\n                                [this.current_om()]: {\n                                    has_interpreted: {},\n                                    prev_interp: null\n                                }\n                            }\n                        }, [this.current_om()]);\n\n                        return result;\n                    });\n\n                    return combine.call(this, parser, [reify_consumer, end_consumer]);\n                }),\n                dest_oms: ['outward, 4'],\n                interpret_history: function (this: VenienceWorld, history_elt: VenienceWorldInterstitialUpdateResult): HistoryInterpretationOp {\n                    \n                    if (history_elt.world.current_om() === this.current_om()) {\n                        let {\n                            has_interpreted = {},\n                            prev_interp = null\n                        }: {\n                            has_interpreted: {\n                                [K in InterpStep]: boolean\n                            },\n                            prev_interp: InterpStep\n                        } = this.get_current_om_state();\n\n                        let {prev_interp: h_prev_interp = null} = history_elt.world.get_current_om_state();\n\n                        if (h_prev_interp === null) {\n                            if (prev_interp === 'the calamity') {\n                                return [{add: 'reif-dream-1-enabled'}];\n                            } else if (prev_interp === 'the shattered mirror') {\n                                return [{add: 'reif-dream-2-enabled'}];\n                            } else if (prev_interp === 'the ice-covered mountain') {\n                                return [{add: 'reif-dream-3-enabled'}];\n                            } else if (prev_interp === 'her voice') {\n                                return [{add: 'reif-dream-4-enabled'}];\n                            }\n                        }\n                    }\n                }\n            }\n        })(),\n        {\n            id: 'outward, 4',\n            enter_message: `\n            <i>You have reached the end of the demo.\n            <br/><br/>\n            Your journey to the mountain will be told in Chapter 2.\n            <br/><br/>\n            Thanks for playing Venience World!\n            <br/><br/>\n            Feel free to return to the clearing and proceed differently.\n            </i>`,\n            transitions: [\n            [['*return', 'to the', 'clearing'], 'woods, clearing']]\n        }\n    ];\n});\n\nlet ch1_perceptions: () => Perception[] = () => [\n    {\n        id: 'forest, general',\n        content: `\n        The sun trickles through the thick brush.\n        <br />\n        <br />\n        The growth of the forest surrounds you in every direction.`\n    },\n    {\n        id: 'self, 2',\n        content: `\n        Your silk pajamas glisten in the midmorning sun.\n        <br/><br/>\n        You are determined to continue your life's work.\n        <br/><br/>\n        To find or rewrite your missing notes.`\n    },\n    {\n        id: 'forest, parchment trees',\n        content: `\n        The parchment teems with scrawlings of\n        <br/><br/>\n        stories,\n        <br/><br/>\n        transcripts,\n        <br/><br/>\n        annotations,\n        <br/><br/>\n        <div class=\"interp\">\n        and interpretations.\n        </div>`\n    },\n    {\n        id: 'note fragment',\n        content: `\n        You brush aside the leaves.\n        <br/><br/>\n        It appears to be a fragment from your missing notes.`\n    },\n    {\n        id: 'tangle, tower base',\n        content: `\n        The tower evokes a solid, steadfast presence.\n        <br/><br/>\n        Its construction is orderly and massive.\n        <br/><br/>\n        A grid of thick, vertical wooden beams rooted deep within the ground provides its sturdy foundation.\n        <br/><br/>\n        Heavy wooden slabs form a railed stairway that winds up to the top platform.\n        <br/><br/>\n        The wood is damp and weathered to a greenish brown, as though it has been here for an eternity.`\n    },\n    {\n        id: 'tangle, tower peak',\n        content: `\n        The sun dances over the top of the canopy. You see the parchment-white birch trees flow into the brown of oak, and the fuzzy-green of distant pine.\n        <br/><br/>\n        You survey the looping threads of passage through the woods.\n        <br /><br />\n        You see the trail you took to reach this viewing tower. You see it flow back into the clearing, which in turn flows into the narrow, winding path through the birch thicket.\n        <br/><br/>\n        Further out, a frozen river carves the forest in half.\n        </br><br/>\n        And beyond that, the base of a snow-covered mountain.\n        <br/><br/>\n        You see the path back through the oak trees to your alcove, that you are destined to walk again, if you are ever to return to your study and transcribe your experiences.`\n    },\n    {\n        id: 'tangle, 1',\n        content: `\n        <div class=\"interp\"><i>\n        \"We wander, for the most part, within a tangled, looping mess of thought;\n        <br/><br/>\n        a haphazard ligature of unrelated perceptions.\n        <br/><br/>\n        Within the tangle, we lack the perspective to find the meaning we seek.”\n        </i></div>\n        <div class=\"reif-tangle-1\">\n        <br/>\n        This winding maze of birch <i>is</i> the tangle.\n        <br/><br/>\n        It disorients you, subsumes you in its curves.\n        </div>\n        `,\n    },\n    {\n        id: 'tangle, 2',\n        content: `\n        <div class=\"interp\"><i>\n        “It is only when we find a vantage outside of the central tangle, looking over it, that we might sort out the mess in our minds.\n        <br/><br/>\n        The twisting fibres of our journey are put into perspective.\n        <br/><br/>\n        It is peaceful from up there.\"\n        </i></div>\n        <div class=\"reif-tangle-2\">\n        <br/>\n        This tower <i>is</i> the outside vantage.\n        <br/><br/>\n        It gives you the perspective to see how far you've come, and what waits for you ahead.\n        </div>`,\n    },\n    {\n        id: 'tangle, 3',\n        content: `\n        <div class=\"interp\"><i>\n        \"But do not grow too comfortable in that peace’s embrace.\n        <br/><br/>\n        It is a respite. And it must end.\n        <br/><br/>\n        All there is to do, once one has stood outside the tangle for a while and surveyed it,\n        <br/><br/>\n        is to return to it.\n        <br/><br/>\n        To dance.\"\n        </i></div>\n        <div class=\"reif-tangle-3\">\n        <br/>\n        Your own motion through the birch tangle and back out\n        <br/><br/>\n        your climb up the tower and back down\n        <br/><br/>\n        your exodus from the world into your alcove\n        <br/><br/>\n        your years spent in solitude\n        <br/><br/>\n        your setting forth this morning, and arriving here\n        <br/><br/>\n        this <i>is</i> the dance.\n        </div>`\n    }\n\n]\n\nexport default {\n    observer_moments: ch1_oms,\n    perceptions: ch1_perceptions\n};\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/venience/chapters/01_chapter_1.ts","import {\n    // FuckDict,\n    FuckSet,\n    ValidatedString,\n    ValidString,\n    set_enabled,\n    is_enabled,\n    chain_update,\n    infer_literal_array\n} from '../datatypes';\n\nimport {\n    CommandHandler,\n    HistoryInterpretationOp,\n    World\n} from '../commands';\n\nimport {\n    CommandParser,\n    DisplayEltType,\n    with_early_stopping,\n    PhraseDSLValidator\n} from '../parser'\n\nimport {\n    VenienceWorldCommandHandler,\n    VenienceWorldCommandResult,\n    VenienceWorldHistoryInterpreter,\n    wrap_handler\n} from './venience_world';\n\nimport {\n    tokenize,\n    wrap_in_div\n} from '../text_tools';\n\nconst ObserverMomentIDs = infer_literal_array(\n    'bed, sleeping 1',\n    'bed, awakening 1',\n    'bed, sitting up 1',\n\n    'bed, trying to remember 1',\n    'bed, trying to remember 2',\n    'bed, trying to remember 3',\n    'bed, trying to remember 4',\n    'bed, trying to remember 5',\n    'bed, trying to remember 6',\n\n    'bed, lying down 1',\n\n    'bed, sleeping 2',\n    'bed, awakening 2',\n    'bed, sitting up 2',\n    \n    'desk, sitting down',\n    'desk, opening the envelope',\n    'desk, reacting',\n    'desk, trying to understand 1',\n    'desk, trying to understand 2',\n    'desk, considering the sense of panic',\n    'desk, searching for the notes',\n    \n    'grass, slipping further',\n    'grass, considering the sense of dread',\n    'grass, asking 1',\n    'grass, asking 2',\n    \n    'alcove, beginning interpretation',\n    'alcove, ending interpretation',\n    \n    'alcove, entering the forest',\n\n    'title',\n\n    //ch1\n    'alone in the woods',\n    'woods, trying to understand',\n    'woods, considering the sense of uncertainty',\n    'woods, asking 1',\n    'woods, asking 2',\n    'woods, beginning interpretation',\n    'woods, ending interpretation',\n    'woods, considering remaining',\n    'woods, crossing the boundary 1',\n    'woods, crossing the boundary 2',\n\n    'woods, crossing the boundary 3',\n\n    'woods, clearing',\n    // 'woods, clearing 2', // pseudo copies to avoid loop erasure\n    // 'woods, clearing 3', // because the impl is currently a bit of a hack :(\n\n    'woods, tangle',\n    \n    'tower, base',\n    // 'tower, base 2',\n    \n    'tower, peak',\n\n    'inward, 1',\n    'inward, 2',\n    'inward, 3',\n    'inward, 4',\n    'inward, 5',\n    // 'woods, birch parchment 1',\n    // 'woods, birch parchment 2',\n\n\n    'reading the story of charlotte',\n\n    'outward, 1',\n    'outward, 2',\n    'outward, 3',\n    'outward, 4'\n)\n\n\nexport type ObserverMomentID = typeof ObserverMomentIDs[number];\n\nconst PerceptionIDs = infer_literal_array(\n    // Prologue\n    'alcove, general',\n    'self, 1',\n    'alcove, envelope',\n\n    // ch1\n    'forest, general',\n    'self, 2',\n    'note fragment',\n    'tangle, tower base',\n    'tangle, tower peak',\n    'tangle, 1',\n    'tangle, 2',\n    'tangle, 3',\n\n    'forest, parchment trees'\n);\n\nexport type PerceptionID = typeof PerceptionIDs[number];\n\n\nconst ContentionIDs = infer_literal_array(\n    // ch1\n    'tangle, 1',\n    'tangle, 2',\n    'tangle, 3'\n)\n\nexport type ContentionID = typeof ContentionIDs[number];\n\n\n\nexport type TransitionList = (\n    [ValidatedString<PhraseDSLValidator>[], ObserverMomentID][]\n);\nexport type TransitionListI = {\n    transitions: TransitionList,\n};\n\nexport type Transitions = TransitionListI | (\n    VenienceWorldCommandHandler\n    & { dest_oms: ObserverMomentID[] }\n);\n\nexport function are_transitions_declarative(t: Transitions): t is TransitionListI {\n    return (t as TransitionListI).transitions !== undefined;\n}\n\nexport type InterpretationList = {[key in ObserverMomentID]?: HistoryInterpretationOp};\n\nexport type InterpretationListI = {\n    interpretations?: InterpretationList\n};\n\nexport type Interpretations = InterpretationListI | VenienceWorldHistoryInterpreter;\n\nexport function has_interpretations(i: Partial<Interpretations>): i is Interpretations {\n    return (i as any).interpretations !== undefined || (i as any).interpret_history !== undefined;\n}\n\nexport function are_interpretations_declarative(i: Interpretations): i is InterpretationListI {\n    return (i as InterpretationListI).interpretations !== undefined;\n}\n\nexport type ObserverMoment = {\n    id: ObserverMomentID | ObserverMomentID[],\n    enter_message?: string,\n    short_enter_message?: string,\n} & Transitions & Interpretations;\n\nexport type Perception = {\n    id: PerceptionID,\n    content: string\n}\n\n// export type Recitation = {\n//     id: RecitationID,\n//     contents: string[]\n// }\n\nexport function index_oms(oms: ObserverMoment[]): {[K in ObserverMomentID]: ObserverMoment}{\n    // let result = new FuckDict<ObserverMomentID, ObserverMoment>();\n    let result: Partial<{[K in ObserverMomentID]: ObserverMoment}> = {};\n    for (let om of oms){\n        if (are_transitions_declarative(om)) {\n            for (let [cmd, dest] of om.transitions) {\n                for (let phrase of cmd) {\n                    if (!PhraseDSLValidator.validate(phrase)) {\n                        throw `Transition phrase \"${phrase}\" in ObserverMoment ${om.id} has ~ or * or & somewhere other than the start.`;\n                    }\n                }\n            }\n        }\n        if (om.id in result) {\n            throw `Duplicate ObserverMoment provided for ${om.id}`;\n        }\n        if (typeof om.id === 'string'){\n            result[om.id] = om;\n        } else {\n            for (let om_id of om.id) {\n                result[om_id] = om;\n            }\n        }\n    }\n\n    for (let om_id of ObserverMomentIDs) {\n        if (!(om_id in result)) {\n            throw `Missing ObserverMoment: ${om_id}`;\n        }\n    }\n\n    //second/third pass, typecheck em\n    let pointed_to = new Set<ObserverMomentID>();\n    for (let om of oms) {\n        let dest_oms: ObserverMomentID[];\n        if (are_transitions_declarative(om)) {\n            dest_oms = om.transitions.map(([cmd, om_id]) => om_id);\n        } else {\n            dest_oms = om.dest_oms;\n        }\n\n        for (let om_id of dest_oms) {\n            if (om_id !== null) {\n                if (!(om_id in result)) {\n                    throw `om \"${om.id}\" has transition to non-existant om \"${om_id}\"`;\n                }\n                pointed_to.add(om_id);\n            }\n        }\n    }\n\n    for (let om of oms.slice(1)) {\n        let om_ids: ObserverMomentID[];\n        if (typeof om.id === 'string') {\n            om_ids = [om.id];\n        } else {\n            om_ids = om.id;\n        }\n        for (let om_id of om_ids) {\n            if (!pointed_to.has(om_id)) {\n                throw `om \"${om.id}\" is unreachable (and not the first in the list).`;\n            }\n        }\n    }\n    \n    return <{[K in ObserverMomentID]: ObserverMoment}>result;\n}\n\nexport function index_perceptions(perceptions: Perception[]): {[K in PerceptionID]: Perception} {\n    let result: Partial<{[K in PerceptionID]: Perception}> = {};\n    for (let p of perceptions) {\n        if (!(p.id in result)) {\n            result[p.id] = p;\n        } else {\n            throw `Duplicate perception definition for ${p.id}`;\n        }\n    }\n\n    for (let p of PerceptionIDs) {\n        if (!(p in result)) {\n            throw `Missing PerceptionID: ${p}`;\n        }\n    }\n\n    return <{[K in PerceptionID]: Perception}>result;\n}\n\n// Syntax shortcuts:\n// * = keyword\n// & = option\n\n// export let tower_oms = index_oms([\n//     {\n//         id: 'base, from path',\n//         enter_message: `<i>(Welcome to the demo! This game doesn't have a proper name yet.)</i>\n//         <br /><br />\n//         The viewing tower sits twenty feet inset from the footpath, towards the Mystic River.\n//         The grass leading out to it is brown with wear.`,\n//         transitions: [\n//             [['approach', 'the viewing tower'], 'base, regarding tower']]\n//     },\n//     {\n//         id: 'base, regarding tower',\n//         enter_message: `The viewing tower stands tall and straight. Its construction is one of basic, stable order. A square grid of thick wooden columns rooted deep within the ground rises up before you; the foundation of the tower.\n//             <br /><br />\n//             A wooden stairway set between the first two rows of columns leads upward.`,\n//         transitions: [\n//             [['climb', 'the stairs'], 'stairs 1, ascending']]\n//     },\n//     {\n//         id: 'stairs 1, ascending',\n//         enter_message: `As you ascend, the ground below you recedes.\n//             <br /><br />\n//             <div class=\"meditation-1\">\n//                 You rifle through your notes to another of Katya’s meditations, this one on Vantage Points:\n//                 <br /><br />\n//                 \"We wander, for the most part, within a tangled, looping mess of thought; a ball of lint.\"\n//                 <br /> <br />\n//             </div>\n//             The stairway terminates at a flat wooden platform leading around a corner to the left, along the next edge of the tower.`,\n//         transitions: [\n//             [['turn', 'left', 'and proceed along the platform'], 'platform 1, ascending'],\n//             [['turn', 'around', 'and descend the stairs'], 'base, regarding tower']]\n//     },\n//     {\n//         id: 'platform 1, ascending',\n//         enter_message: `You catch glimpses of the grass, trees, and the Mystic River as you make your way across.\n//             <br /><br />\n//             <div class=\"meditation-1\">\n//             You continue reading:\n//             <br /><br />\n//             \"From within the tangle, we feel lost. It is only when we find a vantage outside of the central tangle, looking over it, that we might sort out the mess in our minds.\"\n//             <br /><br />\n//             </div>\n//             The platform terminates, and another wooden stairway to the left leads further up the tower.`,\n//         transitions: [\n//             [['turn', 'left', 'and climb the stairs'], 'stairs 2, ascending'],\n//             [['turn', 'around', 'and proceed along the platform'], 'stairs 1, ascending']]\n//     },\n//     {\n//         id: 'stairs 2, ascending',\n//         enter_message: `They feel solid under your feet, dull thuds sounding with each step.\n//             <br /><br />\n//             <div class=\"meditation-1\">\n//             \"It can feel like a deliverance when one reaches such a vantage after much aimless wandering.\"\n//             <br /><br />\n//             </div>\n//             The stairs terminate in another left-branching platform.`,\n//         transitions: [\n//             [['turn', 'left', 'and proceed along the platform'], 'platform 2, ascending'],\n//             [['turn', 'around', 'and descend the stairs'], 'platform 1, ascending']]\n//     },\n//     {\n//         id: 'platform 2, ascending',\n//         enter_message: `You make your way across the weathered wood.\n//             <br /><br />\n//             <div class=\"meditation-1\">\n//             \"The twisting fibres of our journey are put into perspective. We see how one piece of the path relates to another. It is peaceful from up there.\"\n//             <br /><br />\n//             </div>\n//             A final wooden stairway to the left leads up to the top of the tower.`,\n//         transitions: [\n//             [['turn', 'left', 'and climb the stairs'], 'top, arriving'],\n//             [['turn', 'around', 'and proceed along the platform'], 'stairs 2, ascending']]\n//     },\n//     {\n//         id: 'top, arriving',\n//         enter_message: `You reach the top. A grand visage of the Mystic River and Macdonald Park extends before you in all directions.`,\n//         transitions: [\n//             [['survey', 'the area'], 'top, surveying'],\n//             [['descend', 'the stairs'], 'platform 2, ascending']]\n//     },\n//     {\n//         id: 'top, surveying',\n//         enter_message: `You survey the looping fibres of path around the park, the two wooden bridges at either end, and the frozen river carving your vantage in two.\n//             <br /><br />\n//             You see the path you took to reach this viewing tower. You see it continue further onward, into MacDonald Park, and branch, curving into the brush by the river.\n//             <br /><br />\n//             You see the wooden footbridge crossing the river that you are destined to walk across, if you are ever to return to your study, and transcribe your experiences.\n//             <br /><br />\n//             <div class=\"meditation-1\">\n//             \"But do not be fooled; all there is to do, once one has stood above the tangle for a while, and surveyed it, is to return to it.\"\n//             </div>`,\n//         transitions: [\n//             [['descend', 'the stairs'], 'stairs 3, descending']]\n//     },\n//     {\n//         id: 'stairs 3, descending',\n//         enter_message: `Your view of the surrounding park and river is once again obscured by the weathered wood of the viewing tower, rising up around you.\n//             <br /><br />\n//             <div class=\"meditation-1\">\n//             \"Do not fret, my dear. Return to the madness of life after your brief respite.\"\n//             </div>`,\n//         transitions: [\n//             [['turn', 'right', 'and proceed along the platform'], 'platform 2, descending'],\n//             [['turn', 'around', 'and ascend the stairs'], 'top, surveying']]\n//     },\n//     {\n//         id: 'platform 2, descending',\n//         enter_message: `The wooden beams of the viewing tower seem more like a maze now than an orderly construction. They branch off of each other and reconnect at odd angles.\n//             <div class=\"meditation-1\">\n//             <br /><br />\n//             \"Expect to forget; to be turned around; to become tangled up.\"\n//             </div>`,\n//         transitions: [\n//             [['turn', 'right', 'and descend the stairs'], 'stairs 2, descending'],\n//             [['turn', 'around', 'and proceed along the platform'], 'stairs 3, descending']]\n//     },\n//     {\n//         id: 'stairs 2, descending',\n//         enter_message: `The light of the sun pokes through odd gaps in the tangles of wood, making you squint at irregular intervals.\n//             <div class=\"meditation-1\">\n//             <br /><br />\n//             \"Find some joy in it; some exhilaration.\"\n//             </div>`,\n//         transitions: [\n//             [['turn', 'right', 'and proceed along the platform'], 'platform 1, descending'],\n//             [['turn', 'around', 'and ascend the stairs'], 'platform 2, descending']]\n//     },\n//     {\n//         id: 'platform 1, descending',\n//         enter_message: `You know where you must go from here, roughly. The footpath will branch into thick brush up ahead. And a ways beyond that brush, a wooden footbridge.\n//             <div class=\"meditation-1\">\n//             <br /><br />\n//             \"And know that you have changed, dear. That your ascent has taught you something.\"\n//             </div>`,\n//         transitions: [\n//             [['turn', 'right', 'and descend the stairs'], 'base, regarding path'],\n//             [['turn', 'around', 'and proceed along the platform'], 'stairs 2, descending']]\n//     },\n//     {\n//         id: 'base, regarding path',\n//         enter_message: `What lies within the brush you know you will enter, but which you can no longer see from this low vantage? What will it be like to walk across the footbridge?\n//             <br /><br />\n//             <i>(End of demo. Thanks for playing!)</i>`,\n//         transitions: []\n//     }\n// ]);\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/venience/observer_moments.ts"],"sourceRoot":""}